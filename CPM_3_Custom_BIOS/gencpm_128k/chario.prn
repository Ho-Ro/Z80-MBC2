CP/M RMAC ASSEM 1.1	#001	CP/M 3 MODULE FOR CHARACTER I/O HANDLING - Z80-MBC2 (A040618)

                ;********************************************************************************************
                ;
                ; CHARIO.ASM - S210918-R210923
                ; CP/M 3.0 CHARACTER I/O BIOS MODULE FOR THE Z80-MBC2 (HW ref. A040618)
                ;
                ; Required IOS S220718-R290823 (or following revisions until otherwise stated)
                ;
                ; NOTE: Use the RMAC.COM relocatable assembler
                ;
                ; CHANGELOG:
                ;
                ; S210918           First release
                ; S210918-R090319   Changed CIST0: and CI0: to allow full 8 bit data I/O
                ; S210918-R170319   Added the selection of the mode of CIST0: (7 or 8 bit mode, for XMODEM)
                ; S210918-R210923   Added support for the SPP Adapter board (parallel printer) as Device 1
                ;
                ;
                ;********************************************************************************************
                
                TITLE   'CP/M 3 MODULE FOR CHARACTER I/O HANDLING - Z80-MBC2 (A040618)'
                
                    ; DEFINE LOGICAL VALUES:
 FFFF =         TRUE        EQU -1
 0000 =         FALSE       EQU NOT TRUE
                
                    ; DETERMINE IF FOR BANK SELECT OR NOT:
 0000 =         BANKED      EQU FALSE       ; <------ BANKED/NON-BANKED SWITCH
                
                ; -------------------------------------------------------------------
                ;
                ;          >>>>>>>>>>>>>> READ CAREFULLY <<<<<<<<<<<<<<
                ;
                ; To prevent the CHARIO.ASM bank swiching IOS requests from
                ; interfering with user program IOS request if using
                ; "slow" interpreters as e.g. MBASIC.COM, I've decided to avoid
                ; bank switching here. This is a simple solution to avoid more
                ; complex one. For this reason the "BANKED" switch is intentionally
                ; set at "FALSE" (although the system is banked)
                ;
                ; -------------------------------------------------------------------
                
                
                    ; DEFINE PUBLIC LABELS:
                    PUBLIC  ?CINIT,?CI,?CO,?CIST,?COST
                    PUBLIC  @CTBL
                    PUBLIC  ?cnstFlg    ; CONST mode flag (Z80-MBC2) ***
                
                    ; DEFINE EXTERNAL LABELS AND ENTRY POINTS:
                    IF  BANKED
                    EXTRN   @CBNK
                    EXTRN   ?BNKSL
                    ENDIF
                    EXTRN   OUT$BLOCKS  ; BLOCK OUTPUT ROUTINE TO I/O PORTS
                    EXTRN   ?PMSG
                
                    ; INCLUDE Z-80 MACROS:
CP/M RMAC ASSEM 1.1	#002	CP/M 3 MODULE FOR CHARACTER I/O HANDLING - Z80-MBC2 (A040618)

                    
                    MACLIB  Z80
                
                    ; EQUATES FOR MODE BYTE BIT FIELDS
                
 0001 =         MB$INPUT    EQU 0000$0001B  ; DEVICE MAY DO INPUT
 0002 =         MB$OUTPUT   EQU 0000$0010B  ; DEVICE MAY DO OUTPUT
 0003 =         MB$IN$OUT   EQU MB$INPUT+MB$OUTPUT
                
 0004 =         MB$SOFT$BAUD    EQU 0000$0100B  ; SOFTWARE SELECTABLE BAUD RATES
                
 0008 =         MB$SERIAL   EQU 0000$1000B  ; DEVICE MAY USE PROTOCOL
 0010 =         MB$XON$XOFF EQU 0001$0000B  ; XON/XOFF PROTOCOL ENABLED
                
 0000 =         BAUD$NONE   EQU 0       ; NO BAUD RATE ASSOCIATED WITH THIS DEVICE
 0001 =         BAUD$50     EQU 1       ; 50 BAUD
 0002 =         BAUD$75     EQU 2       ; 75 BAUD
 0003 =         BAUD$110    EQU 3       ; 110 BAUD
 0004 =         BAUD$134    EQU 4       ; 134.5 BAUD
 0005 =         BAUD$150    EQU 5       ; 150 BAUD
 0006 =         BAUD$300    EQU 6       ; 300 BAUD
 0007 =         BAUD$600    EQU 7       ; 600 BAUD
 0008 =         BAUD$1200   EQU 8       ; 1200 BAUD
 0009 =         BAUD$1800   EQU 9       ; 1800 BAUD
 000A =         BAUD$2400   EQU 10      ; 2400 BAUD
 000B =         BAUD$3600   EQU 11      ; 3600 BAUD
 000C =         BAUD$4800   EQU 12      ; 4800 BAUD
 000D =         BAUD$7200   EQU 13      ; 7200 BAUD
 000E =         BAUD$9600   EQU 14      ; 9600 BAUD
 000F =         BAUD$19200  EQU 15      ; 19.2K BAUD
                
                ; --------------------------------------------------------------------------------
                ;
                ; Z80-MBC2 IOS equates
                ;
                ; --------------------------------------------------------------------------------
                
 0000 =         EXC$WR$OPCD  EQU    000H      ; Address of the EXECUTE WRITE OPCODE write port
 0000 =         EXC$RD$OPCD  EQU    000H      ; Address of the EXECUTE READ OPCODE read port
 0001 =         STO$OPCD     EQU    001H      ; Address of the STORE OPCODE write port
 0001 =         SERIAL$RX    EQU    001H      ; Address of the SERIAL RX read port
 0001 =         SERTX$OPC    EQU    001H      ; SERIAL TX opcode
 0009 =         SELDISK$OPC  EQU    009H      ; SELDISK opcode
 0011 =         SETSPP$OPC   EQU    011H      ; SETSPP opcode
 0012 =         WRSPP$OPC    EQU    012H      ; WRSPP opcoce
 000A =         SELTRCK$OPC  EQU    00AH      ; SELTRACK opcode
 000B =         SELSECT$OPC  EQU    00BH      ; SELSECT opcode
 000C =         WRTSECT$OPC  EQU    00CH      ; WRITESECT opcode
 0083 =         SYSFLAG$OPC  EQU    083H      ; SYSFLAG opcode
 0084 =         DATETIM$OPC  EQU    084H      ; DATETIME opcode
 0085 =         ERRDSK$OPC   EQU    085H      ; ERRDISK opcode
 0086 =         RDSECT$OPC   EQU    086H      ; READSECT opcode
 0087 =         SDMOUNT$OPC  EQU    087H      ; SDMOUNT opcode
 008A =         GETSPP$OPC   EQU    08AH      ; GETSPP opcode
 00C9 =         SPPRDY       EQU    0C9H      ; SPP status printer ready pattern (11001001)
                
CP/M RMAC ASSEM 1.1	#003	CP/M 3 MODULE FOR CHARACTER I/O HANDLING - Z80-MBC2 (A040618)

                
                    ; WILL START OFF IN COMMON MEMORY FOR BANKED OR NON-BANKED SYSTEMS:
                    ; --------------------------
                    CSEG
                    ; --------------------------
                
                
                  IF    BANKED
                    ; WE PROVIDE ALTERNATE DEFINITIONS OF THE ROUTINE ENTRY POINTS IF
                    ;  WE ARE RUNNING A BANKED SYSTEM VERSUS A NON-BANKED SYSTEM:
                
                    ;;;;; ?CINIT
                    ; ENTER HERE FOR BANKED SYSTEMS FOR DEVICE INITIALIZATIONS:
                ?CINIT:
                    LXI H,BCINIT    ;POINT TO BANKED ROUTINE ADDRESS
                    JR  BANKIO      ;GO TO DISPATCHER
                
                    ;;;;; ?CI
                    ; ENTER HERE FOR BANKED SYSTEM DEVICE INPUT:
                ?CI:    LXI H,BCI   ;POINT TO BANKED ROUTINE ADDRESS
                    JR  BANKIO      ;GO TO DISPATCHER
                
                    ;;;;; ?CO
                    ; ENTER HERE FOR BANKED SYSTEM DEVICE OUTPUT:
                ?CO:    LXI H,BCO   ;POINT TO BANKED ROUTINE ADDRESS
                    JR  BANKIO      ;GO TO DISPATCHER
                
                    ;;;;; ?CIST
                    ; ENTER HERE FOR BANKED SYSTEM DEVICE INPUT STATUS:
                ?CIST:  LXI H,BCIST ;POINT TO BANKED ROUTINE ADDRESS
                    JR  BANKIO      ;GO TO DISPATCHER
                
                    ;;;;; ?COST
                    ; ENTER HERE FOR BANKED SYSTEM DEVICE OUTPUT STATUS:
                ?COST:  LXI H,BCOST ;POINT TO BANKED ROUTINE ADDRESS
                
                
                    ;;;;; BANKIO
                    ; ROUTINE DISPATCHES TO BANKED PORTION OF CHARACTER I/O ROUTINES:
                BANKIO:
                    SSPD    SPSAVE  ;SAVE CURRENT STACK POINTER
                    LXI SP,IOSP     ; AND USE LOCAL STACK FOR I/O
                    LDA @CBNK       ;GET CURRENT BANK
                    PUSH    PSW     ;SAVE ON LOCAL STACK
                    XRA A           ;WE WILL SELECT BANK 0 (OP SYS)
                    CALL    ?BNKSL
                    LXI D,BIORET    ;RETURN ADDRESS IN [DE]
                    PUSH    D       ;PUT IT ON STACK FOR RETURN
                    PCHL            ;DISPATCH TO BANKED PART OF ROUTINE
                
                    ; ARRIVE HERE AFTER DEVICE HANDLER FINISHED:
                BIORET:
                    POP D           ;GET PREVIOUS CURRENT BANK TO [D]
                    PUSH    PSW     ;SAVE HANDLER RETURNED RESULT (IF ANY)
                    MOV A,D         ;RESELECT PREVIOUS CURRENT BANK
                    CALL    ?BNKSL
CP/M RMAC ASSEM 1.1	#004	CP/M 3 MODULE FOR CHARACTER I/O HANDLING - Z80-MBC2 (A040618)

                    POP PSW         ;GET BACK RESULT CODE TO [A]
                    LSPD    SPSAVE  ;RESTORE PREVIOUS STACK
                    RET             ;AND RETURN...
                  ENDIF
                
                
                    ;;;;;
                    ;;;;; ACTUAL DEVICE HANDLERS
                    ;;;;;
                
                
                    ;;;;; ?CINIT (BCINIT FOR BANKED)
                    ; PHYSICAL CODE FOR DEVICE INITIALIZATION:
                  IF    BANKED
                    ; --------------------------
                    DSEG            ;CAN PUT IN BANKED SEGMENT IF BANKED
                    ; --------------------------
                BCINIT:
                  ELSE
                ?CINIT:
                  ENDIF
 0000 41            MOV B,C         ;ON ENTRY DEVICE # IS IN [C] BUT WE NEED
                                    ; IT IN [B]
 0001 CDB000        CALL    DEV$DISPATCH    ;GO TO CORRECT INIT ROUTINE
 0004 3E01          DW  NULL$INIT   ;INIT FOR DEVICE 0: nothing to initialize
 0006 3E01          DW  NULL$INIT   ;INIT FOR DEVICE 1: nothing to initialize
 0008 3E01          DW  NULL$INIT   ;INIT FOR DEVICE 2
 000A 3E01          DW  NULL$INIT   ;INIT FOR DEVICE 3
 000C 3E01          DW  NULL$INIT   ;INIT FOR DEVICE 4
 000E 3E01          DW  NULL$INIT   ;INIT FOR DEVICE 5
 0010 3E01          DW  NULL$INIT   ;INIT FOR DEVICE 6
 0012 3E01          DW  NULL$INIT   ;INIT FOR DEVICE 7
 0014 3E01          DW  NULL$INIT   ;INIT FOR DEVICE 8
 0016 3E01          DW  NULL$INIT   ;INIT FOR DEVICE 9
 0018 3E01          DW  NULL$INIT   ;INIT FOR DEVICE 10
 001A 3E01          DW  NULL$INIT   ;INIT FOR DEVICE 11
 001C 3E01          DW  NULL$INIT   ;INIT FOR DEVICE 12
 001E 3E01          DW  NULL$INIT   ;INIT FOR DEVICE 13
 0020 3E01          DW  NULL$INIT   ;INIT FOR DEVICE 14
 0022 3E01          DW  NULL$INIT   ;INIT FOR DEVICE 15
                
                
                    ;;;;; ?CI (BCI FOR BANKED)
                    ; PHYSICAL CODE FOR DEVICE INPUT:
                  IF    BANKED
                BCI:
                  ELSE
                ?CI:
                  ENDIF
 0024 CDB000        CALL    DEV$DISPATCH
 0027 E900          DW  CI0         ;DEVICE 0 INPUT
 0029 3C01          DW  NULL$CI     ;DEVICE 1 INPUT: can't read from printer (SPP Adapter)
 002B 3C01          DW  NULL$CI     ;DEVICE 2 INPUT
 002D 3C01          DW  NULL$CI     ;DEVICE 3 INPUT
 002F 3C01          DW  NULL$CI     ;DEVICE 4 INPUT
 0031 3C01          DW  NULL$CI     ;DEVICE 5 INPUT
CP/M RMAC ASSEM 1.1	#005	CP/M 3 MODULE FOR CHARACTER I/O HANDLING - Z80-MBC2 (A040618)

 0033 3C01          DW  NULL$CI     ;DEVICE 6 INPUT
 0035 3C01          DW  NULL$CI     ;DEVICE 7 INPUT
 0037 3C01          DW  NULL$CI     ;DEVICE 8 INPUT
 0039 3C01          DW  NULL$CI     ;DEVICE 9 INPUT
 003B 3C01          DW  NULL$CI     ;DEVICE 10 INPUT
 003D 3C01          DW  NULL$CI     ;DEVICE 11 INPUT
 003F 3C01          DW  NULL$CI     ;DEVICE 12 INPUT
 0041 3C01          DW  NULL$CI     ;DEVICE 13 INPUT
 0043 3C01          DW  NULL$CI     ;DEVICE 14 INPUT
 0045 3C01          DW  NULL$CI     ;DEVICE 15 INPUT
                
                
                    ;;;;; ?CO (BCO FOR BANKED)
                    ; PHYSICAL CODE FOR DEVICE OUTPUT:
                  IF    BANKED
                BCO:
                  ELSE
                ?CO:
                  ENDIF
 0047 CDB000        CALL    DEV$DISPATCH    ;GO TO CORRECT DEVICE OUTPUT HANDLER
 004A 0A01          DW  CO0     ;DEVICE 0 OUTPUT
 004C 2401          DW  CO1         ;DEVICE 1 OUTPUT
 004E 3E01          DW  NULL$CO     ;DEVICE 2 OUTPUT
 0050 3E01          DW  NULL$CO     ;DEVICE 3 OUTPUT
 0052 3E01          DW  NULL$CO     ;DEVICE 4 OUTPUT
 0054 3E01          DW  NULL$CO     ;DEVICE 5 OUTPUT
 0056 3E01          DW  NULL$CO     ;DEVICE 6 OUTPUT
 0058 3E01          DW  NULL$CO     ;DEVICE 7 OUTPUT
 005A 3E01          DW  NULL$CO     ;DEVICE 8 OUTPUT
 005C 3E01          DW  NULL$CO     ;DEVICE 9 OUTPUT
 005E 3E01          DW  NULL$CO     ;DEVICE 10 OUTPUT
 0060 3E01          DW  NULL$CO     ;DEVICE 11 OUTPUT
 0062 3E01          DW  NULL$CO     ;DEVICE 12 OUTPUT
 0064 3E01          DW  NULL$CO     ;DEVICE 13 OUTPUT
 0066 3E01          DW  NULL$CO     ;DEVICE 14 OUTPUT
 0068 3E01          DW  NULL$CO     ;DEVICE 15 OUTPUT
                
                
                    ;;;;; ?CIST (BCIST FOR BANKED)
                    ; PHYSICAL CODE FOR DEVICE INPUT STATUS:
                  IF    BANKED
                BCIST:
                  ELSE
                ?CIST:
                  ENDIF
 006A CDB000        CALL    DEV$DISPATCH
 006D BF00          DW  CIST0       ;DEVICE 0 INPUT STATUS
 006F 3901          DW  NULL$CIST   ;DEVICE 1 INPUT STATUS: can't read from printer (SPP Adapter)
 0071 3901          DW  NULL$CIST   ;DEVICE 2 INPUT STATUS
 0073 3901          DW  NULL$CIST   ;DEVICE 3 INPUT STATUS
 0075 3901          DW  NULL$CIST   ;DEVICE 4 INPUT STATUS
 0077 3901          DW  NULL$CIST   ;DEVICE 5 INPUT STATUS
 0079 3901          DW  NULL$CIST   ;DEVICE 6 INPUT STATUS
 007B 3901          DW  NULL$CIST   ;DEVICE 7 INPUT STATUS
 007D 3901          DW  NULL$CIST   ;DEVICE 8 INPUT STATUS
 007F 3901          DW  NULL$CIST   ;DEVICE 9 INPUT STATUS
CP/M RMAC ASSEM 1.1	#006	CP/M 3 MODULE FOR CHARACTER I/O HANDLING - Z80-MBC2 (A040618)

 0081 3901          DW  NULL$CIST   ;DEVICE 10 INPUT STATUS
 0083 3901          DW  NULL$CIST   ;DEVICE 11 INPUT STATUS
 0085 3901          DW  NULL$CIST   ;DEVICE 12 INPUT STATUS
 0087 3901          DW  NULL$CIST   ;DEVICE 13 INPUT STATUS
 0089 3901          DW  NULL$CIST   ;DEVICE 14 INPUT STATUS
 008B 3901          DW  NULL$CIST   ;DEVICE 15 INPUT STATUS
                
                
                    ;;;;; ?COST (BCOST FOR BANKED)
                    ; PHYSICAL CODE FOR DEVICE OUTPUT STATUS:
                  IF    BANKED
                BCOST:
                  ELSE
                ?COST:
                  ENDIF
 008D CDB000        CALL    DEV$DISPATCH    ;GO TO CONSOLE OUTPUT STATUS HANDLER
 0090 E600          DW  COST0       ;DEVICE 0 OUTPUT STATUS
 0092 1201          DW  COST1       ;DEVICE 1 OUTPUT STATUS
 0094 3901          DW  NULL$COST   ;DEVICE 2 OUTPUT STATUS
 0096 3901          DW  NULL$COST   ;DEVICE 3 OUTPUT STATUS
 0098 3901          DW  NULL$COST   ;DEVICE 4 OUTPUT STATUS
 009A 3901          DW  NULL$COST   ;DEVICE 5 OUTPUT STATUS
 009C 3901          DW  NULL$COST   ;DEVICE 6 OUTPUT STATUS
 009E 3901          DW  NULL$COST   ;DEVICE 7 OUTPUT STATUS
 00A0 3901          DW  NULL$COST   ;DEVICE 8 OUTPUT STATUS
 00A2 3901          DW  NULL$COST   ;DEVICE 9 OUTPUT STATUS
 00A4 3901          DW  NULL$COST   ;DEVICE 10 OUTPUT STATUS
 00A6 3901          DW  NULL$COST   ;DEVICE 11 OUTPUT STATUS
 00A8 3901          DW  NULL$COST   ;DEVICE 12 OUTPUT STATUS
 00AA 3901          DW  NULL$COST   ;DEVICE 13 OUTPUT STATUS
 00AC 3901          DW  NULL$COST   ;DEVICE 14 OUTPUT STATUS
 00AE 3901          DW  NULL$COST   ;DEVICE 15 OUTPUT STATUS
                
                
                    ;;;;; DEV$DISPATCH
                    ; ROUTINE JUMPS TO CORRECT DEVICE HANDLER:
                DEV$DISPATCH:
 00B0 78            MOV A,B         ;GET DEVICE # TO [A]
 00B1 323F01        STA DEV$CODE    ;SAVE FOR LATER USE
 00B4 87            ADD A           ;X2 FOR WORD OFFSET
 00B5 E1            POP H           ;RETURN ADDRESS IS 1ST PARAMETER ADDRESS
 00B6 5F            MOV E,A         ;SET UP OFFSET IN [DE]
 00B7 1600          MVI D,0
 00B9 19            DAD D           ;[HL] = PTR TO HANDLER ADDRESS
 00BA 5E            MOV E,M         ;GET HANDLER ADDRESS TO [DE]
 00BB 23            INX H
 00BC 56            MOV D,M
 00BD EB            XCHG            ;PUT IN [HL]
 00BE E9            PCHL            ;AND DISPATCH TO IT...
                
                
                    ;;;;;
                    ;;;;; PHYSICAL DEVICE HANDLER CODE:
                    ;;;;;
                    
                ; ----------------------------------------------------------
CP/M RMAC ASSEM 1.1	#007	CP/M 3 MODULE FOR CHARACTER I/O HANDLING - Z80-MBC2 (A040618)

                ;
                ; Z80-MBC2 I/O
                ;
                ; ----------------------------------------------------------
                
                ; 
                ;<<<<<<<<<<<<<<<<<<< MAIN CONSOLE/DEVICE 0 STATUS ROUTINE (Z80-MBC2) >>>>>>>>>>>>>>>>>>>>>> 
                ;
                
                CIST0:              ; DEVICE 0 INPUT STATUS
 00BF 3AE500        lda     ?cnstFlg        ; A = CONST mode flag
 00C2 B7            ora     a               ; CONST mode flag = 0?
                    jrz     CONST7          ; Yes, jump to 7 bit CONST routine
 00C3+28        	DB	28H
 00C4+0D        	DB	CONST7-$-1
                CONST8:                     ; No, 8 bit mode CONST routine
 00C5 3E83          mvi     a, SYSFLAG$OPC  ; A = SYSFLAG opcode
 00C7 D301          out     STO$OPCD        ; Write the opcode
 00C9 DB00          in      EXC$RD$OPCD     ; Read SYSFLAG data into A
 00CB E604          ani     04H             ; Rx serial buffer empty (D2 = 0)?
                    jrz     NoInChr         ; Yes, jump
 00CD+28        	DB	28H
 00CE+13        	DB	NOINCHR-$-1
                                            ; No, set char ready flag
                
                InChr:                      ; Set char ready flag
 00CF 3EFF          mvi      a, 0ffH        ; Return CP/M a char ready flag ($FF)
 00D1 C9            ret
                
                CONST7:
 00D2 3AE400        lda     InChrBuf        ; A = previous char read by CONST, if any
 00D5 FEFF          cpi     0ffH            ; Is = $FF ($FF from UART = no char)?
                    jrnz    InChr           ; No, jump (char already read and ready)
 00D7+20        	DB	20H
 00D8+F6        	DB	INCHR-$-1
 00D9 DB01          in      SERIAL$RX       ; Yes, Read a char from "virtual" UART
 00DB 32E400        sta     InChrBuf        ; Store it
 00DE FEFF          cpi     0ffH            ; Is = $FF ($FF from UART = no char)?
                    jrnz    InChr           ; No, set char ready flag
 00E0+20        	DB	20H
 00E1+ED        	DB	INCHR-$-1
                                            ; Yes, set char not ready flag
                
                NoInChr:                    ; Set char not ready flag
 00E2 AF            xra     a               ; Set no char flag (A = 0)
 00E3 C9            ret                     ; Return CP/M no char flag ($00)
                    
                InChrBuf:                   ; Last read char by CONST ($FF = no char)
 00E4 FF            db      0ffH            ; Initialized as $FF
                ?cnstFlg:
 00E5 00            db      0H              ; CONST mode flag. If = 1 the full 8 bit mode is active,
                                            ; if = 0 the "legacy" 7 bit mode is used (not really 7 bit
                                            ; but only the $ff char is ignored and used as "no char" flag ***
                
                COST0:              ; DEVICE 0 OUTPUT STATUS (Z80-MBC2) 
 00E6 3EFF          mvi     a, 0ffH         ; Always ready to TX
CP/M RMAC ASSEM 1.1	#008	CP/M 3 MODULE FOR CHARACTER I/O HANDLING - Z80-MBC2 (A040618)

 00E8 C9            ret
                
                ;
                ;<<<<<<<<<<<<<<<<<<<< MAIN CONSOLE/DEVICE 0 INPUT ROUTINE (Z80-MBC2) >>>>>>>>>>>>>>>>>>>>
                ;
                
                CI0:                ;DEVICE 0 INPUT
 00E9 3AE400        lda     InChrBuf        ; A = previous char read by CONST, if any
 00EC FEFF          cpi     0ffH            ; Is = $FF ($FF from UART = no char)?
                    jrz     GetChr          ; Yes, jump to read a char
 00EE+28        	DB	28H
 00EF+08        	DB	GETCHR-$-1
 00F0 F5            push    psw             ; No, InChrBuf = $FF (clear buffer)
 00F1 3EFF          mvi     a, 0ffH
 00F3 32E400        sta     InChrBuf
 00F6 F1            pop     psw             ; Return with the previously saved char
 00F7 C9            ret
                    
                GetChr:
 00F8 DB01          in      SERIAL$RX       ; Read a char from UART
 00FA FEFF          cpi     0ffH            ; Is = $FF ($FF from UART = no char)?
 00FC C0            rnz                     ; No, retun with it in A
                                            ; Yes, check if ffH is a valid char
                
                ChkFF:                      ; Check if ffH is a valid char
 00FD 3E83          mvi     a, SYSFLAG$OPC  ; A = SYSFLAG opcode
 00FF D301          out     STO$OPCD        ; Write the opcode
 0101 DB00          in      EXC$RD$OPCD     ; Read SYSFLAG data into A
 0103 E608          ani     08H             ; It was a "serial buffer empty" flag (D3 = 1)?
                    jrnz    GetChr          ; Yes, jump and wait for a char
 0105+20        	DB	20H
 0106+F1        	DB	GETCHR-$-1
 0107 3EFF          mvi     a, 0ffH         ; No, it is a valid ffH char
 0109 C9            ret                     ; Retun with it in A
                    
                ;
                ;<<<<<<<<<<<<<<<<<<<<<< MAIN CONSOLE/DEVICE 0 OUTPUT ROUTINE (Z80-MBC2) >>>>>>>>>>>>>>>>>>>>>>>>>
                ;
                
                CO0:                ; DEVICE 0 OUTPUT
 010A 3E01          mvi     a, SERTX$OPC    ; A = SERIAL TX opcode
 010C D301          out     STO$OPCD        ; Write the opcode
 010E 79            mov     a, c
 010F D300          out     EXC$WR$OPCD     ; Send A to serial Tx
 0111 C9            ret
                
                ; 
                ;<<<<<<<<<<<<<<<<<<< PRINTER/DEVICE 1 STATUS HANDLER ROUTINE (Z80-MBC2) >>>>>>>>>>>>>>>>>>>>>>
                ;
                ; NOTE: If the SPP adapter is not enabled it will perform as an always
                ;       ready null device
                ;
                
                COST1:
 0112 3E8A          mvi     a, GETSPP$OPC   ; Select GETSPP$OPC opcode (IOS)
 0114 D301          out     STO$OPCD
CP/M RMAC ASSEM 1.1	#009	CP/M 3 MODULE FOR CHARACTER I/O HANDLING - Z80-MBC2 (A040618)

 0116 DB00          in      EXC$RD$OPCD     ; Read it
 0118 A7            ana     a               ; Is SPP enabled?
                    jrz     COST1RDY        ; No, jump
 0119+28        	DB	28H
 011A+06        	DB	COST1RDY-$-1
 011B FEC9          cpi     SPPRDY          ; Yes, is SPP printer ready?
                    jrz     COST1RDY        ; Yes, jump
 011D+28        	DB	28H
 011E+02        	DB	COST1RDY-$-1
 011F AF            xra     a               ; No, A = not ready flag
 0120 C9            ret
                
                COST1RDY:
 0121 3EFF          mvi      a, 0ffH        ; A = 0xFF (ready flag)
 0123 C9            ret
                
                ; 
                ;<<<<<<<<<<<<<<<<<<< PRINTER/DEVICE 1 OUTPUT ROUTINE (Z80-MBC2) >>>>>>>>>>>>>>>>>>>>>>
                ;
                ; NOTE: If the SPP adapter is not enabled it will perform as an always
                ;       ready null device
                ;
                
                CO1:
 0124 3E8A          mvi      a, GETSPP$OPC  ; Select GETSPP$OPC opcode (IOS)
 0126 D301          out     STO$OPCD
 0128 DB00          in      EXC$RD$OPCD     ; Read it
 012A A7            ana     a               ; Is SPP enabled?
                    jrz     listRet         ; No, nothing to do so jump
 012B+28        	DB	28H
 012C+0B        	DB	LISTRET-$-1
 012D FEC9          cpi     SPPRDY          ; Yes, is SPP printer ready?
                    jrnz    CO1             ; No, jump and wait
 012F+20        	DB	20H
 0130+F3        	DB	CO1-$-1
 0131 3E12          mvi      a, WRSPP$OPC   ; Yes, select WRSPP$OPC opcode (IOS)...
 0133 D301          out     STO$OPCD
 0135 79            mov      a, c           ; ... and send the current char to the SPP printer
 0136 D300          out     EXC$WR$OPCD
                listRet:
 0138 C9            ret
                
                ;
                ; -------------------------------------------------------------------------
                ;
                
                    ;;;;; NULL ROUTINES:
                NULL$CIST:
                NULL$COST:
 0139 AF            XRA A                   ;RETURN A FALSE STATUS RESULT
                    JR  NULL$RET
 013A+18        	DB	18H
 013B+02        	DB	NULL$RET-$-1
                NULL$CI:
 013C 3E1A          MVI A,1AH               ;FOR INPUT RETURN A CNTL-Z (EOF)
                NULL$INIT:
CP/M RMAC ASSEM 1.1	#010	CP/M 3 MODULE FOR CHARACTER I/O HANDLING - Z80-MBC2 (A040618)

                NULL$CO:
                NULL$RET:
 013E C9            RET                     ;HARMLESS RETURN
                
                
                    ; STORAGE FOR DEVICE CODE -- CAN RESIDE IN SAME SEGMENT AS THE BULK
                    ;  OF CHARACTER I/O ROUTINES:
 013F           DEV$CODE:   DS  1
                
                    ;;;;; CHRTBL
                    ; CHARACTER DEVICE TABLE
                    ; --------------------------
                    CSEG                    ;MUST RESIDE IN COMMON MEMORY
                    ; --------------------------
                    
                @CTBL:
 0140 4352542020    DB  'CRT   '            ; CONSOLE (DEVICE 0)
 0146 03            DB  MB$IN$OUT
 0147 00            DB  BAUD$NONE
                    
 0148 4C50542020    DB  'LPT   '            ; SPP Adapter board/parallel printer (DEVICE 1)
 014E 02            DB  MB$OUTPUT
 014F 00            DB  BAUD$NONE
                
 0002 =         MAX$DEVICES EQU ($-@CTBL)/8 ;# DEVICES IN TABLE
 0150 00            DB  0                   ;TABLE TERMINATOR
                
                
                    ; OTHER DATA AREAS:
 0151               DS  24                  ;CHARACTER I/O LOCAL STACK
 0169 =         IOSP    EQU $
 0169           SPSAVE  DS  2
                
 016B               END