CP/M RMAC ASSEM 1.1	#001	ROOT MODULE OF RELOCATABLE BIOS FOR CP/M 3.0

                ;********************************************************************************************
                ;
                ; BIOSKRNL.ASM - S170319
                ; CP/M 3.0 ROOT BIOS MODULE FOR THE Z80-MBC2 (HW ref. A040618)
                ;
                ; Required IOS S220718-R260119 (or following revisions until otherwise stated)
                ;
                ; NOTE: Use the RMAC.COM relocatable assembler
                ;
                ; (Search the string 'Z80-MBC2' for changes)
                ;
                ; CHANGELOG:
                ;
                ; S170319           First release
                ;
                ;
                ;********************************************************************************************
                	title	'Root module of relocatable BIOS for CP/M 3.0'
                
                	; version 1.0 15 Sept 82
                
 FFFF =         true	equ -1
 0000 =         false	equ not true
                
 FFFF =         banked	equ TRUE				;<------ BANKED Version
                	
                
                ;		  Copyright (C), 1982
                ;		 Digital Research, Inc
                ;		     P.O. Box 579
                ;		Pacific Grove, CA  93950
                
                
                ;   This is the invariant portion of the modular BIOS and is
                ;	distributed as source for informational purposes only.
                ;	All desired modifications should be performed by
                ;	adding or changing externally defined modules.
                ;	This allows producing "standard" I/O modules that
                ;	can be combined to support a particular system 
                ;	configuration.
                
 000D =         cr	equ 13
 000A =         lf	equ 10
 0007 =         bell	equ 7
 0011 =         ctlQ	equ 'Q'-'@'
 0013 =         ctlS	equ 'S'-'@'
                
 0100 =         ccp	equ 0100h	; Console Command Processor gets loaded into the TPA
                
                	cseg		; GENCPM puts CSEG stuff in common memory
                
                
                    ; variables in system data page
                
                	extrn @covec,@civec,@aovec,@aivec,@lovec ; I/O redirection vectors
                	extrn @mxtpa				; addr of system entry point
CP/M RMAC ASSEM 1.1	#002	ROOT MODULE OF RELOCATABLE BIOS FOR CP/M 3.0

                	extrn @bnkbf				; 128 byte scratch buffer
                
                    ; initialization
                
                	extrn ?init			; general initialization and signon
                	extrn ?ldccp,?rlccp		; load & reload CCP for BOOT & WBOOT
                
                    ; user defined character I/O routines
                
                	extrn ?ci,?co,?cist,?cost	; each take device in <B>
                	extrn ?cinit			; (re)initialize device in <C>
                	extrn @ctbl			; physical character device table
                    
                    ; ---------------------------------------------------------------
                    extrn ?cnstFlg      ; CONST mode flag (Z80-MBC2)
                    ; ---------------------------------------------------------------
                
                    ; disk communication data items
                
                	extrn @dtbl			; table of pointers to XDPHs
                	public @adrv,@rdrv,@trk,@sect	; parameters for disk I/O
                	public @dma,@dbnk,@cnt		;    ''       ''   ''  ''
                
                    ; memory control
                
                	public @cbnk			; current bank
                	extrn ?xmove,?move		; select move bank, and block move
                	extrn ?bank			; select CPU bank
                
                    ; clock support
                
                	extrn ?time			; signal time operation
                
                    ; general utility routines
                
                	public ?pmsg,?pdec	; print message, print number from 0 to 65535
                	public ?pderr		; print BIOS disk error message header
                
                	maclib modebaud		; define mode bits
                
                
                    ; External names for BIOS entry points
                
                	public ?boot,?wboot,?const,?conin,?cono,?list,?auxo,?auxi
                	public ?home,?sldsk,?sttrk,?stsec,?stdma,?read,?write
                	public ?lists,?sctrn
                	public ?conos,?auxis,?auxos,?dvtbl,?devin,?drtbl
                	public ?mltio,?flush,?mov,?tim,?bnksl,?stbnk,?xmov
                
                
                    ; BIOS Jump vector.
                
                		; All BIOS routines are invoked by calling these
                		;	entry points.
                
 0000 C30000    ?boot:	jmp boot	; initial entry on cold start
CP/M RMAC ASSEM 1.1	#003	ROOT MODULE OF RELOCATABLE BIOS FOR CP/M 3.0

 0003 C37400    ?wboot:	jmp wboot	; reentry on program exit, warm start
                
 0006 C38501    ?const:	jmp const	; return console input status
 0009 C3A001    ?conin:	jmp conin	; return console input character
 000C C3E800    ?cono:	jmp conout	; send console output character
 000F C3F400    ?list:	jmp list	; send list output character
 0012 C3EE00    ?auxo:	jmp auxout	; send auxilliary output character
 0015 C3A601    ?auxi:	jmp auxin	; return auxilliary input character
                
 0018 C36E00    ?home:	jmp home	; set disks to logical home
 001B C33F00    ?sldsk:	jmp seldsk	; select disk drive, return disk parameter info
 001E C37100    ?sttrk:	jmp settrk	; set disk track
 0021 C37700    ?stsec:	jmp setsec	; set disk sector
 0024 C37D00    ?stdma:	jmp setdma	; set disk I/O memory address
 0027 C39400    ?read:	jmp read	; read physical block(s)
 002A C3AA00    ?write:	jmp write	; write physical block(s)
                
 002D C32001    ?lists:	jmp listst	; return list device status
 0030 C38900    ?sctrn:	jmp sectrn	; translate logical to physical sector
                
 0033 C31401    ?conos:	jmp conost	; return console output status
 0036 C38B01    ?auxis:	jmp auxist	; return aux input status
 0039 C31A01    ?auxos:	jmp auxost	; return aux output status
 003C C3E000    ?dvtbl:	jmp devtbl	; return address of device def table
 003F C30000    ?devin:	jmp ?cinit	; change baud rate of device
                
 0042 C3E400    ?drtbl:	jmp getdrv	; return address of disk drive table
 0045 C3CB00    ?mltio:	jmp multio	; set multiple record count for disk I/O
 0048 C3CF00    ?flush:	jmp flush	; flush BIOS maintained disk caching
                
 004B C30000    ?mov:	jmp ?move	; block move memory to memory
 004E C30000    ?tim:	jmp ?time	; Signal Time and Date operation
 0051 C33302    ?bnksl:	jmp bnksel	; select bank for code execution and default DMA
 0054 C38500    ?stbnk:	jmp setbnk	; select different bank for disk I/O DMA operations.
 0057 C30000    ?xmov:	jmp ?xmove	; set source and destination banks for one operation
                
                ; -----------------------------------------------------------------------------------
 005A C36300    cnstmd: jmp cnstmde ; set 8 bit CONST mode (non standard jmp. Added for the Z80-MBC2)
                ; -----------------------------------------------------------------------------------
                
 005D C30000    	jmp 0		; reserved for future expansion
 0060 C30000    	jmp 0		; reserved for future expansion
                    
                    
                    ; -------------------------------------------------------------
                	; CONST MODE  (Z80-MBC2)
                	;	Set the Console Input Status mode to 8 bit
                    ;       This is a non standard function only for the Z80-MBC2
                    ; -------------------------------------------------------------
                
                cnstmde:
 0063 F5            push psw
 0064 3E01          mvi  a, 01H   ; A = 1
 0066 320000    	sta	 ?cnstFlg ; Set the CONST mode to 8 bit (Z80-MBC2)
 0069 F1            pop  psw
 006A C9            ret
CP/M RMAC ASSEM 1.1	#004	ROOT MODULE OF RELOCATABLE BIOS FOR CP/M 3.0

                
                
                	; BOOT
                	;	Initial entry point for system startup.
                
                	dseg	; this part can be banked
                
                boot:
 0000 31E000    	lxi sp,boot$stack
 0003 0E0F      	mvi c,15	; initialize all 16 character devices
                c$init$loop:
 0005 C5CD0000C1	push b ! call ?cinit ! pop b
 000A 0DF20500  	dcr c ! jp c$init$loop
                
 000E CD0000    	call ?init	; perform any additional system initialization
                			; and print signon message
                
 0011 0100102100	lxi b,16*256+0 ! lxi h,@dtbl	; init all 16 logical disk drives
                d$init$loop:
 0017 C5        	push b		; save remaining count and abs drive
 0018 5E235623  	mov e,m ! inx h ! mov d,m ! inx h	; grab @drv entry
 001C 7BB2CA3600	mov a,e ! ora d ! jz d$init$next	; if null, no drive
 0021 E5        	push h					; save @drv pointer 
 0022 EB        	xchg					; XDPH address in <HL>
 0023 2B2B7E32EE	dcx h ! dcx h ! mov a,m ! sta @RDRV	; get relative drive code
 0029 7932ED00  	mov a,c ! sta @ADRV			; get absolute drive code
 002D 2B        	dcx h					; point to init pointer
 002E 562B5E    	mov d,m ! dcx h ! mov e,m		; get init pointer
 0031 EBCDC401  	xchg ! call ipchl			; call init routine
 0035 E1        	pop h					; recover @drv pointer
                d$init$next:
 0036 C1        	pop b					; recover counter and drive #
 0037 0C05C21700	inr c ! dcr b ! jnz d$init$loop		; and loop for each drive
 003C C36B00    	jmp boot$1
                
                	cseg	; following in resident memory
                
                boot$1:
 006B CD8600    	call set$jumps
 006E CD0000    	call ?ldccp				; fetch CCP for first time
 0071 C30001    	jmp ccp
                
                
                	; WBOOT
                	;	Entry for system restarts.
                
                wboot:
 0074 31E000    	lxi sp,boot$stack
 0077 CD8600    	call set$jumps		; initialize page zero
                    
                    ; ---------------------------------------------------------
                    ; Set the CONST mode to 7 bit (Z80-MBC2)
                    ; ---------------------------------------------------------
 007A F5            push psw
 007B AF            xra  a        ; A = 0
 007C 320000    	sta	 ?cnstFlg ; Set the CONST mode flag to 7 bit (Z80-MBC2)
CP/M RMAC ASSEM 1.1	#005	ROOT MODULE OF RELOCATABLE BIOS FOR CP/M 3.0

 007F F1            pop  psw
                    
 0080 CD0000    	call ?rlccp		; reload CCP
 0083 C30001    	jmp ccp			; then reset jmp vectors and exit to ccp
                
                
                set$jumps:
                
                  if banked
 0086 3E01CD5100	mvi a,1 ! call ?bnksl
                  endif
                
 008B 3EC3      	mvi a,JMP
 008D 3200003205	sta 0 ! sta 5		; set up jumps in page zero
 0093 2103002201	lxi h,?wboot ! shld 1	; BIOS warm start entry
 0099 2A00002206	lhld @MXTPA ! shld 6	; BDOS system call entry
 009F C9        	ret
                
                
 00A0           		ds 64
 00E0 =         boot$stack	equ $
                
                
                	; DEVTBL
                	;	Return address of character device table
                
                devtbl:
 00E0 210000C9  	lxi h,@ctbl ! ret
                
                
                	; GETDRV
                	;	Return address of drive table
                
                getdrv:
 00E4 210000C9  	lxi h,@dtbl ! ret
                
                
                
                	; CONOUT
                	;	Console Output.  Send character in <C>
                	;			to all selected devices
                
                conout:	
                
 00E8 2A0000    	lhld @covec	; fetch console output bit vector
 00EB C3F700    	jmp out$scan
                
                
                	; AUXOUT
                	;	Auxiliary Output. Send character in <C>
                	;			to all selected devices
                
                auxout:
 00EE 2A0000    	lhld @aovec	; fetch aux output bit vector
 00F1 C3F700    	jmp out$scan
                
CP/M RMAC ASSEM 1.1	#006	ROOT MODULE OF RELOCATABLE BIOS FOR CP/M 3.0

                
                	; LIST
                	;	List Output.  Send character in <C>
                	;			to all selected devices.
                
                list:
 00F4 2A0000    	lhld @lovec	; fetch list output bit vector
                
                out$scan:
 00F7 0600      	mvi b,0		; start with device 0
                co$next:
 00F9 29        	dad h		; shift out next bit
 00FA D20D01    	jnc not$out$device
 00FD E5        	push h		; save the vector
 00FE C5        	push b		; save the count and character
                not$out$ready:
 00FF CD3A01B7CA	call coster ! ora a ! jz not$out$ready
 0106 C1C5      	pop b ! push b	; restore and resave the character and device
 0108 CD0000    	call ?co	; if device selected, print it
 010B C1        	pop b		; recover count and character
 010C E1        	pop h		; recover the rest of the vector
                not$out$device:
 010D 04        	inr b		; next device number
 010E 7CB5      	mov a,h ! ora l	; see if any devices left
 0110 C2F900    	jnz co$next	; and go find them...
 0113 C9        	ret
                
                
                	; CONOST
                	;	Console Output Status.  Return true if
                	;		all selected console output devices
                	;		are ready.
                
                conost:
 0114 2A0000    	lhld @covec	; get console output bit vector
 0117 C32301    	jmp ost$scan
                
                
                	; AUXOST
                	;	Auxiliary Output Status.  Return true if
                	;		all selected auxiliary output devices
                	;		are ready.
                
                auxost:
 011A 2A0000    	lhld @aovec	; get aux output bit vector
 011D C32301    	jmp ost$scan
                
                
                	; LISTST
                	;	List Output Status.  Return true if
                	;		all selected list output devices
                	;		are ready.
                
                listst:
 0120 2A0000    	lhld @lovec	; get list output bit vector
                
CP/M RMAC ASSEM 1.1	#007	ROOT MODULE OF RELOCATABLE BIOS FOR CP/M 3.0

                ost$scan:
 0123 0600      	mvi b,0		; start with device 0
                cos$next:
 0125 29        	dad h		; check next bit
 0126 E5        	push h		; save the vector
 0127 C5        	push b		; save the count
 0128 3EFF      	mvi a,0FFh	; assume device ready
 012A DC3A01    	cc coster	; check status for this device
 012D C1        	pop b		; recover count
 012E E1        	pop h		; recover bit vector
 012F B7        	ora a		; see if device ready
 0130 C8        	rz		; if any not ready, return false
 0131 04        	inr b		; drop device number
 0132 7CB5      	mov a,h ! ora l	; see if any more selected devices
 0134 C22501    	jnz cos$next
 0137 F6FF      	ori 0FFh	; all selected were ready, return true
 0139 C9        	ret
                
                coster:		; check for output device ready, including optional
                		;	xon/xoff support
 013A 682600    	mov l,b ! mvi h,0	; make device code 16 bits
 013D E5        	push h			; save it in stack
 013E 292929    	dad h ! dad h ! dad h	; create offset into device characteristics tbl
 0141 11060019  	lxi d,@ctbl+6 ! dad d	; make address of mode byte
 0145 7EE610    	mov a,m ! ani mb$xonxoff
 0148 E1        	pop h			; recover console number in <HL>
 0149 CA0000    	jz ?cost		; not a xon device, go get output status direct
 014C 11390219  	lxi d,xofflist ! dad d	; make pointer to proper xon/xoff flag
 0150 CD6B01    	call cist1		; see if this keyboard has character
 0153 7EC47D01  	mov a,m ! cnz ci1	; get flag or read key if any
 0157 FE11C25E01	cpi ctlq ! jnz not$q	; if its a ctl-Q,
 015C 3EFF      	mvi a,0FFh 		;	set the flag ready
                not$q:
 015E FE13C26501	cpi ctls ! jnz not$s	; if its a ctl-S,
 0163 3E00      	mvi a,00h		;	clear the flag
                not$s:
 0165 77        	mov m,a			; save the flag
 0166 CD7401    	call cost1		; get the actual output status,
 0169 A6        	ana m			; and mask with ctl-Q/ctl-S flag
 016A C9        	ret			; return this as the status
                
                cist1:			; get input status with <BC> and <HL> saved
 016B C5E5      	push b ! push h 
 016D CD0000    	call ?cist
 0170 E1C1      	pop h ! pop b
 0172 B7        	ora a
 0173 C9        	ret
                
                cost1:			; get output status, saving <BC> & <HL>
 0174 C5E5      	push b ! push h
 0176 CD0000    	call ?cost
 0179 E1C1      	pop h ! pop b
 017B B7        	ora a
 017C C9        	ret
                
                ci1:			; get input, saving <BC> & <HL>
CP/M RMAC ASSEM 1.1	#008	ROOT MODULE OF RELOCATABLE BIOS FOR CP/M 3.0

 017D C5E5      	push b ! push h
 017F CD0000    	call ?ci
 0182 E1C1      	pop h ! pop b
 0184 C9        	ret
                
                    
                
                    
                
                	; CONST
                	;	Console Input Status.  Return true if
                	;		any selected console input device
                	;		has an available character.
                
                const:
 0185 2A0000    	lhld @civec	; get console input bit vector
 0188 C38E01    	jmp ist$scan
                
                
                	; AUXIST
                	;	Auxiliary Input Status.  Return true if
                	;		any selected auxiliary input device
                	;		has an available character.
                
                auxist:
 018B 2A0000    	lhld @aivec	; get aux input bit vector
                
                ist$scan:
 018E 0600      	mvi b,0		; start with device 0
                cis$next:
 0190 29        	dad h		; check next bit
 0191 3E00      	mvi a,0		; assume device not ready
 0193 DC6B01    	cc cist1	; check status for this device
 0196 B7C0      	ora a ! rnz	; if any ready, return true
 0198 04        	inr b		; drop device number
 0199 7CB5      	mov a,h ! ora l	; see if any more selected devices
 019B C29001    	jnz cis$next
 019E AF        	xra a		; all selected were not ready, return false
 019F C9        	ret
                
                
                	; CONIN
                	;	Console Input.  Return character from first
                	;		ready console input device.
                
                conin:
 01A0 2A0000    	lhld @civec
 01A3 C3A901    	jmp in$scan
                
                
                	; AUXIN
                	;	Auxiliary Input.  Return character from first
                	;		ready auxiliary input device.
                
                auxin:
 01A6 2A0000    	lhld @aivec
CP/M RMAC ASSEM 1.1	#009	ROOT MODULE OF RELOCATABLE BIOS FOR CP/M 3.0

                
                in$scan:
 01A9 E5        	push h		; save bit vector
 01AA 0600      	mvi b,0
                ci$next:
 01AC 29        	dad h		; shift out next bit
 01AD 3E00      	mvi a,0		; insure zero a  (nonexistant device not ready).
 01AF DC6B01    	cc cist1	; see if the device has a character
 01B2 B7        	ora a
 01B3 C2C001    	jnz ci$rdy	; this device has a character
 01B6 04        	inr b		; else, next device
 01B7 7CB5      	mov a,h ! ora l	; see if any more devices
 01B9 C2AC01    	jnz ci$next	; go look at them
 01BC E1        	pop h		; recover bit vector
 01BD C3A901    	jmp in$scan	; loop til we find a character
                
                ci$rdy:
 01C0 E1        	pop h		; discard extra stack
 01C1 C30000    	jmp ?ci
                
                
                ;	Utility Subroutines
                
                
                ipchl:		; vectored CALL point
 01C4 E9        	pchl
                
                
                ?pmsg:		; print message @<HL> up to a null
                		; saves <BC> & <DE>
 01C5 C5        	push b
 01C6 D5        	push d
                pmsg$loop:
 01C7 7EB7CAD601	mov a,m ! ora a ! jz pmsg$exit
 01CC 4FE5      	mov c,a ! push h
 01CE CD0C00E1  	call ?cono ! pop h
 01D2 23C3C701  	inx h ! jmp pmsg$loop
                pmsg$exit:
 01D6 D1        	pop d
 01D7 C1        	pop b
 01D8 C9        	ret
                
                ?pdec:		; print binary number 0-65535 from <HL>
 01D9 01010211F0	lxi b,table10! lxi d,-10000
                next:
 01DF 3E2F      	mvi a,'0'-1
                pdecl:
 01E1 E53C19D2EC	push h! inr a! dad d! jnc stoploop
 01E7 3333C3E101	inx sp! inx sp! jmp pdecl
                stoploop:
 01EC D5C5      	push d! push b
 01EE 4FCD0C00  	mov c,a! call ?cono
 01F2 C1D1      	pop b! pop d
                nextdigit:
 01F4 E1        	pop h
 01F5 0A5F03    	ldax b! mov e,a! inx b
CP/M RMAC ASSEM 1.1	#010	ROOT MODULE OF RELOCATABLE BIOS FOR CP/M 3.0

 01F8 0A5703    	ldax b! mov d,a! inx b
 01FB 7BB2C2DF01	mov a,e! ora d! jnz next
 0200 C9        	ret
                
                table10:
 0201 18FC9CFFF6	dw	-1000,-100,-10,-1,0
                
                ?pderr:
 020B 21D100CDC5	lxi h,drive$msg ! call ?pmsg			; error header
 0211 3AED00C641	lda @adrv ! adi 'A' ! mov c,a ! call ?cono	; drive code
 021A 21E300CDC5	lxi h,track$msg ! call ?pmsg			; track header
 0220 2AEF00CDD9	lhld @trk ! call ?pdec				; track number
 0226 21E800CDC5	lxi h,sector$msg ! call ?pmsg			; sector header
 022C 2AF100CDD9	lhld @sect ! call ?pdec				; sector number
 0232 C9        	ret
                
                
                	; BNKSEL
                	;	Bank Select.  Select CPU bank for further execution.
                
                bnksel:
 0233 324902    	sta @cbnk 			; remember current bank
 0236 C30000    	jmp ?bank			; and go exit through users
                					; physical bank select routine
                
                
 0239 FFFFFFFFFFxofflist	db	-1,-1,-1,-1,-1,-1,-1,-1		; ctl-s clears to zero
 0241 FFFFFFFFFF		db	-1,-1,-1,-1,-1,-1,-1,-1
                
                
                
                	dseg	; following resides in banked memory
                
                
                
                ;	Disk I/O interface routines
                
                
                	; SELDSK
                	;	Select Disk Drive.  Drive code in <C>.
                	;		Invoke login procedure for drive
                	;		if this is first select.  Return
                	;		address of disk parameter header
                	;		in <HL>
                
                seldsk:
 003F 7932ED00  	mov a,c ! sta @adrv			; save drive select code
 0043 69260029  	mov l,c ! mvi h,0 ! dad h		; create index from drive code
 0047 01000009  	lxi b,@dtbl ! dad b			; get pointer to dispatch table
 004B 7E23666F  	mov a,m ! inx h ! mov h,m ! mov l,a	; point at disk descriptor
 004F B4C8      	ora h ! rz 				; if no entry in table, no disk
 0051 7BE601C26D	mov a,e ! ani 1 ! jnz not$first$select	; examine login bit
 0057 E5EB      	push h ! xchg				; put pointer in stack & <DE>
 0059 21FEFF197E	lxi h,-2 ! dad d ! mov a,m ! sta @RDRV	; get relative drive
 0061 21FAFF19  	lxi h,-6 ! dad d			; find LOGIN addr
 0065 7E23666F  	mov a,m ! inx h ! mov h,m ! mov l,a	; get address of LOGIN routine
CP/M RMAC ASSEM 1.1	#011	ROOT MODULE OF RELOCATABLE BIOS FOR CP/M 3.0

 0069 CDC401    	call ipchl				; call LOGIN
 006C E1        	pop h					; recover DPH pointer
                not$first$select:
 006D C9        	ret
                
                
                	; HOME
                	;	Home selected drive.  Treated as SETTRK(0).
                
                home:
 006E 010000    	lxi b,0		; same as set track zero
                
                
                	; SETTRK
                	;	Set Track. Saves track address from <BC> 
                	;		in @TRK for further operations.
                
                settrk:
 0071 6960      	mov l,c ! mov h,b
 0073 22EF00    	shld @trk
 0076 C9        	ret
                
                
                	; SETSEC
                	;	Set Sector.  Saves sector number from <BC>
                	;		in @sect for further operations.
                
                setsec:
 0077 6960      	mov l,c ! mov h,b
 0079 22F100    	shld @sect
 007C C9        	ret
                
                
                	; SETDMA
                	;	Set Disk Memory Address.  Saves DMA address
                	;		from <BC> in @DMA and sets @DBNK to @CBNK
                	;		so that further disk operations take place
                	;		in current bank.
                
                setdma:
 007D 6960      	mov l,c ! mov h,b
 007F 22F300    	shld @dma
                
 0082 3A4902    	lda @cbnk	; default DMA bank is current bank
                			; fall through to set DMA bank
                
                	; SETBNK
                	;	Set Disk Memory Bank.  Saves bank number
                	;		in @DBNK for future disk data
                	;		transfers.
                
                setbnk:
 0085 32F600    	sta @dbnk
 0088 C9        	ret
                
                
CP/M RMAC ASSEM 1.1	#012	ROOT MODULE OF RELOCATABLE BIOS FOR CP/M 3.0

                	; SECTRN
                	;	Sector Translate.  Indexes skew table in <DE>
                	;		with sector in <BC>.  Returns physical sector
                	;		in <HL>.  If no skew table (<DE>=0) then
                	;		returns physical=logical.
                
                sectrn:
 0089 6960      	mov l,c ! mov h,b
 008B 7AB3C8    	mov a,d ! ora e ! rz
 008E EB096E2600	xchg ! dad b ! mov l,m ! mvi h,0
 0093 C9        	ret
                
                
                	; READ
                	;	Read physical record from currently selected drive.
                	;		Finds address of proper read routine from
                	;		extended disk parameter header (XDPH).
                
                read:
 0094 2AED002600	lhld @adrv ! mvi h,0 ! dad h	; get drive code and double it
 009A 11000019  	lxi d,@dtbl ! dad d		; make address of table entry
 009E 7E23666F  	mov a,m ! inx h ! mov h,m ! mov l,a	; fetch table entry
 00A2 E5        	push h				; save address of table
 00A3 11F8FF19  	lxi d,-8 ! dad d		; point to read routine address
 00A7 C3BD00    	jmp rw$common			; use common code
                
                
                	; WRITE
                	;	Write physical sector from currently selected drive.
                	;		Finds address of proper write routine from
                	;		extended disk parameter header (XDPH).
                
                write:
 00AA 2AED002600	lhld @adrv ! mvi h,0 ! dad h	; get drive code and double it
 00B0 11000019  	lxi d,@dtbl ! dad d		; make address of table entry
 00B4 7E23666F  	mov a,m ! inx h ! mov h,m ! mov l,a	; fetch table entry
 00B8 E5        	push h				; save address of table
 00B9 11F6FF19  	lxi d,-10 ! dad d		; point to write routine address
                
                rw$common:
 00BD 7E23666F  	mov a,m ! inx h ! mov h,m ! mov l,a	; get address of routine
 00C1 D1        	pop d				; recover address of table
 00C2 1B1B      	dcx d ! dcx d			; point to relative drive
 00C4 1A32EE00  	ldax d ! sta @rdrv		; get relative drive code and post it
 00C8 1313      	inx d ! inx d			; point to DPH again
 00CA E9        	pchl				; leap to driver
                
                
                	; MULTIO
                	;	Set multiple sector count. Saves passed count in
                	;		@CNT
                
                multio:
 00CB 32F500C9  	sta @cnt ! ret
                
                
CP/M RMAC ASSEM 1.1	#013	ROOT MODULE OF RELOCATABLE BIOS FOR CP/M 3.0

                	; FLUSH
                	;	BIOS deblocking buffer flush.  Not implemented.
                
                flush:
 00CF AFC9      	xra a ! ret		; return with no error
                
                
                
                	; error message components
 00D1 0D0A074249drive$msg	db	cr,lf,bell,'BIOS Error on ',0
 00E3 3A20542D00track$msg	db	': T-',0
 00E8 2C20532D00sector$msg	db	', S-',0
                
                
                    ; disk communication data items
                
 00ED           @adrv	ds	1		; currently selected disk drive
 00EE           @rdrv	ds	1		; controller relative disk drive
 00EF           @trk	ds	2		; current track number
 00F1           @sect	ds	2		; current sector number
 00F3           @dma	ds	2		; current DMA address
 00F5 00        @cnt	db	0		; record count for multisector transfer
 00F6 00        @dbnk	db	0		; bank for DMA operations
                
                
                	cseg	; common memory
                
 0249 00        @cbnk	db	0		; bank for processor operations
                
                
 024A           	end
