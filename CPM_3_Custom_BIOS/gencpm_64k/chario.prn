CP/M RMAC ASSEM 1.1	#001	CP/M 3 MODULE FOR CHARACTER I/O HANDLING - Z80-MBC2 (A040618)

                ;********************************************************************************************
                ;
                ; CHARIO.ASM - S210918
                ; CP/M 3.0 CHARACTER I/O BIOS MODULE FOR THE Z80-MBC2 (HW ref. A040618)
                ;
                ; Required IOS S220718-R190918 (or newer revisions until otherwise stated)
                ;
                ; NOTE: Use the RMAC.COM relocatable assembler
                ;
                ;
                ;********************************************************************************************
                
                TITLE	'CP/M 3 MODULE FOR CHARACTER I/O HANDLING - Z80-MBC2 (A040618)'
                
                	; DEFINE LOGICAL VALUES:
 FFFF =         TRUE		EQU	-1
 0000 =         FALSE		EQU	NOT TRUE
                
                	; DETERMINE IF FOR BANK SELECT OR NOT:
 0000 =         BANKED		EQU	FALSE	    ; <------ BANKED/NON-BANKED SWITCH
                
                ; -------------------------------------------------------------------
                ;
                ;          >>>>>>>>>>>>>> READ CAREFULLY <<<<<<<<<<<<<<
                ;
                ; To prevent the CHARIO.ASM bank swiching IOS requests from
                ; interfering with user program IOS request if using
                ; "slow" interpreters as e.g. MBASIC.COM, I've decided to avoid
                ; bank switching here. This is a simple solution to avoid more
                ; complex one. For this reason the "BANKED" switch is intentionally
                ; set at "FALSE" (although the system is banked)
                ;
                ; -------------------------------------------------------------------
                
                
                	; DEFINE PUBLIC LABELS:
                	PUBLIC	?CINIT,?CI,?CO,?CIST,?COST
                	PUBLIC	@CTBL
                
                	; DEFINE EXTERNAL LABELS AND ENTRY POINTS:
                	IF	BANKED
                	EXTRN	@CBNK
                	EXTRN	?BNKSL
                	ENDIF
                	EXTRN	OUT$BLOCKS	;BLOCK OUTPUT ROUTINE TO I/O PORTS
                	EXTRN	?PMSG
                
                	; INCLUDE Z-80 MACROS:
                    
                	MACLIB	Z80
                
                	; EQUATES FOR MODE BYTE BIT FIELDS
                
 0001 =         MB$INPUT	EQU 0000$0001B	; DEVICE MAY DO INPUT
 0002 =         MB$OUTPUT	EQU 0000$0010B	; DEVICE MAY DO OUTPUT
 0003 =         MB$IN$OUT	EQU MB$INPUT+MB$OUTPUT
CP/M RMAC ASSEM 1.1	#002	CP/M 3 MODULE FOR CHARACTER I/O HANDLING - Z80-MBC2 (A040618)

                
 0004 =         MB$SOFT$BAUD	EQU 0000$0100B	; SOFTWARE SELECTABLE BAUD RATES
                
 0008 =         MB$SERIAL	EQU 0000$1000B	; DEVICE MAY USE PROTOCOL
 0010 =         MB$XON$XOFF	EQU 0001$0000B	; XON/XOFF PROTOCOL ENABLED
                
 0000 =         BAUD$NONE	EQU 0		; NO BAUD RATE ASSOCIATED WITH THIS DEVICE
 0001 =         BAUD$50		EQU 1		; 50 BAUD
 0002 =         BAUD$75		EQU 2		; 75 BAUD
 0003 =         BAUD$110	EQU 3		; 110 BAUD
 0004 =         BAUD$134	EQU 4		; 134.5 BAUD
 0005 =         BAUD$150	EQU 5		; 150 BAUD
 0006 =         BAUD$300	EQU 6		; 300 BAUD
 0007 =         BAUD$600	EQU 7		; 600 BAUD
 0008 =         BAUD$1200	EQU 8		; 1200 BAUD
 0009 =         BAUD$1800	EQU 9		; 1800 BAUD
 000A =         BAUD$2400	EQU 10		; 2400 BAUD
 000B =         BAUD$3600	EQU 11		; 3600 BAUD
 000C =         BAUD$4800	EQU 12		; 4800 BAUD
 000D =         BAUD$7200	EQU 13		; 7200 BAUD
 000E =         BAUD$9600	EQU 14		; 9600 BAUD
 000F =         BAUD$19200	EQU 15		; 19.2K BAUD
                
                ; --------------------------------------------------------------------------------
                ;
                ; Z80-MBC2 IOS equates
                ;
                ; --------------------------------------------------------------------------------
                
 0000 =         EXC$WR$OPCD  EQU    000H      ; Address of the EXECUTE WRITE OPCODE write port
 0000 =         EXC$RD$OPCD  EQU    000H      ; Address of the EXECUTE READ OPCODE read port
 0001 =         STO$OPCD     EQU    001H      ; Address of the STORE OPCODE write port
 0001 =         SERIAL$RX    EQU    001H      ; Address of the SERIAL RX read port
 0001 =         SERTX$OPC    EQU    001H      ; SERIAL TX opcode
 0009 =         SELDISK$OPC  EQU    009H      ; SELDISK opcode
 000A =         SELTRCK$OPC  EQU    00AH      ; SELTRACK opcode
 000B =         SELSECT$OPC  EQU    00BH      ; SELSECT opcode
 000C =         WRTSECT$OPC  EQU    00CH      ; WRITESECT opcode
 0083 =         SYSFLAG$OPC  EQU    083H      ; SYSFLAG opcode
 0084 =         DATETIM$OPC  EQU    084H      ; DATETIME opcode
 0085 =         ERRDSK$OPC   EQU    085H      ; ERRDISK opcode
 0086 =         RDSECT$OPC   EQU    086H      ; READSECT opcode
 0087 =         SDMOUNT$OPC  EQU    087H      ; SDMOUNT opcode
                
                
                	; WILL START OFF IN COMMON MEMORY FOR BANKED OR NON-BANKED SYSTEMS:
                    ; --------------------------
                	CSEG
                    ; --------------------------
                
                
                  IF	BANKED
                	; WE PROVIDE ALTERNATE DEFINITIONS OF THE ROUTINE ENTRY POINTS IF
                	;  WE ARE RUNNING A BANKED SYSTEM VERSUS A NON-BANKED SYSTEM:
                
                	;;;;; ?CINIT
CP/M RMAC ASSEM 1.1	#003	CP/M 3 MODULE FOR CHARACTER I/O HANDLING - Z80-MBC2 (A040618)

                	; ENTER HERE FOR BANKED SYSTEMS FOR DEVICE INITIALIZATIONS:
                ?CINIT:
                	LXI	H,BCINIT	;POINT TO BANKED ROUTINE ADDRESS
                	JR	BANKIO		;GO TO DISPATCHER
                
                	;;;;; ?CI
                	; ENTER HERE FOR BANKED SYSTEM DEVICE INPUT:
                ?CI:	LXI	H,BCI	;POINT TO BANKED ROUTINE ADDRESS
                	JR	BANKIO		;GO TO DISPATCHER
                
                	;;;;; ?CO
                	; ENTER HERE FOR BANKED SYSTEM DEVICE OUTPUT:
                ?CO:	LXI	H,BCO	;POINT TO BANKED ROUTINE ADDRESS
                	JR	BANKIO		;GO TO DISPATCHER
                
                	;;;;; ?CIST
                	; ENTER HERE FOR BANKED SYSTEM DEVICE INPUT STATUS:
                ?CIST:	LXI	H,BCIST	;POINT TO BANKED ROUTINE ADDRESS
                	JR	BANKIO		;GO TO DISPATCHER
                
                	;;;;; ?COST
                	; ENTER HERE FOR BANKED SYSTEM DEVICE OUTPUT STATUS:
                ?COST:	LXI	H,BCOST	;POINT TO BANKED ROUTINE ADDRESS
                
                
                	;;;;; BANKIO
                	; ROUTINE DISPATCHES TO BANKED PORTION OF CHARACTER I/O ROUTINES:
                BANKIO:
                	SSPD	SPSAVE	;SAVE CURRENT STACK POINTER
                	LXI	SP,IOSP		; AND USE LOCAL STACK FOR I/O
                	LDA	@CBNK		;GET CURRENT BANK
                	PUSH	PSW		;SAVE ON LOCAL STACK
                	XRA	A		    ;WE WILL SELECT BANK 0 (OP SYS)
                	CALL	?BNKSL
                	LXI	D,BIORET	;RETURN ADDRESS IN [DE]
                	PUSH	D		;PUT IT ON STACK FOR RETURN
                	PCHL			;DISPATCH TO BANKED PART OF ROUTINE
                
                	; ARRIVE HERE AFTER DEVICE HANDLER FINISHED:
                BIORET:
                	POP	D		    ;GET PREVIOUS CURRENT BANK TO [D]
                	PUSH	PSW		;SAVE HANDLER RETURNED RESULT (IF ANY)
                	MOV	A,D		    ;RESELECT PREVIOUS CURRENT BANK
                	CALL	?BNKSL
                	POP	PSW		    ;GET BACK RESULT CODE TO [A]
                	LSPD	SPSAVE	;RESTORE PREVIOUS STACK
                	RET			    ;AND RETURN...
                  ENDIF
                
                
                	;;;;;
                	;;;;; ACTUAL DEVICE HANDLERS
                	;;;;;
                
                
                	;;;;; ?CINIT (BCINIT FOR BANKED)
CP/M RMAC ASSEM 1.1	#004	CP/M 3 MODULE FOR CHARACTER I/O HANDLING - Z80-MBC2 (A040618)

                	; PHYSICAL CODE FOR DEVICE INITIALIZATION:
                  IF	BANKED
                    ; --------------------------
                	DSEG			;CAN PUT IN BANKED SEGMENT IF BANKED
                    ; --------------------------
                BCINIT:
                  ELSE
                ?CINIT:
                  ENDIF
 0000 41        	MOV	B,C		    ;ON ENTRY DEVICE # IS IN [C] BUT WE NEED
                                    ; IT IN [B]
 0001 CDB000    	CALL	DEV$DISPATCH	;GO TO CORRECT INIT ROUTINE
 0004 BF00      	DW	CINIT0		;INIT FOR DEVICE 0
 0006 FF00      	DW	NULL$INIT	;INIT FOR DEVICE 1
 0008 FF00      	DW	NULL$INIT	;INIT FOR DEVICE 2
 000A FF00      	DW	NULL$INIT	;INIT FOR DEVICE 3
 000C FF00      	DW	NULL$INIT	;INIT FOR DEVICE 4
 000E FF00      	DW	NULL$INIT	;INIT FOR DEVICE 5
 0010 FF00      	DW	NULL$INIT	;INIT FOR DEVICE 6
 0012 FF00      	DW	NULL$INIT	;INIT FOR DEVICE 7
 0014 FF00      	DW	NULL$INIT	;INIT FOR DEVICE 8
 0016 FF00      	DW	NULL$INIT	;INIT FOR DEVICE 9
 0018 FF00      	DW	NULL$INIT	;INIT FOR DEVICE 10
 001A FF00      	DW	NULL$INIT	;INIT FOR DEVICE 11
 001C FF00      	DW	NULL$INIT	;INIT FOR DEVICE 12
 001E FF00      	DW	NULL$INIT	;INIT FOR DEVICE 13
 0020 FF00      	DW	NULL$INIT	;INIT FOR DEVICE 14
 0022 FF00      	DW	NULL$INIT	;INIT FOR DEVICE 15
                
                
                	;;;;; ?CI (BCI FOR BANKED)
                	; PHYSICAL CODE FOR DEVICE INPUT:
                  IF	BANKED
                BCI:
                  ELSE
                ?CI:
                  ENDIF
 0024 CDB000    	CALL	DEV$DISPATCH
 0027 D900      	DW	CI0		;DEVICE 0 INPUT
 0029 FD00      	DW	NULL$CI		;DEVICE 1 INPUT
 002B FD00      	DW	NULL$CI		;DEVICE 2 INPUT
 002D FD00      	DW	NULL$CI		;DEVICE 3 INPUT
 002F FD00      	DW	NULL$CI		;DEVICE 4 INPUT
 0031 FD00      	DW	NULL$CI		;DEVICE 5 INPUT
 0033 FD00      	DW	NULL$CI		;DEVICE 6 INPUT
 0035 FD00      	DW	NULL$CI		;DEVICE 7 INPUT
 0037 FD00      	DW	NULL$CI		;DEVICE 8 INPUT
 0039 FD00      	DW	NULL$CI		;DEVICE 9 INPUT
 003B FD00      	DW	NULL$CI		;DEVICE 10 INPUT
 003D FD00      	DW	NULL$CI		;DEVICE 11 INPUT
 003F FD00      	DW	NULL$CI		;DEVICE 12 INPUT
 0041 FD00      	DW	NULL$CI		;DEVICE 13 INPUT
 0043 FD00      	DW	NULL$CI		;DEVICE 14 INPUT
 0045 FD00      	DW	NULL$CI		;DEVICE 15 INPUT
                
                
CP/M RMAC ASSEM 1.1	#005	CP/M 3 MODULE FOR CHARACTER I/O HANDLING - Z80-MBC2 (A040618)

                	;;;;; ?CO (BCO FOR BANKED)
                	; PHYSICAL CODE FOR DEVICE OUTPUT:
                  IF	BANKED
                BCO:
                  ELSE
                ?CO:
                  ENDIF
 0047 CDB000    	CALL	DEV$DISPATCH	;GO TO CORRECT DEVICE OUTPUT HANDLER
 004A F200      	DW	CO0		;DEVICE 0 OUTPUT
 004C FF00      	DW	NULL$CO		;DEVICE 1 OUTPUT
 004E FF00      	DW	NULL$CO		;DEVICE 2 OUTPUT
 0050 FF00      	DW	NULL$CO		;DEVICE 3 OUTPUT
 0052 FF00      	DW	NULL$CO		;DEVICE 4 OUTPUT
 0054 FF00      	DW	NULL$CO		;DEVICE 5 OUTPUT
 0056 FF00      	DW	NULL$CO		;DEVICE 6 OUTPUT
 0058 FF00      	DW	NULL$CO		;DEVICE 7 OUTPUT
 005A FF00      	DW	NULL$CO		;DEVICE 8 OUTPUT
 005C FF00      	DW	NULL$CO		;DEVICE 9 OUTPUT
 005E FF00      	DW	NULL$CO		;DEVICE 10 OUTPUT
 0060 FF00      	DW	NULL$CO		;DEVICE 11 OUTPUT
 0062 FF00      	DW	NULL$CO		;DEVICE 12 OUTPUT
 0064 FF00      	DW	NULL$CO		;DEVICE 13 OUTPUT
 0066 FF00      	DW	NULL$CO		;DEVICE 14 OUTPUT
 0068 FF00      	DW	NULL$CO		;DEVICE 15 OUTPUT
                
                
                	;;;;; ?CIST (BCIST FOR BANKED)
                	; PHYSICAL CODE FOR DEVICE INPUT STATUS:
                  IF	BANKED
                BCIST:
                  ELSE
                ?CIST:
                  ENDIF
 006A CDB000    	CALL	DEV$DISPATCH
 006D C000      	DW	CIST0		;DEVICE 0 INPUT STATUS
 006F FA00      	DW	NULL$CIST	;DEVICE 1 INPUT STATUS
 0071 FA00      	DW	NULL$CIST	;DEVICE 2 INPUT STATUS
 0073 FA00      	DW	NULL$CIST	;DEVICE 3 INPUT STATUS
 0075 FA00      	DW	NULL$CIST	;DEVICE 4 INPUT STATUS
 0077 FA00      	DW	NULL$CIST	;DEVICE 5 INPUT STATUS
 0079 FA00      	DW	NULL$CIST	;DEVICE 6 INPUT STATUS
 007B FA00      	DW	NULL$CIST	;DEVICE 7 INPUT STATUS
 007D FA00      	DW	NULL$CIST	;DEVICE 8 INPUT STATUS
 007F FA00      	DW	NULL$CIST	;DEVICE 9 INPUT STATUS
 0081 FA00      	DW	NULL$CIST	;DEVICE 10 INPUT STATUS
 0083 FA00      	DW	NULL$CIST	;DEVICE 11 INPUT STATUS
 0085 FA00      	DW	NULL$CIST	;DEVICE 12 INPUT STATUS
 0087 FA00      	DW	NULL$CIST	;DEVICE 13 INPUT STATUS
 0089 FA00      	DW	NULL$CIST	;DEVICE 14 INPUT STATUS
 008B FA00      	DW	NULL$CIST	;DEVICE 15 INPUT STATUS
                
                
                	;;;;; ?COST (BCOST FOR BANKED)
                	; PHYSICAL CODE FOR DEVICE OUTPUT STATUS:
                  IF	BANKED
                BCOST:
CP/M RMAC ASSEM 1.1	#006	CP/M 3 MODULE FOR CHARACTER I/O HANDLING - Z80-MBC2 (A040618)

                  ELSE
                ?COST:
                  ENDIF
 008D CDB000    	CALL	DEV$DISPATCH	;GO TO CONSOLE OUTPUT STATUS HANDLER
 0090 D600      	DW	COST0		;DEVICE 0 OUTPUT STATUS
 0092 FA00      	DW	NULL$COST	;DEVICE 1 OUTPUT STATUS
 0094 FA00      	DW	NULL$COST	;DEVICE 2 OUTPUT STATUS
 0096 FA00      	DW	NULL$COST	;DEVICE 3 OUTPUT STATUS
 0098 FA00      	DW	NULL$COST	;DEVICE 4 OUTPUT STATUS
 009A FA00      	DW	NULL$COST	;DEVICE 5 OUTPUT STATUS
 009C FA00      	DW	NULL$COST	;DEVICE 6 OUTPUT STATUS
 009E FA00      	DW	NULL$COST	;DEVICE 7 OUTPUT STATUS
 00A0 FA00      	DW	NULL$COST	;DEVICE 8 OUTPUT STATUS
 00A2 FA00      	DW	NULL$COST	;DEVICE 9 OUTPUT STATUS
 00A4 FA00      	DW	NULL$COST	;DEVICE 10 OUTPUT STATUS
 00A6 FA00      	DW	NULL$COST	;DEVICE 11 OUTPUT STATUS
 00A8 FA00      	DW	NULL$COST	;DEVICE 12 OUTPUT STATUS
 00AA FA00      	DW	NULL$COST	;DEVICE 13 OUTPUT STATUS
 00AC FA00      	DW	NULL$COST	;DEVICE 14 OUTPUT STATUS
 00AE FA00      	DW	NULL$COST	;DEVICE 15 OUTPUT STATUS
                
                
                	;;;;; DEV$DISPATCH
                	; ROUTINE JUMPS TO CORRECT DEVICE HANDLER:
                DEV$DISPATCH:
 00B0 78        	MOV	A,B		    ;GET DEVICE # TO [A]
 00B1 320001    	STA	DEV$CODE	;SAVE FOR LATER USE
 00B4 87        	ADD	A		    ;X2 FOR WORD OFFSET
 00B5 E1        	POP	H		    ;RETURN ADDRESS IS 1ST PARAMETER ADDRESS
 00B6 5F        	MOV	E,A		    ;SET UP OFFSET IN [DE]
 00B7 1600      	MVI	D,0
 00B9 19        	DAD	D		    ;[HL] = PTR TO HANDLER ADDRESS
 00BA 5E        	MOV	E,M		    ;GET HANDLER ADDRESS TO [DE]
 00BB 23        	INX	H
 00BC 56        	MOV	D,M
 00BD EB        	XCHG			;PUT IN [HL]
 00BE E9        	PCHL			;AND DISPATCH TO IT...
                
                
                	;;;;;
                	;;;;; PHYSICAL DEVICE HANDLER CODE:
                	;;;;;
                    
                ; ----------------------------------------------------------
                ;
                ; Z80-MBC2 I/O
                ;
                ; ----------------------------------------------------------
                
                
                CINIT0:	; DEVICE 0 INITIALIZATION 
 00BF C9        	RET                     ; Nothing to do
                
                ; 
                ;<<<<<<<<<<<<<<<<<<< MAIN CONSOLE STATUS ROUTINE >>>>>>>>>>>>>>>>>>>>>>
                ;
CP/M RMAC ASSEM 1.1	#007	CP/M 3 MODULE FOR CHARACTER I/O HANDLING - Z80-MBC2 (A040618)

                
                CIST0:				; DEVICE 0 INPUT STATUS
 00C0 3AD500        lda     InChrBuf        ; A = previous char read by CONST, if any
 00C3 FEFF          cpi     0ffH            ; Is = $FF ($FF from UART = no char)?
                    jrnz    InChr           ; No, jump (char already read)
 00C5+20        	DB	20H
 00C6+09        	DB	INCHR-$-1
 00C7 DB01          in      SERIAL$RX       ; Yes, Read a char from "virtual" UART
 00C9 32D500        sta     InChrBuf        ; Store it
 00CC FEFF          cpi     0ffH            ; Is = $FF ($FF from UART = no char)?
                    jrz     NoInChr         ; Yes, jump
 00CE+28        	DB	28H
 00CF+03        	DB	NOINCHR-$-1
                InChr
 00D0 3EFF          mvi     a, 0ffH         ; No, return CP/M char ready flag ($FF)
 00D2 C9            ret
                
                NoInChr
 00D3 AF            xra     a               ; A = 0
 00D4 C9            ret                     ; Return CP/M no char flag ($00)
                
                InChrBuf                    ; Last read char by CONST ($FF = no char)
 00D5 FF            db      0ffH            ; Initialized as $FF
                
                
                    
                    
                COST0:	            ; DEVICE 0 OUTPUT STATUS
 00D6 3EFF          mvi     a, 0ffH         ; Always ready to TX
 00D8 C9            ret
                
                ;
                ;<<<<<<<<<<<<<<<<<<<< MAIN CONSOLE INPUT ROUTINE >>>>>>>>>>>>>>>>>>>>
                ;
                
                CI0:				;DEVICE 0 INPUT
 00D9 3AD500        lda     InChrBuf        ; A = previous char read by CONST, if any
                ChkInChr
 00DC FEFF          cpi     0ffH            ; Is = $FF ($FF from UART = no char)?
                    jrz     GetChr          ; Yes, jump to read a char
 00DE+28        	DB	28H
 00DF+09        	DB	GETCHR-$-1
 00E0 F5            push    psw               ; No, InChrBuf = $FF (clear buffer)
 00E1 3EFF          mvi     a, 0ffH
 00E3 32D500        sta     InChrBuf
 00E6 F1            pop     psw
                    jr      SetChrPar
 00E7+18        	DB	18H
 00E8+06        	DB	SETCHRPAR-$-1
                GetChr
 00E9 DB01          in      SERIAL$RX       ; Read a char from UART
 00EB FEFF          cpi     0ffH            ; Is = $FF ($FF from UART = no char)?
                    jrz     GetChr          ; Yes jump until a valid char is received
 00ED+28        	DB	28H
 00EE+FA        	DB	GETCHR-$-1
                SetChrPar                   ; Set parity bit to 0
CP/M RMAC ASSEM 1.1	#008	CP/M 3 MODULE FOR CHARACTER I/O HANDLING - Z80-MBC2 (A040618)

 00EF E67F          ani     7fH
 00F1 C9            ret
                    
                ;
                ;<<<<<<<<<<<<<<<<<<<<<< MAIN CONSOLE OUTPUT ROUTINE >>>>>>>>>>>>>>>>>>>>>>>>>
                ;
                
                CO0:				; DEVICE 0 OUTPUT
 00F2 3E01          mvi     a, SERTX$OPC    ; A = SERIAL TX opcode
 00F4 D301          out     STO$OPCD        ; Write the opcode
 00F6 79            mov     a, c
 00F7 D300          out     EXC$WR$OPCD     ; Send A to serial Tx
 00F9 C9            ret
                
                ;
                ; -------------------------------------------------------------------------
                ;
                
                	;;;;; NULL ROUTINES:
                NULL$CIST:
                NULL$COST:
 00FA AF        	XRA	A		            ;RETURN A FALSE STATUS RESULT
                	JR	NULL$RET
 00FB+18        	DB	18H
 00FC+02        	DB	NULL$RET-$-1
                NULL$CI:
 00FD 3E1A      	MVI	A,1AH		        ;FOR INPUT RETURN A CNTL-Z (EOF)
                NULL$INIT:
                NULL$CO:
                NULL$RET:
 00FF C9        	RET			            ;HARMLESS RETURN
                
                
                	; STORAGE FOR DEVICE CODE -- CAN RESIDE IN SAME SEGMENT AS THE BULK
                	;  OF CHARACTER I/O ROUTINES:
 0100           DEV$CODE:	DS	1
                
                	;;;;; CHRTBL
                	; CHARACTER DEVICE TABLE
                    ; --------------------------
                	CSEG			        ;MUST RESIDE IN COMMON MEMORY
                    ; --------------------------
                    
                @CTBL:
 0101 4352542020	DB	'CRT   '		    ;CONSOLE (DEVICE 0)
 0107 03        	DB	MB$IN$OUT
 0108 00        	DB	BAUD$NONE
                
 0001 =         MAX$DEVICES	EQU	($-@CTBL)/8	;# DEVICES IN TABLE
 0109 00        	DB	0			        ;TABLE TERMINATOR
                
                
                	; OTHER DATA AREAS:
 010A           	DS	24		            ;CHARACTER I/O LOCAL STACK
 0122 =         IOSP	EQU	$
 0122           SPSAVE	DS	2
CP/M RMAC ASSEM 1.1	#009	CP/M 3 MODULE FOR CHARACTER I/O HANDLING - Z80-MBC2 (A040618)

                
 0124           	ENDopcode
