CP/M RMAC ASSEM 1.1	#001	BANK & MOVE MODULE FOR CP/M3 LINKED BIOS

                ;********************************************************************************************
                ;
                ; MOVE.ASM - S290918
                ; CP/M 3.0 BANK & MOVE BIOS MODULE FOR THE Z80-MBC2 (HW ref. A040618)
                ;
                ; Required IOS S220718-R190918 (or newer revisions until otherwise stated)
                ;
                ; NOTE: Use the RMAC.COM relocatable assembler
                ;
                ;
                ;********************************************************************************************
                
                	title 'bank & move module for CP/M3 linked BIOS'
                    
                	; DEFINE LOGICAL VALUES
 FFFF =         TRUE		EQU	-1
 0000 =         FALSE		EQU	NOT TRUE
                
                	; DETERMINE IF FOR BANK SELECT OR NOT
 0000 =         BANKED		EQU	FALSE	        ; <------ BANKED/NON-BANKED SWITCH
                
                	; LOCATE CODE IN THE COMMON SEGMENT:
                    ; --------------------------
                	CSEG
                    ; --------------------------
                
                	; DEFINE PUBLIC LABELS
                	public ?move,?xmove,?bank
                    
                    ; EXTERNALLY DEFINED ENTRY POINTS AND LABELS
                	extrn @cbnk
                
                	; INCLUDE Z-80 MACROS
                	maclib z80
                	;maclib ports
                    
                ; --------------------------------------------------------------------------------
                ;
                ; Z80-MBC2 IOS equates
                ;
                ; --------------------------------------------------------------------------------
                
 0000 =         EXC$WR$OPCD  EQU    000H      ; Address of the EXECUTE WRITE OPCODE write port
 0000 =         EXC$RD$OPCD  EQU    000H      ; Address of the EXECUTE READ OPCODE read port
 0001 =         STO$OPCD     EQU    001H      ; Address of the STORE OPCODE write port
 0001 =         SERIAL$RX    EQU    001H      ; Address of the SERIAL RX read port
 0001 =         SERTX$OPC    EQU    001H      ; SERIAL TX opcode
 0009 =         SELDISK$OPC  EQU    009H      ; SELDISK opcode
 000A =         SELTRCK$OPC  EQU    00AH      ; SELTRACK opcode
 000B =         SELSECT$OPC  EQU    00BH      ; SELSECT opcode
 000C =         WRTSECT$OPC  EQU    00CH      ; WRITESECT opcode
 000D =         SETBANK$OPC  EQU    00DH      ; SETBANK opcode
 0083 =         SYSFLAG$OPC  EQU    083H      ; SYSFLAG opcode
 0084 =         DATETIM$OPC  EQU    084H      ; DATETIME opcode
 0085 =         ERRDSK$OPC   EQU    085H      ; ERRDISK opcode
 0086 =         RDSECT$OPC   EQU    086H      ; READSECT opcode
CP/M RMAC ASSEM 1.1	#002	BANK & MOVE MODULE FOR CP/M3 LINKED BIOS

 0087 =         SDMOUNT$OPC  EQU    087H      ; SDMOUNT opcode
                
                
                	; ROUTINE SETS UP AN INTER-BANK MOVE OF 128 BYTES ON THE NEXT CALL
                	;  TO ?MOVE
                ?xmove:		            ; Interbank moves not implemented
 0000 C9        	ret
                
                    
                	; ROUTINE PERFORMS INTRA-BANK MOVES IF ?XMOVE WAS NOT CALLED PRIOR TO
                	;  THIS CALL TO ?MOVE ELSE A 128 BYTE TRANSFER IS CONDUCTED BETWEEN
                	;  DIFFERENT BANKS
                ?move:
 0001 EB        	xchg		        ; we are passed source in DE and dest in HL
                	ldir		        ; use Z80 block move instruction
 0002+EDB0      	DB	0EDH,0B0H
 0004 EB        	xchg		        ; need next addresses in same regs
 0005 C9        	ret
                
                    
                	; ROUTINE SWITCHES IN PHYSICAL BANK.
                    ; ?BANK is called with the bank address in register A. This bank address has already been 
                    ; stored in @CBNK for future reference. All registers except A must be maintained upon return.
                ?bank:
                	IF	BANKED
                    push    psw                 ; Save requested bank
                    mvi     a, SETBANK$OPC      ; Select the SETBANK opcode
                    out     STO$OPCD
                    pop     psw                 ; A = bank number [0..2]
                    out     EXC$WR$OPCD         ; Select it
                	ENDIF
 0006 C9        	ret
                
 0007           	end