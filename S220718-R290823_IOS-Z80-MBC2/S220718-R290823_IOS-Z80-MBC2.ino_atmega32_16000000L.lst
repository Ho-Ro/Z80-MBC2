
/tmp/arduino/sketches/0072D6285CBC8240E5A7E22D31F1135F/S220718-R290823_IOS-Z80-MBC2.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 39 04 	jmp	0x872	; 0x872 <__dtors_end>
       4:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__bad_interrupt>
       8:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__bad_interrupt>
       c:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__bad_interrupt>
      10:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__bad_interrupt>
      14:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__bad_interrupt>
      18:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__bad_interrupt>
      1c:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__bad_interrupt>
      20:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__bad_interrupt>
      24:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__bad_interrupt>
      28:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__bad_interrupt>
      2c:	0c 94 c5 25 	jmp	0x4b8a	; 0x4b8a <__vector_11>
      30:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__bad_interrupt>
      34:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__vector_13>
      38:	0c 94 fb 22 	jmp	0x45f6	; 0x45f6 <__vector_14>
      3c:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__bad_interrupt>
      40:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__bad_interrupt>
      44:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__bad_interrupt>
      48:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__bad_interrupt>
      4c:	0c 94 74 20 	jmp	0x40e8	; 0x40e8 <__vector_19>
      50:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__bad_interrupt>

00000054 <__trampolines_end>:
__trampolines_start():
      54:	49 4f       	sbci	r20, 0xF9	; 249
      56:	53 3a       	cpi	r21, 0xA3	; 163
      58:	20 43       	sbci	r18, 0x30	; 48
      5a:	68 65       	ori	r22, 0x58	; 88
      5c:	63 6b       	ori	r22, 0xB3	; 179
      5e:	20 53       	subi	r18, 0x30	; 48
      60:	44 20       	and	r4, r4
      62:	61 6e       	ori	r22, 0xE1	; 225
      64:	64 20       	and	r6, r4
      66:	70 72       	andi	r23, 0x20	; 32
      68:	65 73       	andi	r22, 0x35	; 53
      6a:	73 20       	and	r7, r3
      6c:	61 20       	and	r6, r1
      6e:	6b 65       	ori	r22, 0x5B	; 91
      70:	79 20       	and	r7, r9
      72:	74 6f       	ori	r23, 0xF4	; 244
      74:	20 72       	andi	r18, 0x20	; 32
      76:	65 70       	andi	r22, 0x05	; 5
      78:	65 61       	ori	r22, 0x15	; 21
      7a:	74 0d       	add	r23, r4
      7c:	0a 00       	.word	0x000a	; ????

0000007e <_ZZ10printErrSDhhPKcE3__c__15_>:
      7e:	20 2d 20 46 69 6c 65 3a 20 00                        - File: .

00000088 <_ZZ10printErrSDhhPKcE3__c__14_>:
      88:	20 6f 70 65 72 61 74 69 6f 6e 00                     operation.

00000093 <_ZZ10printErrSDhhPKcE3__c__13_>:
      93:	55 4e 4b 4e 4f 57 4e 00                             UNKNOWN.

0000009b <_ZZ10printErrSDhhPKcE3__c__12_>:
      9b:	53 45 45 4b 00                                      SEEK.

000000a0 <_ZZ10printErrSDhhPKcE3__c__11_>:
      a0:	57 52 49 54 45 00                                   WRITE.

000000a6 <_ZZ10printErrSDhhPKcE3__c__10_>:
      a6:	52 45 41 44 00                                      READ.

000000ab <printErrSD(unsigned char, unsigned char, char const*)::__c>:
      ab:	4f 50 45 4e 00                                      OPEN.

000000b0 <printErrSD(unsigned char, unsigned char, char const*)::__c>:
      b0:	4d 4f 55 4e 54 00                                   MOUNT.

000000b6 <printErrSD(unsigned char, unsigned char, char const*)::__c>:
      b6:	20 6f 6e 20 00                                       on .

000000bb <printErrSD(unsigned char, unsigned char, char const*)::__c>:
      bb:	55 4e 4b 4e 4f 57 4e 00                             UNKNOWN.

000000c3 <printErrSD(unsigned char, unsigned char, char const*)::__c>:
      c3:	4e 4f 5f 46 49 4c 45 53 59 53 54 45 4d 00           NO_FILESYSTEM.

000000d1 <printErrSD(unsigned char, unsigned char, char const*)::__c>:
      d1:	4e 4f 54 5f 45 4e 41 42 4c 45 44 00                 NOT_ENABLED.

000000dd <printErrSD(unsigned char, unsigned char, char const*)::__c>:
      dd:	4e 4f 54 5f 4f 50 45 4e 45 44 00                    NOT_OPENED.

000000e8 <printErrSD(unsigned char, unsigned char, char const*)::__c>:
      e8:	4e 4f 5f 46 49 4c 45 00                             NO_FILE.

000000f0 <printErrSD(unsigned char, unsigned char, char const*)::__c>:
      f0:	4e 4f 54 5f 52 45 41 44 59 00                       NOT_READY.

000000fa <printErrSD(unsigned char, unsigned char, char const*)::__c>:
      fa:	44 49 53 4b 5f 45 52 52 00                          DISK_ERR.

00000103 <printErrSD(unsigned char, unsigned char, char const*)::__c>:
     103:	0d 0a 49 4f 53 3a 20 53 44 20 65 72 72 6f 72 20     ..IOS: SD error 
	...

00000114 <_ZZ9ChangeRTCvE3__c__10_>:
     114:	49 4f 53 3a 20 52 54 43 20 64 61 74 65 2f 74 69     IOS: RTC date/ti
     124:	6d 65 20 75 70 64 61 74 65 64 20 28 00              me updated (.

00000131 <ChangeRTC()::__c>:
     131:	20 2e 2e 2e 64 6f 6e 65 20 20 20 20 20 20 0a 00      ...done      ..

00000141 <ChangeRTC()::__c>:
     141:	53 65 63 6f 6e 64 73 20 2d 3e 20 00                 Seconds -> .

0000014d <ChangeRTC()::__c>:
     14d:	4d 69 6e 75 74 65 73 20 2d 3e 20 00                 Minutes -> .

00000159 <ChangeRTC()::__c>:
     159:	48 6f 75 72 73 20 2d 3e 20 00                       Hours -> .

00000163 <ChangeRTC()::__c>:
     163:	20 44 61 79 20 2d 3e 20 00                           Day -> .

0000016c <ChangeRTC()::__c>:
     16c:	20 20 20 20 20 20 20 20 20 20 20 20 20 00                        .

0000017a <ChangeRTC()::__c>:
     17a:	4d 6f 6e 74 68 20 2d 3e 20 00                       Month -> .

00000184 <ChangeRTC()::__c>:
     184:	59 65 61 72 20 2d 3e 20 00                          Year -> .

0000018d <ChangeRTC()::__c>:
     18d:	20 00                                                .

0000018f <ChangeRTC()::__c>:
     18f:	0a 50 72 65 73 73 20 54 2f 55 20 74 6f 20 69 6e     .Press T/U to in
     19f:	63 72 65 6d 65 6e 74 20 2b 31 30 2f 2b 31 20 6f     crement +10/+1 o
     1af:	72 20 43 52 20 74 6f 20 61 63 63 65 70 74 00        r CR to accept.

000001be <ChangeRTC()::__c>:
     1be:	0a 49 4f 53 3a 20 52 54 43 20 6d 61 6e 75 61 6c     .IOS: RTC manual
     1ce:	20 73 65 74 74 69 6e 67 3a 00                        setting:.

000001d8 <autoSetRTC()::__c>:
     1d8:	49 4f 53 3a 20 52 54 43 20 73 65 74 20 61 74 20     IOS: RTC set at 
     1e8:	63 6f 6d 70 69 6c 65 20 74 69 6d 65 20 2d 20 4e     compile time - N
     1f8:	6f 77 3a 20 00                                      ow: .

000001fd <autoSetRTC()::__c>:
     1fd:	29 3f 20 5b 59 2f 4e 5d 20 3e 00                    )? [Y/N] >.

00000208 <autoSetRTC()::__c>:
     208:	0a 44 6f 20 79 6f 75 20 77 61 6e 74 20 73 65 74     .Do you want set
     218:	20 52 54 43 20 61 74 20 49 4f 53 20 63 6f 6d 70      RTC at IOS comp
     228:	69 6c 65 20 74 69 6d 65 20 28 00                    ile time (.

00000233 <autoSetRTC()::__c>:
     233:	49 4f 53 3a 20 52 54 43 20 63 6c 6f 63 6b 20 66     IOS: RTC clock f
     243:	61 69 6c 75 72 65 21 00                             ailure!.

0000024b <autoSetRTC()::__c>:
     24b:	49 4f 53 3a 20 52 54 43 20 44 53 33 32 33 31 20     IOS: RTC DS3231 
     25b:	74 65 6d 70 65 72 61 74 75 72 65 20 73 65 6e 73     temperature sens
     26b:	6f 72 3a 20 00                                      or: .

00000270 <autoSetRTC()::__c>:
     270:	49 4f 53 3a 20 46 6f 75 6e 64 20 52 54 43 20 44     IOS: Found RTC D
     280:	53 33 32 33 31 20 4d 6f 64 75 6c 65 20 28 00        S3231 Module (.

0000028f <WaitAndBlink(baudRecCheck)::__c>:
     28f:	0d 0a 0a 49 4f 53 3a 20 42 61 75 64 20 72 65 63     ...IOS: Baud rec
     29f:	6f 76 65 72 79 20 64 6f 6e 65 20 2d 20 50 6c 65     overy done - Ple
     2af:	61 73 65 20 72 65 62 6f 6f 74 20 6e 6f 77 21 00     ase reboot now!.

000002bf <printMsg1()::__c>:
     2bf:	0d 0a 50 72 65 73 73 20 43 52 20 74 6f 20 61 63     ..Press CR to ac
     2cf:	63 65 70 74 2c 20 45 53 43 20 74 6f 20 65 78 69     cept, ESC to exi
     2df:	74 20 6f 72 20 61 6e 79 20 6f 74 68 65 72 20 6b     t or any other k
     2ef:	65 79 20 74 6f 20 63 68 61 6e 67 65 00              ey to change.

000002fc <_ZZ5setupE3__c__35_>:
     2fc:	49 4f 53 3a 20 5a 38 30 20 69 73 20 72 75 6e 6e     IOS: Z80 is runn
     30c:	69 6e 67 20 66 72 6f 6d 20 6e 6f 77 00              ing from now.

00000319 <_ZZ5setupE3__c__34_>:
     319:	20 44 6f 6e 65 00                                    Done.

0000031f <_ZZ5setupE3__c__33_>:
     31f:	49 4f 53 3a 20 4c 6f 61 64 69 6e 67 20 62 6f 6f     IOS: Loading boo
     32f:	74 20 70 72 6f 67 72 61 6d 2e 2e 2e 00              t program....

0000033c <_ZZ5setupE3__c__32_>:
     33c:	29 2e 2e 2e 00                                      )....

00000341 <_ZZ5setupE3__c__31_>:
     341:	49 4f 53 3a 20 4c 6f 61 64 69 6e 67 20 62 6f 6f     IOS: Loading boo
     351:	74 20 70 72 6f 67 72 61 6d 20 28 00                 t program (.

0000035d <_ZZ5setupE3__c__27_>:
     35d:	49 4f 53 3a 20 43 75 72 72 65 6e 74 20 00           IOS: Current .

0000036b <_ZZ5setupE3__c__26_>:
     36b:	43 68 61 6e 67 65 64 20 73 70 65 65 64 20 77 69     Changed speed wi
     37b:	6c 6c 20 62 65 20 65 66 66 65 63 74 69 76 65 20     ll be effective 
     38b:	61 66 74 65 72 20 6e 65 78 74 20 72 65 62 6f 6f     after next reboo
     39b:	74 21 0d 0a 0a 00                                   t!....

000003a1 <_ZZ5setupE3__c__25_>:
     3a1:	20 20 20 0d 00                                         ..

000003a6 <_ZZ5setupE3__c__24_>:
     3a6:	0d 20 2d 3e 00                                      . ->.

000003ab <_ZZ5setupE3__c__23_>:
     3ab:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     3bb:	20 0d 00                                             ..

000003be <_ZZ5setupE3__c__22_>:
     3be:	0d 20 2d 3e 00                                      . ->.

000003c3 <_ZZ5setupE3__c__21_>:
     3c3:	20 20 4f 6b 00                                        Ok.

000003c8 <_ZZ5setupE3__c__20_>:
     3c8:	45 6e 74 65 72 20 79 6f 75 72 20 63 68 6f 69 63     Enter your choic
     3d8:	65 20 3e 00                                         e >.

000003dc <_ZZ5setupE3__c__19_>:
     3dc:	20 39 3a 20 53 65 74 20 52 54 43 20 74 69 6d 65      9: Set RTC time
     3ec:	2f 64 61 74 65 00                                   /date.

000003f2 <_ZZ5setupE3__c__18_>:
     3f2:	20 38 3a 20 53 65 74 20 73 65 72 69 61 6c 20 70      8: Set serial p
     402:	6f 72 74 20 73 70 65 65 64 20 28 00                 ort speed (.

0000040e <_ZZ5setupE3__c__17_>:
     40e:	4f 46 46 00                                         OFF.

00000412 <_ZZ5setupE3__c__16_>:
     412:	20 37 3a 20 54 6f 67 67 6c 65 20 43 50 2f 4d 20      7: Toggle CP/M 
     422:	41 75 74 6f 65 78 65 63 20 28 2d 3e 00              Autoexec (->.

0000042f <_ZZ5setupE3__c__15_>:
     42f:	4d 48 7a 29 00                                      MHz).

00000434 <_ZZ5setupE3__c__14_>:
     434:	20 36 3a 20 43 68 61 6e 67 65 20 5a 38 30 20 63      6: Change Z80 c
     444:	6c 6f 63 6b 20 73 70 65 65 64 20 28 2d 3e 00        lock speed (->.

00000453 <_ZZ5setupE3__c__13_>:
     453:	20 35 3a 20 69 4c 6f 61 64 00                        5: iLoad.

0000045d <_ZZ5setupE3__c__12_>:
     45d:	0d 0a 20 34 3a 20 41 75 74 6f 62 6f 6f 74 00        .. 4: Autoboot.

0000046c <_ZZ5setupE3__c__11_>:
     46c:	20 33 3a 20 4c 6f 61 64 2f 73 65 74 20 4f 53 20      3: Load/set OS 
	...

0000047d <_ZZ5setupE3__c__10_>:
     47d:	20 32 3a 20 46 6f 72 74 68 00                        2: Forth.

00000487 <setup::__c>:
     487:	20 31 3a 20 42 61 73 69 63 00                        1: Basic.

00000491 <setup::__c>:
     491:	20 30 3a 20 4e 6f 20 63 68 61 6e 67 65 20 28 00      0: No change (.

000004a1 <setup::__c>:
     4a1:	49 4f 53 3a 20 53 65 6c 65 63 74 20 62 6f 6f 74     IOS: Select boot
     4b1:	20 6d 6f 64 65 20 6f 72 20 73 79 73 74 65 6d 20      mode or system 
     4c1:	70 61 72 61 6d 65 74 65 72 73 3a 00                 parameters:.

000004cd <setup::__c>:
     4cd:	4f 46 46 00                                         OFF.

000004d1 <setup::__c>:
     4d1:	4f 4e 00                                            ON.

000004d4 <setup::__c>:
     4d4:	49 4f 53 3a 20 43 50 2f 4d 20 41 75 74 6f 65 78     IOS: CP/M Autoex
     4e4:	65 63 20 69 73 20 00                                ec is .

000004eb <setup::__c>:
     4eb:	49 4f 53 3a 20 46 6f 75 6e 64 20 47 50 45 20 4f     IOS: Found GPE O
     4fb:	70 74 69 6f 6e 00                                   ption.

00000501 <setup::__c>:
     501:	4d 48 7a 00                                         MHz.

00000505 <setup::__c>:
     505:	49 4f 53 3a 20 5a 38 30 20 63 6c 6f 63 6b 20 73     IOS: Z80 clock s
     515:	65 74 20 61 74 20 00                                et at .

0000051c <setup::__c>:
     51c:	49 4f 53 3a 20 46 6f 75 6e 64 20 65 78 74 65 6e     IOS: Found exten
     52c:	64 65 64 20 73 65 72 69 61 6c 20 52 78 20 62 75     ded serial Rx bu
     53c:	66 66 65 72 00                                      ffer.

00000541 <setup::__c>:
     541:	0d 0a 0a 5a 38 30 2d 4d 42 43 32 20 2d 20 41 30     ...Z80-MBC2 - A0
     551:	34 30 36 31 38 0d 0a 49 4f 53 20 2d 20 49 2f 4f     40618..IOS - I/O
     561:	20 53 75 62 73 79 73 74 65 6d 20 2d 20 53 32 32      Subsystem - S22
     571:	30 37 31 38 2d 52 32 39 30 38 32 33 0d 0a 00        0718-R290823...

00000580 <flahBootTable>:
     580:	82 05                                               ..

00000582 <boot_A_>:
     582:	31 10 fd 21 52 fd cd c6 fe cd 3e ff cd f4 fd 3e     1..!R.....>....>
     592:	ff bc 20 10 bd 20 0d 21 d9 fd cd c6 fe 21 88 fd     .. .. .!.....!..
     5a2:	cd c6 fe 76 e5 21 d9 fd cd c6 fe 21 75 fd cd c6     ...v.!.....!u...
     5b2:	fe e1 cd 4b ff cd 3e ff cd 3e ff db 01 fe ff 20     ...K..>..>..... 
     5c2:	fa e9 69 4c 6f 61 64 20 2d 20 49 6e 74 65 6c 2d     ..iLoad - Intel-
     5d2:	48 65 78 20 4c 6f 61 64 65 72 20 2d 20 53 32 30     Hex Loader - S20
     5e2:	30 37 31 38 00 53 74 61 72 74 69 6e 67 20 41 64     0718.Starting Ad
     5f2:	64 72 65 73 73 3a 20 00 4c 6f 61 64 20 65 72 72     dress: .Load err
     602:	6f 72 20 2d 20 53 79 73 74 65 6d 20 68 61 6c 74     or - System halt
     612:	65 64 00 57 61 69 74 69 6e 67 20 69 6e 70 75 74     ed.Waiting input
     622:	20 73 74 72 65 61 6d 2e 2e 2e 00 53 79 6e 74 61      stream....Synta
     632:	78 20 65 72 72 6f 72 21 00 43 68 65 63 6b 73 75     x error!.Checksu
     642:	6d 20 65 72 72 6f 72 21 00 69 4c 6f 61 64 3a 20     m error!.iLoad: 
     652:	00 41 64 64 72 65 73 73 20 76 69 6f 6c 61 74 69     .Address violati
     662:	6f 6e 21 00 f5 d5 c5 01 ff ff 21 a3 fd cd c6 fe     on!.......!.....
     672:	cd 3e ff cd 72 ff fe 0d 28 f9 fe 0a 28 f5 fe 20     .>..r...(...(.. 
     682:	28 f1 cd 1a ff cd 69 ff fe 3a c2 a3 fe cd e1 fe     (.....i..:......
     692:	57 1e 00 cd be fe cd d6 fe 3e ff b8 20 05 b9 20     W........>.. .. 
     6a2:	02 44 4d 7c cd be fe 7d cd be fe cd e1 fe cd be     .DM|...}........
     6b2:	fe fe 01 20 1e cd e1 fe cd be fe 7b a7 28 66 cd     ... .......{.(f.
     6c2:	3e ff 21 d9 fd cd c6 fe 21 c9 fd cd c6 fe 01 ff     >.!.....!.......
     6d2:	ff 18 52 7a a7 28 2c cd e1 fe cd be fe e5 c5 a7     ..Rz.(,.........
     6e2:	01 f0 fc ed 42 c1 e1 da 8e fe cd 3e ff 21 d9 fd     ....B......>.!..
     6f2:	cd c6 fe 21 e1 fd cd c6 fe 01 ff ff 18 27 77 23     ...!.........'w#
     702:	15 18 d0 cd e1 fe cd be fe 7b a7 20 b2 cd 3e ff     .........{. ..>.
     712:	c3 03 fe cd 3e ff 21 d9 fd cd c6 fe 21 bb fd cd     ....>.!.....!...
     722:	c6 fe 01 ff ff cd 3e ff 60 69 c1 d1 f1 c9 c5 4f     ......>.`i.....O
     732:	7b 91 5f 79 c1 c9 f5 e5 7e fe 00 28 06 cd 69 ff     {._y....~..(..i.
     742:	23 18 f5 e1 f1 c9 f5 cd e1 fe 67 cd e1 fe 6f f1     #.........g...o.
     752:	c9 c5 cd f4 fe cb 07 cb 07 cb 07 cb 07 47 cd f4     .............G..
     762:	fe b0 c1 c9 cd 72 ff cd 1a ff cd 06 ff 30 f5 cd     .....r.......0..
     772:	23 ff cd 2e ff c9 fe 47 d0 fe 30 30 02 3f c9 fe     #......G..00.?..
     782:	3a d8 fe 41 30 02 3f c9 37 c9 fe 61 d8 fe 7b d0     :..A0.?.7..a..{.
     792:	e6 5f c9 fe 3a 38 02 d6 07 d6 30 e6 0f c9 f5 e6     ._..:8....0.....
     7a2:	0f c6 30 fe 3a 38 02 c6 07 cd 69 ff f1 c9 f5 3e     ..0.:8....i....>
     7b2:	0d cd 69 ff 3e 0a cd 69 ff f1 c9 e5 f5 7c cd 58     ..i.>..i.....|.X
     7c2:	ff 7d cd 58 ff f1 e1 c9 f5 c5 47 0f 0f 0f 0f cd     .}.X......G.....
     7d2:	2e ff 78 cd 2e ff c1 f1 c9 f5 3e 01 d3 01 f1 d3     ..x.......>.....
     7e2:	00 c9 db 01 fe ff ca 72 ff c9                       .......r..

000007ec <digital_pin_to_timer_PGM>:
     7ec:	00 00 00 02 00 00 00 00 00 00 00 00 05 04 00 07     ................
	...

0000080c <digital_pin_to_bit_mask_PGM>:
     80c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     81c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

0000082c <digital_pin_to_port_PGM>:
     82c:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
     83c:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

0000084c <port_to_input_PGM>:
     84c:	00 00 39 00 36 00 33 00 30 00                       ..9.6.3.0.

00000856 <port_to_output_PGM>:
     856:	00 00 3b 00 38 00 35 00 32 00                       ..;.8.5.2.

00000860 <port_to_mode_PGM>:
     860:	00 00 3a 00 37 00 34 00 31 00                       ..:.7.4.1.

0000086a <__ctors_start>:
__ctors_start():
     86a:	32 06       	cpc	r3, r18
     86c:	85 1f       	adc	r24, r21
     86e:	2b 23       	and	r18, r27

00000870 <__ctors_end>:
__dtors_start():
     870:	3e 06       	cpc	r3, r30

00000872 <__dtors_end>:
__dtors_end():
     872:	11 24       	eor	r1, r1
     874:	1f be       	out	0x3f, r1	; 63
     876:	cf e5       	ldi	r28, 0x5F	; 95
     878:	d8 e0       	ldi	r29, 0x08	; 8
     87a:	de bf       	out	0x3e, r29	; 62
     87c:	cd bf       	out	0x3d, r28	; 61

0000087e <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     87e:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     880:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     882:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     884:	ec e4       	ldi	r30, 0x4C	; 76
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     886:	f4 e5       	ldi	r31, 0x54	; 84
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     888:	02 c0       	rjmp	.+4      	; 0x88e <__do_copy_data+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     88a:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     88c:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     88e:	aa 35       	cpi	r26, 0x5A	; 90
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     890:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     892:	d9 f7       	brne	.-10     	; 0x88a <__do_copy_data+0xc>

00000894 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     894:	23 e0       	ldi	r18, 0x03	; 3
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     896:	aa e5       	ldi	r26, 0x5A	; 90
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     898:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     89a:	01 c0       	rjmp	.+2      	; 0x89e <.do_clear_bss_start>

0000089c <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     89c:	1d 92       	st	X+, r1

0000089e <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     89e:	a6 37       	cpi	r26, 0x76	; 118
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     8a0:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     8a2:	e1 f7       	brne	.-8      	; 0x89c <.do_clear_bss_loop>

000008a4 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     8a4:	14 e0       	ldi	r17, 0x04	; 4
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     8a6:	c8 e3       	ldi	r28, 0x38	; 56
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     8a8:	d4 e0       	ldi	r29, 0x04	; 4
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__do_global_ctors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     8ac:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     8ae:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     8b0:	0e 94 7f 27 	call	0x4efe	; 0x4efe <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     8b4:	c5 33       	cpi	r28, 0x35	; 53
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     8b6:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     8b8:	c9 f7       	brne	.-14     	; 0x8ac <__do_global_ctors+0x8>
     8ba:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <main>
     8be:	0c 94 19 2a 	jmp	0x5432	; 0x5432 <__do_global_dtors>

000008c2 <__bad_interrupt>:
__vector_1():
     8c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000008c6 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>:
_ZN11EEPROMClass6updateEih():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2328
// Returns 1 if it is leap, 0 otherwise.
// This function works in the [2000..2099] years range. It should be enough...
{
  if (((2000 + yearXX) % 4) == 0) return 1;
  else return 0;
}
     8c6:	1f 93       	push	r17
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	ec 01       	movw	r28, r24
     8ce:	16 2f       	mov	r17, r22
_ZNK5EERefdeEv():
     8d0:	0e 94 cd 29 	call	0x539a	; 0x539a <eeprom_read_byte>
_ZN5EERef6updateEh():
     8d4:	18 17       	cp	r17, r24
     8d6:	39 f0       	breq	.+14     	; 0x8e6 <EEPROMClass::update(int, unsigned char) [clone .isra.2]+0x20>
_ZN5EERefaSEh():
     8d8:	61 2f       	mov	r22, r17
     8da:	ce 01       	movw	r24, r28
_ZN11EEPROMClass6updateEih():
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
_ZN5EERefaSEh():
     8e2:	0c 94 d5 29 	jmp	0x53aa	; 0x53aa <eeprom_write_byte>
_ZN11EEPROMClass6updateEih():
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	08 95       	ret

000008ee <EEPROMClass::read(int) [clone .isra.1]>:
_ZNK5EERefdeEv():
     8ee:	0c 94 cd 29 	jmp	0x539a	; 0x539a <eeprom_read_byte>

000008f2 <TwoWire::write(int)>:
_ZN7TwoWire5writeEi():
     8f2:	dc 01       	movw	r26, r24
     8f4:	ed 91       	ld	r30, X+
     8f6:	fc 91       	ld	r31, X
     8f8:	01 90       	ld	r0, Z+
     8fa:	f0 81       	ld	r31, Z
     8fc:	e0 2d       	mov	r30, r0
     8fe:	09 94       	ijmp

00000900 <printMsg1()>:
_Z9printMsg1v():
     900:	6f eb       	ldi	r22, 0xBF	; 191
     902:	72 e0       	ldi	r23, 0x02	; 2
     904:	8c e8       	ldi	r24, 0x8C	; 140
     906:	92 e0       	ldi	r25, 0x02	; 2
     908:	0c 94 c9 23 	jmp	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>

0000090c <decToBcd(unsigned char)>:
_Z8decToBcdh():
     90c:	6a e0       	ldi	r22, 0x0A	; 10
     90e:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <__udivmodqi4>
     912:	82 95       	swap	r24
     914:	80 7f       	andi	r24, 0xF0	; 240
     916:	89 0f       	add	r24, r25
     918:	08 95       	ret

0000091a <bcdToDec(unsigned char)>:
_Z8bcdToDech():
     91a:	98 2f       	mov	r25, r24
     91c:	92 95       	swap	r25
     91e:	9f 70       	andi	r25, 0x0F	; 15
     920:	8f 70       	andi	r24, 0x0F	; 15
     922:	2a e0       	ldi	r18, 0x0A	; 10
     924:	92 9f       	mul	r25, r18
     926:	80 0d       	add	r24, r0
     928:	11 24       	eor	r1, r1
     92a:	08 95       	ret

0000092c <print2digit(unsigned char)>:
_Z11print2digith():
     92c:	cf 93       	push	r28
     92e:	c8 2f       	mov	r28, r24
     930:	8a 30       	cpi	r24, 0x0A	; 10
     932:	30 f4       	brcc	.+12     	; 0x940 <print2digit(unsigned char)+0x14>
     934:	60 e8       	ldi	r22, 0x80	; 128
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	8c e8       	ldi	r24, 0x8C	; 140
     93a:	92 e0       	ldi	r25, 0x02	; 2
     93c:	0e 94 b6 23 	call	0x476c	; 0x476c <Print::print(char const*)>
     940:	4a e0       	ldi	r20, 0x0A	; 10
     942:	50 e0       	ldi	r21, 0x00	; 0
     944:	6c 2f       	mov	r22, r28
     946:	8c e8       	ldi	r24, 0x8C	; 140
     948:	92 e0       	ldi	r25, 0x02	; 2
     94a:	cf 91       	pop	r28
     94c:	0c 94 ac 24 	jmp	0x4958	; 0x4958 <Print::print(unsigned char, int)>

00000950 <pulseClock(unsigned char)>:
_Z10pulseClockh():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2493


void pulseClock(byte numPulse)
// Generate <numPulse> clock pulses on the Z80 clock pin.
// The steady clock level is LOW, e.g. one clock pulse is a 0-1-0 transition
{
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	d8 2f       	mov	r29, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2495
  byte    i;
  for (i = 0; i < numPulse; i++)
     956:	c0 e0       	ldi	r28, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2495 (discriminator 3)
     958:	cd 17       	cp	r28, r29
     95a:	51 f0       	breq	.+20     	; 0x970 <pulseClock(unsigned char)+0x20>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2499 (discriminator 2)
  // Generate one clock pulse
  {
    // Send one impulse (0-1-0) on the CLK output
    digitalWrite(CLK, HIGH);
     95c:	61 e0       	ldi	r22, 0x01	; 1
     95e:	8f e0       	ldi	r24, 0x0F	; 15
     960:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2500 (discriminator 2)
    digitalWrite(CLK, LOW);
     964:	60 e0       	ldi	r22, 0x00	; 0
     966:	8f e0       	ldi	r24, 0x0F	; 15
     968:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2495 (discriminator 2)
void pulseClock(byte numPulse)
// Generate <numPulse> clock pulses on the Z80 clock pin.
// The steady clock level is LOW, e.g. one clock pulse is a 0-1-0 transition
{
  byte    i;
  for (i = 0; i < numPulse; i++)
     96c:	cf 5f       	subi	r28, 0xFF	; 255
     96e:	f4 cf       	rjmp	.-24     	; 0x958 <pulseClock(unsigned char)+0x8>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2502
  {
    // Send one impulse (0-1-0) on the CLK output
    digitalWrite(CLK, HIGH);
    digitalWrite(CLK, LOW);
  }
}
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <loadByteToRAM(unsigned char)>:
_Z13loadByteToRAMh():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2513
// The RAM_CE2 signal is used to force the RAM in HiZ, so the Atmega can write the needed instruction/data
//  on the data bus. Controlling the clock signal and knowing exactly how many clocks pulse are required it 
//  is possible control the whole loading process.
// In the following "T" are the T-cycles of the Z80 (See the Z80 datashet).
// The two instruction are "LD (HL), n" and "INC (HL)".
{
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	d8 2f       	mov	r29, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2517
  
  // Execute the LD(HL),n instruction (T = 4+3+3). See the Z80 datasheet and manual.
  // After the execution of this instruction the <value> byte is loaded in the memory address pointed by HL.
  pulseClock(1);                      // Execute the T1 cycle of M1 (Instruction Fetch machine cycle)
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	0e 94 a8 04 	call	0x950	; 0x950 <pulseClock(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2518
  digitalWrite(RAM_CE2, LOW);         // Force the RAM in HiZ (CE2 = LOW)
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2519
  DDRA = 0xFF;                        // Configure Z80 data bus D0-D7 (PA0-PA7) as output
     98a:	cf ef       	ldi	r28, 0xFF	; 255
     98c:	ca bb       	out	0x1a, r28	; 26
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2520
  PORTA = LD_HL;                      // Write "LD (HL), n" instruction on data bus
     98e:	86 e3       	ldi	r24, 0x36	; 54
     990:	8b bb       	out	0x1b, r24	; 27
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2521
  pulseClock(2);                      // Execute T2 and T3 cycles of M1
     992:	82 e0       	ldi	r24, 0x02	; 2
     994:	0e 94 a8 04 	call	0x950	; 0x950 <pulseClock(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2522
  DDRA = 0x00;                        // Configure Z80 data bus D0-D7 (PA0-PA7) as input... 
     998:	1a ba       	out	0x1a, r1	; 26
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2523
  PORTA = 0xFF;                       // ...with pull-up
     99a:	cb bb       	out	0x1b, r28	; 27
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2524
  pulseClock(2);                      // Complete the execution of M1 and execute the T1 cycle of the following 
     99c:	82 e0       	ldi	r24, 0x02	; 2
     99e:	0e 94 a8 04 	call	0x950	; 0x950 <pulseClock(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2526
                                      // Memory Read machine cycle
  DDRA = 0xFF;                        // Configure Z80 data bus D0-D7 (PA0-PA7) as output
     9a2:	ca bb       	out	0x1a, r28	; 26
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2527
  PORTA = value;                      // Write the byte to load in RAM on data bus
     9a4:	db bb       	out	0x1b, r29	; 27
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2528
  pulseClock(2);                      // Execute the T2 and T3 cycles of the Memory Read machine cycle
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	0e 94 a8 04 	call	0x950	; 0x950 <pulseClock(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2529
  DDRA = 0x00;                        // Configure Z80 data bus D0-D7 (PA0-PA7) as input... 
     9ac:	1a ba       	out	0x1a, r1	; 26
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2530
  PORTA = 0xFF;                       // ...with pull-up
     9ae:	cb bb       	out	0x1b, r28	; 27
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2531
  digitalWrite(RAM_CE2, HIGH);        // Enable the RAM again (CE2 = HIGH)
     9b0:	61 e0       	ldi	r22, 0x01	; 1
     9b2:	82 e0       	ldi	r24, 0x02	; 2
     9b4:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2532
  pulseClock(3);                      // Execute all the following Memory Write machine cycle
     9b8:	83 e0       	ldi	r24, 0x03	; 3
     9ba:	0e 94 a8 04 	call	0x950	; 0x950 <pulseClock(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2536

  // Execute the INC(HL) instruction (T = 6). See the Z80 datasheet and manual.
  // After the execution of this instruction HL points to the next memory address.
  pulseClock(1);                      // Execute the T1 cycle of M1 (Instruction Fetch machine cycle)
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	0e 94 a8 04 	call	0x950	; 0x950 <pulseClock(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2537
  digitalWrite(RAM_CE2, LOW);         // Force the RAM in HiZ (CE2 = LOW)
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	82 e0       	ldi	r24, 0x02	; 2
     9c8:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2538
  DDRA = 0xFF;                        // Configure Z80 data bus D0-D7 (PA0-PA7) as output
     9cc:	ca bb       	out	0x1a, r28	; 26
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2539
  PORTA = INC_HL;                     // Write "INC(HL)" instruction on data bus
     9ce:	83 e2       	ldi	r24, 0x23	; 35
     9d0:	8b bb       	out	0x1b, r24	; 27
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2540
  pulseClock(2);                      // Execute T2 and T3 cycles of M1
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	0e 94 a8 04 	call	0x950	; 0x950 <pulseClock(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2541
  DDRA = 0x00;                        // Configure Z80 data bus D0-D7 (PA0-PA7) as input... 
     9d8:	1a ba       	out	0x1a, r1	; 26
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2542
  PORTA = 0xFF;                       // ...with pull-up
     9da:	cb bb       	out	0x1b, r28	; 27
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2543
  digitalWrite(RAM_CE2, HIGH);        // Enable the RAM again (CE2 = HIGH)
     9dc:	61 e0       	ldi	r22, 0x01	; 1
     9de:	82 e0       	ldi	r24, 0x02	; 2
     9e0:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2544
  pulseClock(3);                      // Execute all the remaining T cycles
     9e4:	83 e0       	ldi	r24, 0x03	; 3
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2545
}
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2544
  PORTA = INC_HL;                     // Write "INC(HL)" instruction on data bus
  pulseClock(2);                      // Execute T2 and T3 cycles of M1
  DDRA = 0x00;                        // Configure Z80 data bus D0-D7 (PA0-PA7) as input... 
  PORTA = 0xFF;                       // ...with pull-up
  digitalWrite(RAM_CE2, HIGH);        // Enable the RAM again (CE2 = HIGH)
  pulseClock(3);                      // Execute all the remaining T cycles
     9ea:	0c 94 a8 04 	jmp	0x950	; 0x950 <pulseClock(unsigned char)>

000009ee <loadHL(unsigned int)>:
_Z6loadHLj():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2552
// ------------------------------------------------------------------------------

void loadHL(word value)
// Load "value" word into the HL registers inside the Z80 CPU, using the "LD HL,nn" instruction.
// In the following "T" are the T-cycles of the Z80 (See the Z80 datashet).
{
     9ee:	1f 93       	push	r17
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	18 2f       	mov	r17, r24
     9f6:	d9 2f       	mov	r29, r25
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2555
  // Execute the LD dd,nn instruction (T = 4+3+3), with dd = HL and nn = value. See the Z80 datasheet and manual.
  // After the execution of this instruction the word "value" (16bit) is loaded into HL.
  pulseClock(1);                      // Execute the T1 cycle of M1 (Instruction Fetch machine cycle)
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	0e 94 a8 04 	call	0x950	; 0x950 <pulseClock(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2556
  digitalWrite(RAM_CE2, LOW);         // Force the RAM in HiZ (CE2 = LOW)
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	82 e0       	ldi	r24, 0x02	; 2
     a02:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2557
  DDRA = 0xFF;                        // Configure Z80 data bus D0-D7 (PA0-PA7) as output
     a06:	cf ef       	ldi	r28, 0xFF	; 255
     a08:	ca bb       	out	0x1a, r28	; 26
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2558
  PORTA = LD_HLnn;                    // Write "LD HL, n" instruction on data bus
     a0a:	81 e2       	ldi	r24, 0x21	; 33
     a0c:	8b bb       	out	0x1b, r24	; 27
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2559
  pulseClock(2);                      // Execute T2 and T3 cycles of M1
     a0e:	82 e0       	ldi	r24, 0x02	; 2
     a10:	0e 94 a8 04 	call	0x950	; 0x950 <pulseClock(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2560
  DDRA = 0x00;                        // Configure Z80 data bus D0-D7 (PA0-PA7) as input... 
     a14:	1a ba       	out	0x1a, r1	; 26
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2561
  PORTA = 0xFF;                       // ...with pull-up
     a16:	cb bb       	out	0x1b, r28	; 27
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2562
  pulseClock(2);                      // Complete the execution of M1 and execute the T1 cycle of the following 
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	0e 94 a8 04 	call	0x950	; 0x950 <pulseClock(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2564
                                      // Memory Read machine cycle
  DDRA = 0xFF;                        // Configure Z80 data bus D0-D7 (PA0-PA7) as output
     a1e:	ca bb       	out	0x1a, r28	; 26
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2565
  PORTA = lowByte(value);             // Write first byte of "value" to load in HL
     a20:	1b bb       	out	0x1b, r17	; 27
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2566
  pulseClock(3);                      // Execute the T2 and T3 cycles of the first Memory Read machine cycle
     a22:	83 e0       	ldi	r24, 0x03	; 3
     a24:	0e 94 a8 04 	call	0x950	; 0x950 <pulseClock(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2568
                                      // and T1, of the second Memory Read machine cycle
  PORTA = highByte(value);            // Write second byte of "value" to load in HL
     a28:	db bb       	out	0x1b, r29	; 27
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2569
  pulseClock(2);                      // Execute the T2 and T3 cycles of the second Memory Read machine cycle                                    
     a2a:	82 e0       	ldi	r24, 0x02	; 2
     a2c:	0e 94 a8 04 	call	0x950	; 0x950 <pulseClock(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2570
  DDRA = 0x00;                        // Configure Z80 data bus D0-D7 (PA0-PA7) as input... 
     a30:	1a ba       	out	0x1a, r1	; 26
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2571
  PORTA = 0xFF;                       // ...with pull-up
     a32:	cb bb       	out	0x1b, r28	; 27
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2572
  digitalWrite(RAM_CE2, HIGH);        // Enable the RAM again (CE2 = HIGH)
     a34:	61 e0       	ldi	r22, 0x01	; 1
     a36:	82 e0       	ldi	r24, 0x02	; 2
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2573
}
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2572
                                      // and T1, of the second Memory Read machine cycle
  PORTA = highByte(value);            // Write second byte of "value" to load in HL
  pulseClock(2);                      // Execute the T2 and T3 cycles of the second Memory Read machine cycle                                    
  DDRA = 0x00;                        // Configure Z80 data bus D0-D7 (PA0-PA7) as input... 
  PORTA = 0xFF;                       // ...with pull-up
  digitalWrite(RAM_CE2, HIGH);        // Enable the RAM again (CE2 = HIGH)
     a3e:	0c 94 f9 26 	jmp	0x4df2	; 0x4df2 <digitalWrite>

00000a42 <singlePulsesResetZ80()>:
_Z20singlePulsesResetZ80v():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2580
// ------------------------------------------------------------------------------

void singlePulsesResetZ80()
// Reset the Z80 CPU using single pulses clock
{
  digitalWrite(RESET_, LOW);          // Set RESET_ active
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	86 e1       	ldi	r24, 0x16	; 22
     a46:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2581
  pulseClock(6);                      // Generate twice the needed clock pulses to reset the Z80
     a4a:	86 e0       	ldi	r24, 0x06	; 6
     a4c:	0e 94 a8 04 	call	0x950	; 0x950 <pulseClock(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2582
  digitalWrite(RESET_, HIGH);         // Set RESET_ not active
     a50:	61 e0       	ldi	r22, 0x01	; 1
     a52:	86 e1       	ldi	r24, 0x16	; 22
     a54:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2583
  pulseClock(2);                      // Needed two more clock pulses after RESET_ goes HIGH
     a58:	82 e0       	ldi	r24, 0x02	; 2
     a5a:	0c 94 a8 04 	jmp	0x950	; 0x950 <pulseClock(unsigned char)>

00000a5e <mountSD(FATFS*)>:
_Z7mountSDP5FATFS():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2600
byte mountSD(FATFS* fatFs)
// Mount a volume on SD: 
// *  "fatFs" is a pointer to a FATFS object (PetitFS library)
// The returned value is the resulting status (0 = ok, otherwise see printErrSD())
{
  return pf_mount(fatFs);
     a5e:	0e 94 92 18 	call	0x3124	; 0x3124 <pf_mount>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2601
}
     a62:	08 95       	ret

00000a64 <openSD(char const*)>:
_Z6openSDPKc():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2610
byte openSD(const char* fileName)
// Open an existing file on SD:
// *  "fileName" is the pointer to the string holding the file name (8.3 format)
// The returned value is the resulting status (0 = ok, otherwise see printErrSD())
{
  return pf_open(fileName);
     a64:	0e 94 a0 19 	call	0x3340	; 0x3340 <pf_open>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2611
}
     a68:	08 95       	ret

00000a6a <readSD(void*, unsigned char*)>:
_Z6readSDPvPh():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2627
// NOTE1: Each SD sector (512 bytes) is divided into 16 segments (32 bytes each); to read a sector you need to
//        to call readSD() 16 times consecutively
//
// NOTE2: Past current sector boundary, the next sector will be pointed. So to read a whole file it is sufficient 
//        call readSD() consecutively until EOF is reached
{
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	00 d0       	rcall	.+0      	; 0xa74 <readSD(void*, unsigned char*)+0xa>
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62
     a78:	8b 01       	movw	r16, r22
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2630
  UINT  numBytes;
  byte  errcode;
  errcode = pf_read(buffSD, 32, &numBytes);
     a7a:	ae 01       	movw	r20, r28
     a7c:	4f 5f       	subi	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	60 e2       	ldi	r22, 0x20	; 32
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	0e 94 27 1b 	call	0x364e	; 0x364e <pf_read>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2631
  *numReadBytes = (byte) numBytes;
     a88:	99 81       	ldd	r25, Y+1	; 0x01
     a8a:	f8 01       	movw	r30, r16
     a8c:	90 83       	st	Z, r25
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2633
  return errcode;
}
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	08 95       	ret

00000a9c <writeSD(void*, unsigned char*)>:
_Z7writeSDPvPh():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2651
//
// NOTE2: Past current sector boundary, the next sector will be pointed. So to write a whole file it is sufficient 
//        call writeSD() consecutively until EOF is reached
//
// NOTE3: To finalize the current write operation a writeSD(NULL, &numWrittenBytes) must be called as last action
{
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	00 d0       	rcall	.+0      	; 0xaa6 <writeSD(void*, unsigned char*)+0xa>
     aa6:	cd b7       	in	r28, 0x3d	; 61
     aa8:	de b7       	in	r29, 0x3e	; 62
     aaa:	8b 01       	movw	r16, r22
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2656
  UINT  numBytes;
  byte  errcode;
  if (buffSD != NULL)
  {
    errcode = pf_write(buffSD, 32, &numBytes);
     aac:	ae 01       	movw	r20, r28
     aae:	4f 5f       	subi	r20, 0xFF	; 255
     ab0:	5f 4f       	sbci	r21, 0xFF	; 255
     ab2:	60 e2       	ldi	r22, 0x20	; 32
     ab4:	70 e0       	ldi	r23, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2654
//
// NOTE3: To finalize the current write operation a writeSD(NULL, &numWrittenBytes) must be called as last action
{
  UINT  numBytes;
  byte  errcode;
  if (buffSD != NULL)
     ab6:	00 97       	sbiw	r24, 0x00	; 0
     ab8:	21 f4       	brne	.+8      	; 0xac2 <writeSD(void*, unsigned char*)+0x26>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2660
  {
    errcode = pf_write(buffSD, 32, &numBytes);
  }
  else
  {
    errcode = pf_write(0, 0, &numBytes);
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <pf_write>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2662
  }
  *numWrittenBytes = (byte) numBytes;
     ac6:	99 81       	ldd	r25, Y+1	; 0x01
     ac8:	f8 01       	movw	r30, r16
     aca:	90 83       	st	Z, r25
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2664
  return errcode;
}
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	08 95       	ret

00000ada <seekSD(unsigned int)>:
_Z6seekSDj():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2678
// NOTE: "secNum" is in the range [0..16383], and the sector addressing is continuos inside a "disk file";
//       16383 = (512 * 32) - 1, where 512 is the number of emulated tracks, 32 is the number of emulated sectors
//
{
  byte i;
  return pf_lseek(((unsigned long) sectNum) << 9);
     ada:	b0 e0       	ldi	r27, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	bc 01       	movw	r22, r24
     ae0:	cd 01       	movw	r24, r26
     ae2:	29 e0       	ldi	r18, 0x09	; 9
     ae4:	66 0f       	add	r22, r22
     ae6:	77 1f       	adc	r23, r23
     ae8:	88 1f       	adc	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	2a 95       	dec	r18
     aee:	d1 f7       	brne	.-12     	; 0xae4 <seekSD(unsigned int)+0xa>
     af0:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <pf_lseek>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2679
}
     af4:	08 95       	ret

00000af6 <printErrSD(unsigned char, unsigned char, char const*)>:
_Z10printErrSDhhPKc():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2733
//     The function failed due to an error in the disk function, a wrong FAT structure or an internal error.
// NOT_OPENED
//     The file has not been opened.
//
// ........................................................................
{
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2734
  if (errCode)
     afe:	66 23       	and	r22, r22
     b00:	09 f4       	brne	.+2      	; 0xb04 <printErrSD(unsigned char, unsigned char, char const*)+0xe>
     b02:	76 c0       	rjmp	.+236    	; 0xbf0 <printErrSD(unsigned char, unsigned char, char const*)+0xfa>
     b04:	8a 01       	movw	r16, r20
     b06:	c6 2f       	mov	r28, r22
     b08:	d8 2f       	mov	r29, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2736
  {
    Serial.print(F("\r\nIOS: SD error "));
     b0a:	63 e0       	ldi	r22, 0x03	; 3
     b0c:	71 e0       	ldi	r23, 0x01	; 1
     b0e:	8c e8       	ldi	r24, 0x8C	; 140
     b10:	92 e0       	ldi	r25, 0x02	; 2
     b12:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2737
    Serial.print(errCode);
     b16:	4a e0       	ldi	r20, 0x0A	; 10
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	6c 2f       	mov	r22, r28
     b1c:	8c e8       	ldi	r24, 0x8C	; 140
     b1e:	92 e0       	ldi	r25, 0x02	; 2
     b20:	0e 94 ac 24 	call	0x4958	; 0x4958 <Print::print(unsigned char, int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2738
    Serial.print(" (");
     b24:	62 e8       	ldi	r22, 0x82	; 130
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	8c e8       	ldi	r24, 0x8C	; 140
     b2a:	92 e0       	ldi	r25, 0x02	; 2
     b2c:	0e 94 b6 23 	call	0x476c	; 0x476c <Print::print(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2744
    switch (errCode)
    // See PetitFS implementation for the codes
    {
      case 1: Serial.print(F("DISK_ERR")); break;
      case 2: Serial.print(F("NOT_READY")); break;
      case 3: Serial.print(F("NO_FILE")); break;
     b30:	68 ee       	ldi	r22, 0xE8	; 232
     b32:	70 e0       	ldi	r23, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2739
  if (errCode)
  {
    Serial.print(F("\r\nIOS: SD error "));
    Serial.print(errCode);
    Serial.print(" (");
    switch (errCode)
     b34:	c3 30       	cpi	r28, 0x03	; 3
     b36:	c1 f0       	breq	.+48     	; 0xb68 <printErrSD(unsigned char, unsigned char, char const*)+0x72>
     b38:	58 f4       	brcc	.+22     	; 0xb50 <printErrSD(unsigned char, unsigned char, char const*)+0x5a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2742
    // See PetitFS implementation for the codes
    {
      case 1: Serial.print(F("DISK_ERR")); break;
     b3a:	6a ef       	ldi	r22, 0xFA	; 250
     b3c:	70 e0       	ldi	r23, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2739
  if (errCode)
  {
    Serial.print(F("\r\nIOS: SD error "));
    Serial.print(errCode);
    Serial.print(" (");
    switch (errCode)
     b3e:	c1 30       	cpi	r28, 0x01	; 1
     b40:	99 f0       	breq	.+38     	; 0xb68 <printErrSD(unsigned char, unsigned char, char const*)+0x72>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2743
    // See PetitFS implementation for the codes
    {
      case 1: Serial.print(F("DISK_ERR")); break;
      case 2: Serial.print(F("NOT_READY")); break;
     b42:	60 ef       	ldi	r22, 0xF0	; 240
     b44:	70 e0       	ldi	r23, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2739
  if (errCode)
  {
    Serial.print(F("\r\nIOS: SD error "));
    Serial.print(errCode);
    Serial.print(" (");
    switch (errCode)
     b46:	c2 30       	cpi	r28, 0x02	; 2
     b48:	79 f0       	breq	.+30     	; 0xb68 <printErrSD(unsigned char, unsigned char, char const*)+0x72>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2748
      case 2: Serial.print(F("NOT_READY")); break;
      case 3: Serial.print(F("NO_FILE")); break;
      case 4: Serial.print(F("NOT_OPENED")); break;
      case 5: Serial.print(F("NOT_ENABLED")); break;
      case 6: Serial.print(F("NO_FILESYSTEM")); break;
      default: Serial.print(F("UNKNOWN")); 
     b4a:	6b eb       	ldi	r22, 0xBB	; 187
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	0c c0       	rjmp	.+24     	; 0xb68 <printErrSD(unsigned char, unsigned char, char const*)+0x72>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2746
    {
      case 1: Serial.print(F("DISK_ERR")); break;
      case 2: Serial.print(F("NOT_READY")); break;
      case 3: Serial.print(F("NO_FILE")); break;
      case 4: Serial.print(F("NOT_OPENED")); break;
      case 5: Serial.print(F("NOT_ENABLED")); break;
     b50:	61 ed       	ldi	r22, 0xD1	; 209
     b52:	70 e0       	ldi	r23, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2739
  if (errCode)
  {
    Serial.print(F("\r\nIOS: SD error "));
    Serial.print(errCode);
    Serial.print(" (");
    switch (errCode)
     b54:	c5 30       	cpi	r28, 0x05	; 5
     b56:	41 f0       	breq	.+16     	; 0xb68 <printErrSD(unsigned char, unsigned char, char const*)+0x72>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2745
    // See PetitFS implementation for the codes
    {
      case 1: Serial.print(F("DISK_ERR")); break;
      case 2: Serial.print(F("NOT_READY")); break;
      case 3: Serial.print(F("NO_FILE")); break;
      case 4: Serial.print(F("NOT_OPENED")); break;
     b58:	6d ed       	ldi	r22, 0xDD	; 221
     b5a:	70 e0       	ldi	r23, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2739
  if (errCode)
  {
    Serial.print(F("\r\nIOS: SD error "));
    Serial.print(errCode);
    Serial.print(" (");
    switch (errCode)
     b5c:	c5 30       	cpi	r28, 0x05	; 5
     b5e:	20 f0       	brcs	.+8      	; 0xb68 <printErrSD(unsigned char, unsigned char, char const*)+0x72>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2747
      case 1: Serial.print(F("DISK_ERR")); break;
      case 2: Serial.print(F("NOT_READY")); break;
      case 3: Serial.print(F("NO_FILE")); break;
      case 4: Serial.print(F("NOT_OPENED")); break;
      case 5: Serial.print(F("NOT_ENABLED")); break;
      case 6: Serial.print(F("NO_FILESYSTEM")); break;
     b60:	63 ec       	ldi	r22, 0xC3	; 195
     b62:	70 e0       	ldi	r23, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2739
  if (errCode)
  {
    Serial.print(F("\r\nIOS: SD error "));
    Serial.print(errCode);
    Serial.print(" (");
    switch (errCode)
     b64:	c6 30       	cpi	r28, 0x06	; 6
     b66:	89 f7       	brne	.-30     	; 0xb4a <printErrSD(unsigned char, unsigned char, char const*)+0x54>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2748
      case 2: Serial.print(F("NOT_READY")); break;
      case 3: Serial.print(F("NO_FILE")); break;
      case 4: Serial.print(F("NOT_OPENED")); break;
      case 5: Serial.print(F("NOT_ENABLED")); break;
      case 6: Serial.print(F("NO_FILESYSTEM")); break;
      default: Serial.print(F("UNKNOWN")); 
     b68:	8c e8       	ldi	r24, 0x8C	; 140
     b6a:	92 e0       	ldi	r25, 0x02	; 2
     b6c:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2750
    }
    Serial.print(F(" on "));
     b70:	66 eb       	ldi	r22, 0xB6	; 182
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	8c e8       	ldi	r24, 0x8C	; 140
     b76:	92 e0       	ldi	r25, 0x02	; 2
     b78:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2755
    switch (opType)
    {
      case 0: Serial.print(F("MOUNT")); break;
      case 1: Serial.print(F("OPEN")); break;
      case 2: Serial.print(F("READ")); break;
     b7c:	66 ea       	ldi	r22, 0xA6	; 166
     b7e:	70 e0       	ldi	r23, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2751
      case 5: Serial.print(F("NOT_ENABLED")); break;
      case 6: Serial.print(F("NO_FILESYSTEM")); break;
      default: Serial.print(F("UNKNOWN")); 
    }
    Serial.print(F(" on "));
    switch (opType)
     b80:	d2 30       	cpi	r29, 0x02	; 2
     b82:	a1 f0       	breq	.+40     	; 0xbac <printErrSD(unsigned char, unsigned char, char const*)+0xb6>
     b84:	58 f4       	brcc	.+22     	; 0xb9c <printErrSD(unsigned char, unsigned char, char const*)+0xa6>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2753
    {
      case 0: Serial.print(F("MOUNT")); break;
     b86:	60 eb       	ldi	r22, 0xB0	; 176
     b88:	70 e0       	ldi	r23, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2751
      case 5: Serial.print(F("NOT_ENABLED")); break;
      case 6: Serial.print(F("NO_FILESYSTEM")); break;
      default: Serial.print(F("UNKNOWN")); 
    }
    Serial.print(F(" on "));
    switch (opType)
     b8a:	dd 23       	and	r29, r29
     b8c:	79 f0       	breq	.+30     	; 0xbac <printErrSD(unsigned char, unsigned char, char const*)+0xb6>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2754
    {
      case 0: Serial.print(F("MOUNT")); break;
      case 1: Serial.print(F("OPEN")); break;
     b8e:	6b ea       	ldi	r22, 0xAB	; 171
     b90:	70 e0       	ldi	r23, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2751
      case 5: Serial.print(F("NOT_ENABLED")); break;
      case 6: Serial.print(F("NO_FILESYSTEM")); break;
      default: Serial.print(F("UNKNOWN")); 
    }
    Serial.print(F(" on "));
    switch (opType)
     b92:	d1 30       	cpi	r29, 0x01	; 1
     b94:	59 f0       	breq	.+22     	; 0xbac <printErrSD(unsigned char, unsigned char, char const*)+0xb6>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2758
      case 0: Serial.print(F("MOUNT")); break;
      case 1: Serial.print(F("OPEN")); break;
      case 2: Serial.print(F("READ")); break;
      case 3: Serial.print(F("WRITE")); break;
      case 4: Serial.print(F("SEEK")); break;
      default: Serial.print(F("UNKNOWN"));
     b96:	63 e9       	ldi	r22, 0x93	; 147
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	08 c0       	rjmp	.+16     	; 0xbac <printErrSD(unsigned char, unsigned char, char const*)+0xb6>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2756
    switch (opType)
    {
      case 0: Serial.print(F("MOUNT")); break;
      case 1: Serial.print(F("OPEN")); break;
      case 2: Serial.print(F("READ")); break;
      case 3: Serial.print(F("WRITE")); break;
     b9c:	60 ea       	ldi	r22, 0xA0	; 160
     b9e:	70 e0       	ldi	r23, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2751
      case 5: Serial.print(F("NOT_ENABLED")); break;
      case 6: Serial.print(F("NO_FILESYSTEM")); break;
      default: Serial.print(F("UNKNOWN")); 
    }
    Serial.print(F(" on "));
    switch (opType)
     ba0:	d3 30       	cpi	r29, 0x03	; 3
     ba2:	21 f0       	breq	.+8      	; 0xbac <printErrSD(unsigned char, unsigned char, char const*)+0xb6>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2757
    {
      case 0: Serial.print(F("MOUNT")); break;
      case 1: Serial.print(F("OPEN")); break;
      case 2: Serial.print(F("READ")); break;
      case 3: Serial.print(F("WRITE")); break;
      case 4: Serial.print(F("SEEK")); break;
     ba4:	6b e9       	ldi	r22, 0x9B	; 155
     ba6:	70 e0       	ldi	r23, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2751
      case 5: Serial.print(F("NOT_ENABLED")); break;
      case 6: Serial.print(F("NO_FILESYSTEM")); break;
      default: Serial.print(F("UNKNOWN")); 
    }
    Serial.print(F(" on "));
    switch (opType)
     ba8:	d4 30       	cpi	r29, 0x04	; 4
     baa:	a9 f7       	brne	.-22     	; 0xb96 <printErrSD(unsigned char, unsigned char, char const*)+0xa0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2758
      case 0: Serial.print(F("MOUNT")); break;
      case 1: Serial.print(F("OPEN")); break;
      case 2: Serial.print(F("READ")); break;
      case 3: Serial.print(F("WRITE")); break;
      case 4: Serial.print(F("SEEK")); break;
      default: Serial.print(F("UNKNOWN"));
     bac:	8c e8       	ldi	r24, 0x8C	; 140
     bae:	92 e0       	ldi	r25, 0x02	; 2
     bb0:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2760
    }
    Serial.print(F(" operation"));
     bb4:	68 e8       	ldi	r22, 0x88	; 136
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	8c e8       	ldi	r24, 0x8C	; 140
     bba:	92 e0       	ldi	r25, 0x02	; 2
     bbc:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2761
    if (fileName)
     bc0:	01 15       	cp	r16, r1
     bc2:	11 05       	cpc	r17, r1
     bc4:	59 f0       	breq	.+22     	; 0xbdc <printErrSD(unsigned char, unsigned char, char const*)+0xe6>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2764
    // Not a NULL pointer, so print file name too
    {
      Serial.print(F(" - File: "));
     bc6:	6e e7       	ldi	r22, 0x7E	; 126
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	8c e8       	ldi	r24, 0x8C	; 140
     bcc:	92 e0       	ldi	r25, 0x02	; 2
     bce:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2765
      Serial.print(fileName);
     bd2:	b8 01       	movw	r22, r16
     bd4:	8c e8       	ldi	r24, 0x8C	; 140
     bd6:	92 e0       	ldi	r25, 0x02	; 2
     bd8:	0e 94 b6 23 	call	0x476c	; 0x476c <Print::print(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2767
    }
    Serial.println(")");
     bdc:	65 e8       	ldi	r22, 0x85	; 133
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	8c e8       	ldi	r24, 0x8C	; 140
     be2:	92 e0       	ldi	r25, 0x02	; 2
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2769
  }
}
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2767
    // Not a NULL pointer, so print file name too
    {
      Serial.print(F(" - File: "));
      Serial.print(fileName);
    }
    Serial.println(")");
     bec:	0c 94 db 23 	jmp	0x47b6	; 0x47b6 <Print::println(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2769
  }
}
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	08 95       	ret

00000bfa <printOsName(unsigned char)>:
_Z11printOsNameh():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2786
// ------------------------------------------------------------------------------

void printOsName(byte currentDiskSet)
// Print the current Disk Set number and the OS name, if it is defined.
// The OS name is inside the file defined in DS_OSNAME
{
     bfa:	cf 93       	push	r28
     bfc:	c8 2f       	mov	r28, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2787
  Serial.print("Disk Set ");
     bfe:	67 e8       	ldi	r22, 0x87	; 135
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	8c e8       	ldi	r24, 0x8C	; 140
     c04:	92 e0       	ldi	r25, 0x02	; 2
     c06:	0e 94 b6 23 	call	0x476c	; 0x476c <Print::print(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2788
  Serial.print(currentDiskSet);
     c0a:	4a e0       	ldi	r20, 0x0A	; 10
     c0c:	50 e0       	ldi	r21, 0x00	; 0
     c0e:	6c 2f       	mov	r22, r28
     c10:	8c e8       	ldi	r24, 0x8C	; 140
     c12:	92 e0       	ldi	r25, 0x02	; 2
     c14:	0e 94 ac 24 	call	0x4958	; 0x4958 <Print::print(unsigned char, int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2789
  OsName[2] = currentDiskSet + 48;    // Set the Disk Set
     c18:	c0 5d       	subi	r28, 0xD0	; 208
     c1a:	c0 93 69 00 	sts	0x0069, r28	; 0x800069 <OsName+0x2>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2790
  openSD(OsName);                     // Open file with the OS name
     c1e:	87 e6       	ldi	r24, 0x67	; 103
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 32 05 	call	0xa64	; 0xa64 <openSD(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2791
  readSD(bufferSD, &numReadBytes);    // Read the OS name
     c26:	63 e6       	ldi	r22, 0x63	; 99
     c28:	71 e0       	ldi	r23, 0x01	; 1
     c2a:	88 e6       	ldi	r24, 0x68	; 104
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	0e 94 35 05 	call	0xa6a	; 0xa6a <readSD(void*, unsigned char*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2792
  if (numReadBytes > 0)
     c32:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <numReadBytes>
     c36:	88 23       	and	r24, r24
     c38:	99 f0       	breq	.+38     	; 0xc60 <printOsName(unsigned char)+0x66>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2795
  // Print the OS name
  {
    Serial.print(" (");
     c3a:	62 e8       	ldi	r22, 0x82	; 130
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	8c e8       	ldi	r24, 0x8C	; 140
     c40:	92 e0       	ldi	r25, 0x02	; 2
     c42:	0e 94 b6 23 	call	0x476c	; 0x476c <Print::print(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2796
    Serial.print((const char *)bufferSD);
     c46:	68 e6       	ldi	r22, 0x68	; 104
     c48:	71 e0       	ldi	r23, 0x01	; 1
     c4a:	8c e8       	ldi	r24, 0x8C	; 140
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	0e 94 b6 23 	call	0x476c	; 0x476c <Print::print(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2797
    Serial.print(")");
     c52:	65 e8       	ldi	r22, 0x85	; 133
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	8c e8       	ldi	r24, 0x8C	; 140
     c58:	92 e0       	ldi	r25, 0x02	; 2
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2799
  }
}
     c5a:	cf 91       	pop	r28
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2797
  if (numReadBytes > 0)
  // Print the OS name
  {
    Serial.print(" (");
    Serial.print((const char *)bufferSD);
    Serial.print(")");
     c5c:	0c 94 b6 23 	jmp	0x476c	; 0x476c <Print::print(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2799
  }
}
     c60:	cf 91       	pop	r28
     c62:	08 95       	ret

00000c64 <_GLOBAL__sub_I_ioAddress>:
_GLOBAL__sub_I_ioAddress():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:228

const byte    LD_HL        =  0x36;       // Z80 instruction: LD(HL), n
const byte    INC_HL       =  0x23;       // Z80 instruction: INC HL
const byte    LD_HLnn      =  0x21;       // Z80 instruction: LD HL, nn
const byte    JP_nn        =  0xC3;       // Z80 instruction: JP nn
const String  compTimeStr  = __TIME__;    // Compile timestamp string
     c64:	61 e9       	ldi	r22, 0x91	; 145
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	8b ed       	ldi	r24, 0xDB	; 219
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	0e 94 25 25 	call	0x4a4a	; 0x4a4a <String::String(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:229
const String  compDateStr  = __DATE__;    // Compile datestamp string
     c70:	6a e9       	ldi	r22, 0x9A	; 154
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	85 ed       	ldi	r24, 0xD5	; 213
     c76:	91 e0       	ldi	r25, 0x01	; 1
     c78:	0c 94 25 25 	jmp	0x4a4a	; 0x4a4a <String::String(char const*)>

00000c7c <_GLOBAL__sub_D_ioAddress>:
_GLOBAL__sub_D_ioAddress():
     c7c:	85 ed       	ldi	r24, 0xD5	; 213
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	0e 94 b3 24 	call	0x4966	; 0x4966 <String::~String()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:228

const byte    LD_HL        =  0x36;       // Z80 instruction: LD(HL), n
const byte    INC_HL       =  0x23;       // Z80 instruction: INC HL
const byte    LD_HLnn      =  0x21;       // Z80 instruction: LD HL, nn
const byte    JP_nn        =  0xC3;       // Z80 instruction: JP nn
const String  compTimeStr  = __TIME__;    // Compile timestamp string
     c84:	8b ed       	ldi	r24, 0xDB	; 219
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	0c 94 b3 24 	jmp	0x4966	; 0x4966 <String::~String()>

00000c8c <serialEvent()>:
_Z11serialEventv():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2062

void serialEvent()
// Set INT_ to ACTIVE if there are received chars from serial to read and if the interrupt generation is enabled
// and a previous serial Rx was done by the Z80 CPU
{
  if ((Serial.available() > 0) && (Z80IntRx == 1) && (RxDoneFlag))
     c8c:	8c e8       	ldi	r24, 0x8C	; 140
     c8e:	92 e0       	ldi	r25, 0x02	; 2
     c90:	0e 94 98 21 	call	0x4330	; 0x4330 <HardwareSerial::available()>
     c94:	18 16       	cp	r1, r24
     c96:	19 06       	cpc	r1, r25
     c98:	9c f4       	brge	.+38     	; 0xcc0 <serialEvent()+0x34>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2062 (discriminator 1)
     c9a:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <Z80IntRx>
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	79 f4       	brne	.+30     	; 0xcc0 <serialEvent()+0x34>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2062 (discriminator 3)
     ca2:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <RxDoneFlag>
     ca6:	88 23       	and	r24, r24
     ca8:	59 f0       	breq	.+22     	; 0xcc0 <serialEvent()+0x34>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2064
  {
    digitalWrite(INT_, LOW);
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2065
    irqStatus = irqStatus | B00000001;            // Set the serial Rx IRQ status bit (see SYSIRQ Opcode)
     cb2:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <irqStatus>
     cb6:	81 60       	ori	r24, 0x01	; 1
     cb8:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <irqStatus>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2066
    RxDoneFlag = 0;
     cbc:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <RxDoneFlag>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2068
  }
}
     cc0:	08 95       	ret

00000cc2 <WaitAndBlink(baudRecCheck)>:
_Z12WaitAndBlink12baudRecCheck():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2080
// event).
// In this happens the Baud Recovery procedure is done if the current serial speed is different from the default 
// value (115200).
// When the Baud Recovery procedure is executed the serial port speed is set at the default value (115200) and both
// the USER and IOS leds blink quickly. The default serial port speed will be effective after the next reset.
{
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2085
  byte                  UserKeyLongPressed = 1;   // Flag for the "User key long pressed" event
  static unsigned long  timeStamp1;               // Timestamps
  unsigned long         timeStamp2;
  
  timeStamp2 = millis();
     cd0:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <millis>
     cd4:	6b 01       	movw	r12, r22
     cd6:	7c 01       	movw	r14, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2081
// In this happens the Baud Recovery procedure is done if the current serial speed is different from the default 
// value (115200).
// When the Baud Recovery procedure is executed the serial port speed is set at the default value (115200) and both
// the USER and IOS leds blink quickly. The default serial port speed will be effective after the next reset.
{
  byte                  UserKeyLongPressed = 1;   // Flag for the "User key long pressed" event
     cd8:	c1 e0       	ldi	r28, 0x01	; 1
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2086
  static unsigned long  timeStamp1;               // Timestamps
  unsigned long         timeStamp2;
  
  timeStamp2 = millis();
  while (!Serial.available())
     cda:	8c e8       	ldi	r24, 0x8C	; 140
     cdc:	92 e0       	ldi	r25, 0x02	; 2
     cde:	0e 94 98 21 	call	0x4330	; 0x4330 <HardwareSerial::available()>
     ce2:	89 2b       	or	r24, r25
     ce4:	09 f0       	breq	.+2      	; 0xce8 <WaitAndBlink(baudRecCheck)+0x26>
     ce6:	9d c0       	rjmp	.+314    	; 0xe22 <WaitAndBlink(baudRecCheck)+0x160>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2088
  {
    if ((millis() - timeStamp2) < 3000)
     ce8:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <millis>
     cec:	6c 19       	sub	r22, r12
     cee:	7d 09       	sbc	r23, r13
     cf0:	8e 09       	sbc	r24, r14
     cf2:	9f 09       	sbc	r25, r15
     cf4:	68 3b       	cpi	r22, 0xB8	; 184
     cf6:	7b 40       	sbci	r23, 0x0B	; 11
     cf8:	81 05       	cpc	r24, r1
     cfa:	91 05       	cpc	r25, r1
     cfc:	a0 f4       	brcc	.+40     	; 0xd26 <WaitAndBlink(baudRecCheck)+0x64>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2091
    // Check is User key remains pressed for 3s more
    {
      pinMode(USER, INPUT_PULLUP);                // Set read mode for USER key
     cfe:	62 e0       	ldi	r22, 0x02	; 2
     d00:	8d e0       	ldi	r24, 0x0D	; 13
     d02:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2092
      if (digitalRead(USER)) UserKeyLongPressed = 0;  // Clear the flag if USER key was released at least once before 3s
     d06:	8d e0       	ldi	r24, 0x0D	; 13
     d08:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <digitalRead>
     d0c:	89 2b       	or	r24, r25
     d0e:	09 f0       	breq	.+2      	; 0xd12 <WaitAndBlink(baudRecCheck)+0x50>
     d10:	c0 e0       	ldi	r28, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2093
      pinMode(USER, OUTPUT);                      // Set write mode for USER led
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	8d e0       	ldi	r24, 0x0D	; 13
     d16:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2094
      delay(10);                                  // Just to dimm USER led up to fade off
     d1a:	6a e0       	ldi	r22, 0x0A	; 10
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 41 26 	call	0x4c82	; 0x4c82 <delay>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2096
    }
    if ((millis() - timeStamp1) > 300)
     d26:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <millis>
     d2a:	00 91 5a 01 	lds	r16, 0x015A	; 0x80015a <__data_end>
     d2e:	10 91 5b 01 	lds	r17, 0x015B	; 0x80015b <__data_end+0x1>
     d32:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <__data_end+0x2>
     d36:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <__data_end+0x3>
     d3a:	60 1b       	sub	r22, r16
     d3c:	71 0b       	sbc	r23, r17
     d3e:	82 0b       	sbc	r24, r18
     d40:	93 0b       	sbc	r25, r19
     d42:	6d 32       	cpi	r22, 0x2D	; 45
     d44:	71 40       	sbci	r23, 0x01	; 1
     d46:	81 05       	cpc	r24, r1
     d48:	91 05       	cpc	r25, r1
     d4a:	a0 f0       	brcs	.+40     	; 0xd74 <WaitAndBlink(baudRecCheck)+0xb2>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2099
    // Blink IOS led
    {
      digitalWrite(LED_IOS,!digitalRead(LED_IOS));
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <digitalRead>
     d52:	61 e0       	ldi	r22, 0x01	; 1
     d54:	89 2b       	or	r24, r25
     d56:	09 f0       	breq	.+2      	; 0xd5a <WaitAndBlink(baudRecCheck)+0x98>
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2100
      timeStamp1 = millis();
     d60:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <millis>
     d64:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <__data_end>
     d68:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <__data_end+0x1>
     d6c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end+0x2>
     d70:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <__data_end+0x3>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2102
    }
    if (((millis() - timeStamp2) > 3000) && (UserKeyLongPressed) && (baudRecSwitch = CHECK) && (EEPROM.read(serBaudAddr) != 9))
     d74:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <millis>
     d78:	6c 19       	sub	r22, r12
     d7a:	7d 09       	sbc	r23, r13
     d7c:	8e 09       	sbc	r24, r14
     d7e:	9f 09       	sbc	r25, r15
     d80:	69 3b       	cpi	r22, 0xB9	; 185
     d82:	7b 40       	sbci	r23, 0x0B	; 11
     d84:	81 05       	cpc	r24, r1
     d86:	91 05       	cpc	r25, r1
     d88:	08 f4       	brcc	.+2      	; 0xd8c <WaitAndBlink(baudRecCheck)+0xca>
     d8a:	a7 cf       	rjmp	.-178    	; 0xcda <WaitAndBlink(baudRecCheck)+0x18>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2102 (discriminator 1)
     d8c:	cc 23       	and	r28, r28
     d8e:	09 f4       	brne	.+2      	; 0xd92 <WaitAndBlink(baudRecCheck)+0xd0>
     d90:	a4 cf       	rjmp	.-184    	; 0xcda <WaitAndBlink(baudRecCheck)+0x18>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2102 (discriminator 3)
     d92:	8f e0       	ldi	r24, 0x0F	; 15
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 77 04 	call	0x8ee	; 0x8ee <EEPROMClass::read(int) [clone .isra.1]>
     d9a:	89 30       	cpi	r24, 0x09	; 9
     d9c:	09 f4       	brne	.+2      	; 0xda0 <WaitAndBlink(baudRecCheck)+0xde>
     d9e:	9d cf       	rjmp	.-198    	; 0xcda <WaitAndBlink(baudRecCheck)+0x18>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2108
    // Do the Baud Recovery procedure.
    // The User key was pressed for at least 3s and the serial port speed is different from default value (115200),
    // so set the default baud rate (115200) for the serial port and wait for a reboot while both IOS and USER leds 
    // blink quickly.
    {
      digitalWrite(LED_IOS,LOW);
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2109
      EEPROM.update(serBaudAddr, 9);              // Set the default baud rate (115200)
     da8:	69 e0       	ldi	r22, 0x09	; 9
     daa:	8f e0       	ldi	r24, 0x0F	; 15
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2110
      Serial.println(F("\r\n\nIOS: Baud recovery done - Please reboot now!"));
     db2:	6f e8       	ldi	r22, 0x8F	; 143
     db4:	72 e0       	ldi	r23, 0x02	; 2
     db6:	8c e8       	ldi	r24, 0x8C	; 140
     db8:	92 e0       	ldi	r25, 0x02	; 2
     dba:	0e 94 c9 23 	call	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2113
      while(1)
      {
        if ((millis() - timeStamp1) > 100)
     dbe:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <millis>
     dc2:	c0 90 5a 01 	lds	r12, 0x015A	; 0x80015a <__data_end>
     dc6:	d0 90 5b 01 	lds	r13, 0x015B	; 0x80015b <__data_end+0x1>
     dca:	e0 90 5c 01 	lds	r14, 0x015C	; 0x80015c <__data_end+0x2>
     dce:	f0 90 5d 01 	lds	r15, 0x015D	; 0x80015d <__data_end+0x3>
     dd2:	6c 19       	sub	r22, r12
     dd4:	7d 09       	sbc	r23, r13
     dd6:	8e 09       	sbc	r24, r14
     dd8:	9f 09       	sbc	r25, r15
     dda:	65 36       	cpi	r22, 0x65	; 101
     ddc:	71 05       	cpc	r23, r1
     dde:	81 05       	cpc	r24, r1
     de0:	91 05       	cpc	r25, r1
     de2:	68 f3       	brcs	.-38     	; 0xdbe <WaitAndBlink(baudRecCheck)+0xfc>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2115
        {
          digitalWrite(LED_IOS,!digitalRead(LED_IOS));
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <digitalRead>
     dea:	61 e0       	ldi	r22, 0x01	; 1
     dec:	89 2b       	or	r24, r25
     dee:	09 f0       	breq	.+2      	; 0xdf2 <WaitAndBlink(baudRecCheck)+0x130>
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2116
          digitalWrite(USER,!digitalRead(USER));
     df8:	8d e0       	ldi	r24, 0x0D	; 13
     dfa:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <digitalRead>
     dfe:	61 e0       	ldi	r22, 0x01	; 1
     e00:	89 2b       	or	r24, r25
     e02:	09 f0       	breq	.+2      	; 0xe06 <WaitAndBlink(baudRecCheck)+0x144>
     e04:	60 e0       	ldi	r22, 0x00	; 0
     e06:	8d e0       	ldi	r24, 0x0D	; 13
     e08:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2117
          timeStamp1 = millis();
     e0c:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <millis>
     e10:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <__data_end>
     e14:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <__data_end+0x1>
     e18:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end+0x2>
     e1c:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <__data_end+0x3>
     e20:	ce cf       	rjmp	.-100    	; 0xdbe <WaitAndBlink(baudRecCheck)+0xfc>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2122
        }
      }
    }
  }
}
     e22:	cf 91       	pop	r28
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	ff 90       	pop	r15
     e2a:	ef 90       	pop	r14
     e2c:	df 90       	pop	r13
     e2e:	cf 90       	pop	r12
     e30:	08 95       	ret

00000e32 <waitKey()>:
_Z7waitKeyv():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2776 (discriminator 2)
// ------------------------------------------------------------------------------

void waitKey()
// Wait a key to continue
{
  while (Serial.available() > 0) Serial.read();   // Flush serial Rx buffer
     e32:	8c e8       	ldi	r24, 0x8C	; 140
     e34:	92 e0       	ldi	r25, 0x02	; 2
     e36:	0e 94 98 21 	call	0x4330	; 0x4330 <HardwareSerial::available()>
     e3a:	18 16       	cp	r1, r24
     e3c:	19 06       	cpc	r1, r25
     e3e:	2c f4       	brge	.+10     	; 0xe4a <waitKey()+0x18>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2776 (discriminator 1)
     e40:	8c e8       	ldi	r24, 0x8C	; 140
     e42:	92 e0       	ldi	r25, 0x02	; 2
     e44:	0e 94 b2 21 	call	0x4364	; 0x4364 <HardwareSerial::read()>
     e48:	f4 cf       	rjmp	.-24     	; 0xe32 <waitKey()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2777
  Serial.println(F("IOS: Check SD and press a key to repeat\r\n"));
     e4a:	64 e5       	ldi	r22, 0x54	; 84
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	8c e8       	ldi	r24, 0x8C	; 140
     e50:	92 e0       	ldi	r25, 0x02	; 2
     e52:	0e 94 c9 23 	call	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2778
  while(Serial.available() < 1);
     e56:	8c e8       	ldi	r24, 0x8C	; 140
     e58:	92 e0       	ldi	r25, 0x02	; 2
     e5a:	0e 94 98 21 	call	0x4330	; 0x4330 <HardwareSerial::available()>
     e5e:	18 16       	cp	r1, r24
     e60:	19 06       	cpc	r1, r25
     e62:	cc f7       	brge	.-14     	; 0xe56 <waitKey()+0x24>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2779
}
     e64:	08 95       	ret

00000e66 <writeRTC(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_Z8writeRTChhhhhh():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2195

// ------------------------------------------------------------------------------

void writeRTC(byte second, byte minute, byte hour, byte day, byte month, byte year)
// Write given date/time binary values to the DS3231 RTC
{
     e66:	ef 92       	push	r14
     e68:	0f 93       	push	r16
     e6a:	cf 93       	push	r28
     e6c:	c2 2f       	mov	r28, r18
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2196
  Wire.beginTransmission(DS3231_RTC);
     e6e:	68 e6       	ldi	r22, 0x68	; 104
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	86 ee       	ldi	r24, 0xE6	; 230
     e74:	91 e0       	ldi	r25, 0x01	; 1
     e76:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2197
  Wire.write(DS3231_SECRG);                       // Set the DS3231 Seconds Register
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	86 ee       	ldi	r24, 0xE6	; 230
     e80:	91 e0       	ldi	r25, 0x01	; 1
     e82:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2198
  Wire.write(decToBcd(seconds));
     e86:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <seconds>
     e8a:	0e 94 86 04 	call	0x90c	; 0x90c <decToBcd(unsigned char)>
     e8e:	68 2f       	mov	r22, r24
     e90:	86 ee       	ldi	r24, 0xE6	; 230
     e92:	91 e0       	ldi	r25, 0x01	; 1
     e94:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <TwoWire::write(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2199
  Wire.write(decToBcd(minutes));
     e98:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <minutes>
     e9c:	0e 94 86 04 	call	0x90c	; 0x90c <decToBcd(unsigned char)>
     ea0:	68 2f       	mov	r22, r24
     ea2:	86 ee       	ldi	r24, 0xE6	; 230
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <TwoWire::write(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2200
  Wire.write(decToBcd(hours));
     eaa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <hours>
     eae:	0e 94 86 04 	call	0x90c	; 0x90c <decToBcd(unsigned char)>
     eb2:	68 2f       	mov	r22, r24
     eb4:	86 ee       	ldi	r24, 0xE6	; 230
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <TwoWire::write(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2201
  Wire.write(1);                                  // Day of week not used (always set to 1 = Sunday)
     ebc:	61 e0       	ldi	r22, 0x01	; 1
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	86 ee       	ldi	r24, 0xE6	; 230
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2202
  Wire.write(decToBcd(day));
     ec8:	8c 2f       	mov	r24, r28
     eca:	0e 94 86 04 	call	0x90c	; 0x90c <decToBcd(unsigned char)>
     ece:	68 2f       	mov	r22, r24
     ed0:	86 ee       	ldi	r24, 0xE6	; 230
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <TwoWire::write(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2203
  Wire.write(decToBcd(month));
     ed8:	80 2f       	mov	r24, r16
     eda:	0e 94 86 04 	call	0x90c	; 0x90c <decToBcd(unsigned char)>
     ede:	68 2f       	mov	r22, r24
     ee0:	86 ee       	ldi	r24, 0xE6	; 230
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <TwoWire::write(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2204
  Wire.write(decToBcd(year));
     ee8:	8e 2d       	mov	r24, r14
     eea:	0e 94 86 04 	call	0x90c	; 0x90c <decToBcd(unsigned char)>
     eee:	68 2f       	mov	r22, r24
     ef0:	86 ee       	ldi	r24, 0xE6	; 230
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <TwoWire::write(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2205
  Wire.endTransmission();
     ef8:	86 ee       	ldi	r24, 0xE6	; 230
     efa:	91 e0       	ldi	r25, 0x01	; 1
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2206
}
     efc:	cf 91       	pop	r28
     efe:	0f 91       	pop	r16
     f00:	ef 90       	pop	r14
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2205
  Wire.write(decToBcd(hours));
  Wire.write(1);                                  // Day of week not used (always set to 1 = Sunday)
  Wire.write(decToBcd(day));
  Wire.write(decToBcd(month));
  Wire.write(decToBcd(year));
  Wire.endTransmission();
     f02:	0c 94 82 1f 	jmp	0x3f04	; 0x3f04 <TwoWire::endTransmission()>

00000f06 <readRTC(unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>:
_Z7readRTCPhS_S_S_S_S_S_():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2173

// ------------------------------------------------------------------------------

void readRTC(byte *second, byte *minute, byte *hour, byte *day, byte *month, byte *year, byte *tempC)
// Read current date/time binary values and the temprerature (2 complement) from the DS3231 RTC
{
     f06:	6f 92       	push	r6
     f08:	7f 92       	push	r7
     f0a:	8f 92       	push	r8
     f0c:	9f 92       	push	r9
     f0e:	af 92       	push	r10
     f10:	bf 92       	push	r11
     f12:	cf 92       	push	r12
     f14:	df 92       	push	r13
     f16:	ef 92       	push	r14
     f18:	ff 92       	push	r15
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	4c 01       	movw	r8, r24
     f24:	5b 01       	movw	r10, r22
     f26:	ea 01       	movw	r28, r20
     f28:	39 01       	movw	r6, r18
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2175
  byte    i;
  Wire.beginTransmission(DS3231_RTC);
     f2a:	68 e6       	ldi	r22, 0x68	; 104
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	86 ee       	ldi	r24, 0xE6	; 230
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2176
  Wire.write(DS3231_SECRG);                       // Set the DS3231 Seconds Register
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	86 ee       	ldi	r24, 0xE6	; 230
     f3c:	91 e0       	ldi	r25, 0x01	; 1
     f3e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2177
  Wire.endTransmission();
     f42:	86 ee       	ldi	r24, 0xE6	; 230
     f44:	91 e0       	ldi	r25, 0x01	; 1
     f46:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <TwoWire::endTransmission()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2179
  // Read from RTC and convert to binary
  Wire.requestFrom(DS3231_RTC, 18);
     f4a:	42 e1       	ldi	r20, 0x12	; 18
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	68 e6       	ldi	r22, 0x68	; 104
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	86 ee       	ldi	r24, 0xE6	; 230
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <TwoWire::requestFrom(int, int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2180
  *second = bcdToDec(Wire.read() & 0x7f);
     f5a:	86 ee       	ldi	r24, 0xE6	; 230
     f5c:	91 e0       	ldi	r25, 0x01	; 1
     f5e:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <TwoWire::read()>
     f62:	8f 77       	andi	r24, 0x7F	; 127
     f64:	0e 94 8d 04 	call	0x91a	; 0x91a <bcdToDec(unsigned char)>
     f68:	f4 01       	movw	r30, r8
     f6a:	80 83       	st	Z, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2181
  *minute = bcdToDec(Wire.read());
     f6c:	86 ee       	ldi	r24, 0xE6	; 230
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <TwoWire::read()>
     f74:	0e 94 8d 04 	call	0x91a	; 0x91a <bcdToDec(unsigned char)>
     f78:	f5 01       	movw	r30, r10
     f7a:	80 83       	st	Z, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2182
  *hour = bcdToDec(Wire.read() & 0x3f);
     f7c:	86 ee       	ldi	r24, 0xE6	; 230
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <TwoWire::read()>
     f84:	8f 73       	andi	r24, 0x3F	; 63
     f86:	0e 94 8d 04 	call	0x91a	; 0x91a <bcdToDec(unsigned char)>
     f8a:	88 83       	st	Y, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2183
  Wire.read();                                    // Jump over the DoW
     f8c:	86 ee       	ldi	r24, 0xE6	; 230
     f8e:	91 e0       	ldi	r25, 0x01	; 1
     f90:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <TwoWire::read()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2184
  *day = bcdToDec(Wire.read());
     f94:	86 ee       	ldi	r24, 0xE6	; 230
     f96:	91 e0       	ldi	r25, 0x01	; 1
     f98:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <TwoWire::read()>
     f9c:	0e 94 8d 04 	call	0x91a	; 0x91a <bcdToDec(unsigned char)>
     fa0:	f3 01       	movw	r30, r6
     fa2:	80 83       	st	Z, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2185
  *month = bcdToDec(Wire.read());
     fa4:	86 ee       	ldi	r24, 0xE6	; 230
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <TwoWire::read()>
     fac:	0e 94 8d 04 	call	0x91a	; 0x91a <bcdToDec(unsigned char)>
     fb0:	f8 01       	movw	r30, r16
     fb2:	80 83       	st	Z, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2186
  *year = bcdToDec(Wire.read());
     fb4:	86 ee       	ldi	r24, 0xE6	; 230
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <TwoWire::read()>
     fbc:	0e 94 8d 04 	call	0x91a	; 0x91a <bcdToDec(unsigned char)>
     fc0:	f7 01       	movw	r30, r14
     fc2:	80 83       	st	Z, r24
     fc4:	ca e0       	ldi	r28, 0x0A	; 10
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2187 (discriminator 2)
  for (i = 0; i < 10; i++) Wire.read();           // Jump over 10 registers
     fc6:	86 ee       	ldi	r24, 0xE6	; 230
     fc8:	91 e0       	ldi	r25, 0x01	; 1
     fca:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <TwoWire::read()>
     fce:	c1 50       	subi	r28, 0x01	; 1
     fd0:	d1 f7       	brne	.-12     	; 0xfc6 <readRTC(unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)+0xc0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2188
  *tempC = Wire.read();
     fd2:	86 ee       	ldi	r24, 0xE6	; 230
     fd4:	91 e0       	ldi	r25, 0x01	; 1
     fd6:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <TwoWire::read()>
     fda:	f6 01       	movw	r30, r12
     fdc:	80 83       	st	Z, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2189
}
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	ff 90       	pop	r15
     fe8:	ef 90       	pop	r14
     fea:	df 90       	pop	r13
     fec:	cf 90       	pop	r12
     fee:	bf 90       	pop	r11
     ff0:	af 90       	pop	r10
     ff2:	9f 90       	pop	r9
     ff4:	8f 90       	pop	r8
     ff6:	7f 90       	pop	r7
     ff8:	6f 90       	pop	r6
     ffa:	08 95       	ret

00000ffc <printDateTime(unsigned char)>:
_Z13printDateTimeh():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2295
// Print to serial the current date/time from the global variables.
//
// Flag readSourceFlag [0..1] usage:
//    If readSourceFlag = 0 the RTC read is not done
//    If readSourceFlag = 1 the RTC read is done (global variables are updated)
{
     ffc:	cf 92       	push	r12
     ffe:	df 92       	push	r13
    1000:	ef 92       	push	r14
    1002:	ff 92       	push	r15
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2296
  if (readSourceFlag) readRTC(&seconds, &minutes, &hours, &day,  &month,  &year, &tempC);
    1008:	88 23       	and	r24, r24
    100a:	a1 f0       	breq	.+40     	; 0x1034 <printDateTime(unsigned char)+0x38>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2296 (discriminator 1)
    100c:	82 eb       	ldi	r24, 0xB2	; 178
    100e:	c8 2e       	mov	r12, r24
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	d8 2e       	mov	r13, r24
    1014:	93 eb       	ldi	r25, 0xB3	; 179
    1016:	e9 2e       	mov	r14, r25
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	f9 2e       	mov	r15, r25
    101c:	04 eb       	ldi	r16, 0xB4	; 180
    101e:	11 e0       	ldi	r17, 0x01	; 1
    1020:	25 eb       	ldi	r18, 0xB5	; 181
    1022:	31 e0       	ldi	r19, 0x01	; 1
    1024:	46 eb       	ldi	r20, 0xB6	; 182
    1026:	51 e0       	ldi	r21, 0x01	; 1
    1028:	67 eb       	ldi	r22, 0xB7	; 183
    102a:	71 e0       	ldi	r23, 0x01	; 1
    102c:	88 eb       	ldi	r24, 0xB8	; 184
    102e:	91 e0       	ldi	r25, 0x01	; 1
    1030:	0e 94 83 07 	call	0xf06	; 0xf06 <readRTC(unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2297
  print2digit(day);
    1034:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <day>
    1038:	0e 94 96 04 	call	0x92c	; 0x92c <print2digit(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2298
  Serial.print("/");
    103c:	66 ea       	ldi	r22, 0xA6	; 166
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	8c e8       	ldi	r24, 0x8C	; 140
    1042:	92 e0       	ldi	r25, 0x02	; 2
    1044:	0e 94 b6 23 	call	0x476c	; 0x476c <Print::print(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2299
  print2digit(month);
    1048:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <month>
    104c:	0e 94 96 04 	call	0x92c	; 0x92c <print2digit(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2300
  Serial.print("/");
    1050:	66 ea       	ldi	r22, 0xA6	; 166
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	8c e8       	ldi	r24, 0x8C	; 140
    1056:	92 e0       	ldi	r25, 0x02	; 2
    1058:	0e 94 b6 23 	call	0x476c	; 0x476c <Print::print(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2301
  print2digit(year);
    105c:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <year>
    1060:	0e 94 96 04 	call	0x92c	; 0x92c <print2digit(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2302
  Serial.print(" ");
    1064:	6f e8       	ldi	r22, 0x8F	; 143
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	8c e8       	ldi	r24, 0x8C	; 140
    106a:	92 e0       	ldi	r25, 0x02	; 2
    106c:	0e 94 b6 23 	call	0x476c	; 0x476c <Print::print(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2303
  print2digit(hours);
    1070:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <hours>
    1074:	0e 94 96 04 	call	0x92c	; 0x92c <print2digit(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2304
  Serial.print(":");
    1078:	68 ea       	ldi	r22, 0xA8	; 168
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	8c e8       	ldi	r24, 0x8C	; 140
    107e:	92 e0       	ldi	r25, 0x02	; 2
    1080:	0e 94 b6 23 	call	0x476c	; 0x476c <Print::print(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2305
  print2digit(minutes);
    1084:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <minutes>
    1088:	0e 94 96 04 	call	0x92c	; 0x92c <print2digit(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2306
  Serial.print(":");
    108c:	68 ea       	ldi	r22, 0xA8	; 168
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	8c e8       	ldi	r24, 0x8C	; 140
    1092:	92 e0       	ldi	r25, 0x02	; 2
    1094:	0e 94 b6 23 	call	0x476c	; 0x476c <Print::print(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2307
  print2digit(seconds);
    1098:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <seconds>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2308
}
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	ff 90       	pop	r15
    10a2:	ef 90       	pop	r14
    10a4:	df 90       	pop	r13
    10a6:	cf 90       	pop	r12
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2307
  Serial.print(" ");
  print2digit(hours);
  Serial.print(":");
  print2digit(minutes);
  Serial.print(":");
  print2digit(seconds);
    10a8:	0c 94 96 04 	jmp	0x92c	; 0x92c <print2digit(unsigned char)>

000010ac <ChangeRTC()>:
_Z9ChangeRTCv():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2334

// ------------------------------------------------------------------------------

void ChangeRTC()
// Change manually the RTC Date/Time from keyboard
{
    10ac:	cf 92       	push	r12
    10ae:	df 92       	push	r13
    10b0:	ef 92       	push	r14
    10b2:	ff 92       	push	r15
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2338
  byte    leapYear;   //  Set to 1 if the selected year is bissextile, 0 otherwise [0..1]

  // Read RTC
  readRTC(&seconds, &minutes, &hours, &day,  &month,  &year, &tempC);
    10bc:	82 eb       	ldi	r24, 0xB2	; 178
    10be:	c8 2e       	mov	r12, r24
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	d8 2e       	mov	r13, r24
    10c4:	93 eb       	ldi	r25, 0xB3	; 179
    10c6:	e9 2e       	mov	r14, r25
    10c8:	91 e0       	ldi	r25, 0x01	; 1
    10ca:	f9 2e       	mov	r15, r25
    10cc:	04 eb       	ldi	r16, 0xB4	; 180
    10ce:	11 e0       	ldi	r17, 0x01	; 1
    10d0:	25 eb       	ldi	r18, 0xB5	; 181
    10d2:	31 e0       	ldi	r19, 0x01	; 1
    10d4:	46 eb       	ldi	r20, 0xB6	; 182
    10d6:	51 e0       	ldi	r21, 0x01	; 1
    10d8:	67 eb       	ldi	r22, 0xB7	; 183
    10da:	71 e0       	ldi	r23, 0x01	; 1
    10dc:	88 eb       	ldi	r24, 0xB8	; 184
    10de:	91 e0       	ldi	r25, 0x01	; 1
    10e0:	0e 94 83 07 	call	0xf06	; 0xf06 <readRTC(unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2341

  // Change RTC date/time from keyboard
  tempByte = 0;
    10e4:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <tempByte>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2342
  Serial.println(F("\nIOS: RTC manual setting:"));
    10e8:	6e eb       	ldi	r22, 0xBE	; 190
    10ea:	71 e0       	ldi	r23, 0x01	; 1
    10ec:	8c e8       	ldi	r24, 0x8C	; 140
    10ee:	92 e0       	ldi	r25, 0x02	; 2
    10f0:	0e 94 c9 23 	call	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2343
  Serial.println(F("\nPress T/U to increment +10/+1 or CR to accept"));
    10f4:	6f e8       	ldi	r22, 0x8F	; 143
    10f6:	71 e0       	ldi	r23, 0x01	; 1
    10f8:	8c e8       	ldi	r24, 0x8C	; 140
    10fa:	92 e0       	ldi	r25, 0x02	; 2
    10fc:	0e 94 c9 23 	call	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2448
            else if (month < 3) month = month + 10;
          break;

          case 2:
            day = day + 10;
            if (day > (daysOfMonth[month - 1] + isLeapYear(year))) day = day - (day / 10) * 10;
    1100:	ca e0       	ldi	r28, 0x0A	; 10
    1102:	d6 ef       	ldi	r29, 0xF6	; 246
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2449
            if (day == 0) day = 1;
    1104:	11 e0       	ldi	r17, 0x01	; 1
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2348
  Serial.println(F("\nPress T/U to increment +10/+1 or CR to accept"));
  do
  {
    do
    {
      Serial.print(F(" "));
    1106:	6d e8       	ldi	r22, 0x8D	; 141
    1108:	71 e0       	ldi	r23, 0x01	; 1
    110a:	8c e8       	ldi	r24, 0x8C	; 140
    110c:	92 e0       	ldi	r25, 0x02	; 2
    110e:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2349
      switch (tempByte)
    1112:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <tempByte>
    1116:	82 30       	cpi	r24, 0x02	; 2
    1118:	09 f4       	brne	.+2      	; 0x111c <ChangeRTC()+0x70>
    111a:	7e c0       	rjmp	.+252    	; 0x1218 <ChangeRTC()+0x16c>
    111c:	08 f0       	brcs	.+2      	; 0x1120 <ChangeRTC()+0x74>
    111e:	59 c0       	rjmp	.+178    	; 0x11d2 <ChangeRTC()+0x126>
    1120:	88 23       	and	r24, r24
    1122:	09 f4       	brne	.+2      	; 0x1126 <ChangeRTC()+0x7a>
    1124:	65 c0       	rjmp	.+202    	; 0x11f0 <ChangeRTC()+0x144>
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	09 f4       	brne	.+2      	; 0x112c <ChangeRTC()+0x80>
    112a:	6d c0       	rjmp	.+218    	; 0x1206 <ChangeRTC()+0x15a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2386
        break;
      }

      do
      {
        WaitAndBlink(BLK);
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	0e 94 61 06 	call	0xcc2	; 0xcc2 <WaitAndBlink(baudRecCheck)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2387
        inChar = Serial.read();
    1134:	8c e8       	ldi	r24, 0x8C	; 140
    1136:	92 e0       	ldi	r25, 0x02	; 2
    1138:	0e 94 b2 21 	call	0x4364	; 0x4364 <HardwareSerial::read()>
    113c:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <inChar>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2389
      }
      while ((inChar != 'u') && (inChar != 'U') && (inChar != 't') && (inChar != 'T') && (inChar != 13));
    1140:	85 37       	cpi	r24, 0x75	; 117
    1142:	09 f4       	brne	.+2      	; 0x1146 <ChangeRTC()+0x9a>
    1144:	8f c0       	rjmp	.+286    	; 0x1264 <ChangeRTC()+0x1b8>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2389 (discriminator 1)
    1146:	85 35       	cpi	r24, 0x55	; 85
    1148:	09 f4       	brne	.+2      	; 0x114c <ChangeRTC()+0xa0>
    114a:	8c c0       	rjmp	.+280    	; 0x1264 <ChangeRTC()+0x1b8>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2389 (discriminator 2)
    114c:	84 37       	cpi	r24, 0x74	; 116
    114e:	09 f4       	brne	.+2      	; 0x1152 <ChangeRTC()+0xa6>
    1150:	95 c0       	rjmp	.+298    	; 0x127c <ChangeRTC()+0x1d0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2389 (discriminator 3)
    1152:	84 35       	cpi	r24, 0x54	; 84
    1154:	09 f4       	brne	.+2      	; 0x1158 <ChangeRTC()+0xac>
    1156:	92 c0       	rjmp	.+292    	; 0x127c <ChangeRTC()+0x1d0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2389 (discriminator 4)
    1158:	8d 30       	cpi	r24, 0x0D	; 13
    115a:	41 f7       	brne	.-48     	; 0x112c <ChangeRTC()+0x80>
_ZN14HardwareSerial5writeEi():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.h:133
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    115c:	6d e0       	ldi	r22, 0x0D	; 13
    115e:	8c e8       	ldi	r24, 0x8C	; 140
    1160:	92 e0       	ldi	r25, 0x02	; 2
    1162:	0e 94 24 22 	call	0x4448	; 0x4448 <HardwareSerial::write(unsigned char)>
_Z9ChangeRTCv():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2469
            if (seconds > 59) seconds = seconds - (seconds / 10 ) * 10;
          break;
        }
      Serial.write(13);
    }
    while (inChar != 13);
    1166:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <inChar>
    116a:	8d 30       	cpi	r24, 0x0D	; 13
    116c:	61 f6       	brne	.-104    	; 0x1106 <ChangeRTC()+0x5a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2470
    tempByte++;
    116e:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <tempByte>
    1172:	8f 5f       	subi	r24, 0xFF	; 255
    1174:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <tempByte>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2472
  }
  while (tempByte < 6);  
    1178:	86 30       	cpi	r24, 0x06	; 6
    117a:	28 f2       	brcs	.-118    	; 0x1106 <ChangeRTC()+0x5a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2475

  // Write new date/time into the RTC
  writeRTC(seconds, minutes, hours, day, month, year);
    117c:	e0 90 b3 01 	lds	r14, 0x01B3	; 0x8001b3 <year>
    1180:	00 91 b4 01 	lds	r16, 0x01B4	; 0x8001b4 <month>
    1184:	20 91 b5 01 	lds	r18, 0x01B5	; 0x8001b5 <day>
    1188:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <hours>
    118c:	60 91 b7 01 	lds	r22, 0x01B7	; 0x8001b7 <minutes>
    1190:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <seconds>
    1194:	0e 94 33 07 	call	0xe66	; 0xe66 <writeRTC(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2476
  Serial.println(F(" ...done      \n"));
    1198:	61 e3       	ldi	r22, 0x31	; 49
    119a:	71 e0       	ldi	r23, 0x01	; 1
    119c:	8c e8       	ldi	r24, 0x8C	; 140
    119e:	92 e0       	ldi	r25, 0x02	; 2
    11a0:	0e 94 c9 23 	call	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2477
  Serial.print(F("IOS: RTC date/time updated ("));
    11a4:	64 e1       	ldi	r22, 0x14	; 20
    11a6:	71 e0       	ldi	r23, 0x01	; 1
    11a8:	8c e8       	ldi	r24, 0x8C	; 140
    11aa:	92 e0       	ldi	r25, 0x02	; 2
    11ac:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2478
  printDateTime(1);
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	0e 94 fe 07 	call	0xffc	; 0xffc <printDateTime(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2479
  Serial.println(")");
    11b6:	65 e8       	ldi	r22, 0x85	; 133
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	8c e8       	ldi	r24, 0x8C	; 140
    11bc:	92 e0       	ldi	r25, 0x02	; 2
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2480
}
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	ff 90       	pop	r15
    11c8:	ef 90       	pop	r14
    11ca:	df 90       	pop	r13
    11cc:	cf 90       	pop	r12
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2479
  // Write new date/time into the RTC
  writeRTC(seconds, minutes, hours, day, month, year);
  Serial.println(F(" ...done      \n"));
  Serial.print(F("IOS: RTC date/time updated ("));
  printDateTime(1);
  Serial.println(")");
    11ce:	0c 94 db 23 	jmp	0x47b6	; 0x47b6 <Print::println(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2349
  do
  {
    do
    {
      Serial.print(F(" "));
      switch (tempByte)
    11d2:	84 30       	cpi	r24, 0x04	; 4
    11d4:	f1 f1       	breq	.+124    	; 0x1252 <ChangeRTC()+0x1a6>
    11d6:	a0 f1       	brcs	.+104    	; 0x1240 <ChangeRTC()+0x194>
    11d8:	85 30       	cpi	r24, 0x05	; 5
    11da:	09 f0       	breq	.+2      	; 0x11de <ChangeRTC()+0x132>
    11dc:	a7 cf       	rjmp	.-178    	; 0x112c <ChangeRTC()+0x80>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2379
          Serial.print(F("Minutes -> "));
          print2digit(minutes);
        break;

        case 5:
          Serial.print(F("Seconds -> "));
    11de:	61 e4       	ldi	r22, 0x41	; 65
    11e0:	71 e0       	ldi	r23, 0x01	; 1
    11e2:	8c e8       	ldi	r24, 0x8C	; 140
    11e4:	92 e0       	ldi	r25, 0x02	; 2
    11e6:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2380
          print2digit(seconds);
    11ea:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <seconds>
    11ee:	08 c0       	rjmp	.+16     	; 0x1200 <ChangeRTC()+0x154>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2352
    {
      Serial.print(F(" "));
      switch (tempByte)
      {
        case 0:
          Serial.print(F("Year -> "));
    11f0:	64 e8       	ldi	r22, 0x84	; 132
    11f2:	71 e0       	ldi	r23, 0x01	; 1
    11f4:	8c e8       	ldi	r24, 0x8C	; 140
    11f6:	92 e0       	ldi	r25, 0x02	; 2
    11f8:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2353
          print2digit(year);
    11fc:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <year>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2380
          print2digit(minutes);
        break;

        case 5:
          Serial.print(F("Seconds -> "));
          print2digit(seconds);
    1200:	0e 94 96 04 	call	0x92c	; 0x92c <print2digit(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2381
        break;
    1204:	93 cf       	rjmp	.-218    	; 0x112c <ChangeRTC()+0x80>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2357
          Serial.print(F("Year -> "));
          print2digit(year);
        break;
        
        case 1:
          Serial.print(F("Month -> "));
    1206:	6a e7       	ldi	r22, 0x7A	; 122
    1208:	71 e0       	ldi	r23, 0x01	; 1
    120a:	8c e8       	ldi	r24, 0x8C	; 140
    120c:	92 e0       	ldi	r25, 0x02	; 2
    120e:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2358
          print2digit(month);
    1212:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <month>
    1216:	f4 cf       	rjmp	.-24     	; 0x1200 <ChangeRTC()+0x154>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2362
        break;

        case 2:
          Serial.print(F("             "));
    1218:	6c e6       	ldi	r22, 0x6C	; 108
    121a:	71 e0       	ldi	r23, 0x01	; 1
    121c:	8c e8       	ldi	r24, 0x8C	; 140
    121e:	92 e0       	ldi	r25, 0x02	; 2
    1220:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
_ZN14HardwareSerial5writeEi():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.h:133
    1224:	6d e0       	ldi	r22, 0x0D	; 13
    1226:	8c e8       	ldi	r24, 0x8C	; 140
    1228:	92 e0       	ldi	r25, 0x02	; 2
    122a:	0e 94 24 22 	call	0x4448	; 0x4448 <HardwareSerial::write(unsigned char)>
_Z9ChangeRTCv():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2364
          Serial.write(13);
          Serial.print(F(" Day -> "));
    122e:	63 e6       	ldi	r22, 0x63	; 99
    1230:	71 e0       	ldi	r23, 0x01	; 1
    1232:	8c e8       	ldi	r24, 0x8C	; 140
    1234:	92 e0       	ldi	r25, 0x02	; 2
    1236:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2365
          print2digit(day);
    123a:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <day>
    123e:	e0 cf       	rjmp	.-64     	; 0x1200 <ChangeRTC()+0x154>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2369
        break;

        case 3:
          Serial.print(F("Hours -> "));
    1240:	69 e5       	ldi	r22, 0x59	; 89
    1242:	71 e0       	ldi	r23, 0x01	; 1
    1244:	8c e8       	ldi	r24, 0x8C	; 140
    1246:	92 e0       	ldi	r25, 0x02	; 2
    1248:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2370
          print2digit(hours);
    124c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <hours>
    1250:	d7 cf       	rjmp	.-82     	; 0x1200 <ChangeRTC()+0x154>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2374
        break;

        case 4:
          Serial.print(F("Minutes -> "));
    1252:	6d e4       	ldi	r22, 0x4D	; 77
    1254:	71 e0       	ldi	r23, 0x01	; 1
    1256:	8c e8       	ldi	r24, 0x8C	; 140
    1258:	92 e0       	ldi	r25, 0x02	; 2
    125a:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2375
          print2digit(minutes);
    125e:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <minutes>
    1262:	ce cf       	rjmp	.-100    	; 0x1200 <ChangeRTC()+0x154>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2393
      }
      while ((inChar != 'u') && (inChar != 'U') && (inChar != 't') && (inChar != 'T') && (inChar != 13));
      
      if ((inChar == 'u') || (inChar == 'U'))
      // Change units
        switch (tempByte)
    1264:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <tempByte>
    1268:	92 30       	cpi	r25, 0x02	; 2
    126a:	f1 f1       	breq	.+124    	; 0x12e8 <ChangeRTC()+0x23c>
    126c:	e8 f4       	brcc	.+58     	; 0x12a8 <ChangeRTC()+0x1fc>
    126e:	99 23       	and	r25, r25
    1270:	51 f1       	breq	.+84     	; 0x12c6 <ChangeRTC()+0x21a>
    1272:	91 30       	cpi	r25, 0x01	; 1
    1274:	89 f1       	breq	.+98     	; 0x12d8 <ChangeRTC()+0x22c>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2432
          case 5:
            seconds++;
            if (seconds > 59) seconds = 0;
          break;
        }
      if ((inChar == 't') || (inChar == 'T'))
    1276:	84 37       	cpi	r24, 0x74	; 116
    1278:	09 f0       	breq	.+2      	; 0x127c <ChangeRTC()+0x1d0>
    127a:	70 cf       	rjmp	.-288    	; 0x115c <ChangeRTC()+0xb0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2434
      // Change tens
        switch (tempByte)
    127c:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <tempByte>
    1280:	82 30       	cpi	r24, 0x02	; 2
    1282:	09 f4       	brne	.+2      	; 0x1286 <ChangeRTC()+0x1da>
    1284:	8a c0       	rjmp	.+276    	; 0x139a <ChangeRTC()+0x2ee>
    1286:	08 f0       	brcs	.+2      	; 0x128a <ChangeRTC()+0x1de>
    1288:	62 c0       	rjmp	.+196    	; 0x134e <ChangeRTC()+0x2a2>
    128a:	88 23       	and	r24, r24
    128c:	09 f4       	brne	.+2      	; 0x1290 <ChangeRTC()+0x1e4>
    128e:	70 c0       	rjmp	.+224    	; 0x1370 <ChangeRTC()+0x2c4>
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	09 f0       	breq	.+2      	; 0x1296 <ChangeRTC()+0x1ea>
    1294:	63 cf       	rjmp	.-314    	; 0x115c <ChangeRTC()+0xb0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2442
            year = year + 10;
            if (year > 99) year = year - (year / 10) * 10; 
          break;

          case 1:
            if (month > 10) month = month - 10;
    1296:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <month>
    129a:	8b 30       	cpi	r24, 0x0B	; 11
    129c:	08 f4       	brcc	.+2      	; 0x12a0 <ChangeRTC()+0x1f4>
    129e:	78 c0       	rjmp	.+240    	; 0x1390 <ChangeRTC()+0x2e4>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2442 (discriminator 1)
    12a0:	8a 50       	subi	r24, 0x0A	; 10
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2401
            year++;
            if (year > 99) year = 0;
          break;

          case 1:
            month++;
    12a2:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <month>
    12a6:	5a cf       	rjmp	.-332    	; 0x115c <ChangeRTC()+0xb0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2393
      }
      while ((inChar != 'u') && (inChar != 'U') && (inChar != 't') && (inChar != 'T') && (inChar != 13));
      
      if ((inChar == 'u') || (inChar == 'U'))
      // Change units
        switch (tempByte)
    12a8:	94 30       	cpi	r25, 0x04	; 4
    12aa:	09 f4       	brne	.+2      	; 0x12ae <ChangeRTC()+0x202>
    12ac:	47 c0       	rjmp	.+142    	; 0x133c <ChangeRTC()+0x290>
    12ae:	e8 f1       	brcs	.+122    	; 0x132a <ChangeRTC()+0x27e>
    12b0:	95 30       	cpi	r25, 0x05	; 5
    12b2:	09 f7       	brne	.-62     	; 0x1276 <ChangeRTC()+0x1ca>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2428
            minutes++;
            if (minutes > 59) minutes = 0;
          break;

          case 5:
            seconds++;
    12b4:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <seconds>
    12b8:	8f 5f       	subi	r24, 0xFF	; 255
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2429
            if (seconds > 59) seconds = 0;
    12ba:	8c 33       	cpi	r24, 0x3C	; 60
    12bc:	08 f4       	brcc	.+2      	; 0x12c0 <ChangeRTC()+0x214>
    12be:	c7 c0       	rjmp	.+398    	; 0x144e <ChangeRTC()+0x3a2>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2429 (discriminator 1)
    12c0:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <seconds>
    12c4:	4b cf       	rjmp	.-362    	; 0x115c <ChangeRTC()+0xb0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2396
      if ((inChar == 'u') || (inChar == 'U'))
      // Change units
        switch (tempByte)
        {
          case 0:
            year++;
    12c6:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <year>
    12ca:	8f 5f       	subi	r24, 0xFF	; 255
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2397
            if (year > 99) year = 0;
    12cc:	84 36       	cpi	r24, 0x64	; 100
    12ce:	08 f4       	brcc	.+2      	; 0x12d2 <ChangeRTC()+0x226>
    12d0:	bb c0       	rjmp	.+374    	; 0x1448 <ChangeRTC()+0x39c>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2397 (discriminator 1)
    12d2:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <year>
    12d6:	42 cf       	rjmp	.-380    	; 0x115c <ChangeRTC()+0xb0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2401
          break;

          case 1:
            month++;
    12d8:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <month>
    12dc:	8f 5f       	subi	r24, 0xFF	; 255
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2402
            if (month > 12) month = 1;
    12de:	8d 30       	cpi	r24, 0x0D	; 13
    12e0:	00 f3       	brcs	.-64     	; 0x12a2 <ChangeRTC()+0x1f6>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2402 (discriminator 1)
    12e2:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <month>
    12e6:	3a cf       	rjmp	.-396    	; 0x115c <ChangeRTC()+0xb0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2406
          break;

          case 2:
            day++;
    12e8:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <day>
    12ec:	8f 5f       	subi	r24, 0xFF	; 255
    12ee:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <day>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2407
            if (month == 2)
    12f2:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <month>
    12f6:	e2 30       	cpi	r30, 0x02	; 2
    12f8:	89 f4       	brne	.+34     	; 0x131c <ChangeRTC()+0x270>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2409
            {
              if (day > (daysOfMonth[month - 1] + isLeapYear(year))) day = 1;
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	20 91 b3 01 	lds	r18, 0x01B3	; 0x8001b3 <year>
    1300:	23 70       	andi	r18, 0x03	; 3
    1302:	49 f4       	brne	.+18     	; 0x1316 <ChangeRTC()+0x26a>
    1304:	2d e1       	ldi	r18, 0x1D	; 29
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	28 17       	cp	r18, r24
    130a:	39 07       	cpc	r19, r25
    130c:	0c f0       	brlt	.+2      	; 0x1310 <ChangeRTC()+0x264>
    130e:	26 cf       	rjmp	.-436    	; 0x115c <ChangeRTC()+0xb0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2449 (discriminator 1)
          break;

          case 2:
            day = day + 10;
            if (day > (daysOfMonth[month - 1] + isLeapYear(year))) day = day - (day / 10) * 10;
            if (day == 0) day = 1;
    1310:	10 93 b5 01 	sts	0x01B5, r17	; 0x8001b5 <day>
    1314:	23 cf       	rjmp	.-442    	; 0x115c <ChangeRTC()+0xb0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2409

          case 2:
            day++;
            if (month == 2)
            {
              if (day > (daysOfMonth[month - 1] + isLeapYear(year))) day = 1;
    1316:	2c e1       	ldi	r18, 0x1C	; 28
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	f6 cf       	rjmp	.-20     	; 0x1308 <ChangeRTC()+0x25c>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2413
            }
            else
            {
              if (day > (daysOfMonth[month - 1])) day = 1;
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	eb 5d       	subi	r30, 0xDB	; 219
    1320:	fe 4f       	sbci	r31, 0xFE	; 254
    1322:	90 81       	ld	r25, Z
    1324:	98 17       	cp	r25, r24
    1326:	a0 f3       	brcs	.-24     	; 0x1310 <ChangeRTC()+0x264>
    1328:	19 cf       	rjmp	.-462    	; 0x115c <ChangeRTC()+0xb0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2418
            }
          break;

          case 3:
            hours++;
    132a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <hours>
    132e:	8f 5f       	subi	r24, 0xFF	; 255
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2419
            if (hours > 23) hours = 0;
    1330:	88 31       	cpi	r24, 0x18	; 24
    1332:	08 f4       	brcc	.+2      	; 0x1336 <ChangeRTC()+0x28a>
    1334:	83 c0       	rjmp	.+262    	; 0x143c <ChangeRTC()+0x390>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2419 (discriminator 1)
    1336:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <hours>
    133a:	10 cf       	rjmp	.-480    	; 0x115c <ChangeRTC()+0xb0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2423
          break;

          case 4:
            minutes++;
    133c:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <minutes>
    1340:	8f 5f       	subi	r24, 0xFF	; 255
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2424
            if (minutes > 59) minutes = 0;
    1342:	8c 33       	cpi	r24, 0x3C	; 60
    1344:	08 f4       	brcc	.+2      	; 0x1348 <ChangeRTC()+0x29c>
    1346:	7d c0       	rjmp	.+250    	; 0x1442 <ChangeRTC()+0x396>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2424 (discriminator 1)
    1348:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <minutes>
    134c:	07 cf       	rjmp	.-498    	; 0x115c <ChangeRTC()+0xb0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2434
            if (seconds > 59) seconds = 0;
          break;
        }
      if ((inChar == 't') || (inChar == 'T'))
      // Change tens
        switch (tempByte)
    134e:	84 30       	cpi	r24, 0x04	; 4
    1350:	09 f4       	brne	.+2      	; 0x1354 <ChangeRTC()+0x2a8>
    1352:	5c c0       	rjmp	.+184    	; 0x140c <ChangeRTC()+0x360>
    1354:	08 f4       	brcc	.+2      	; 0x1358 <ChangeRTC()+0x2ac>
    1356:	4a c0       	rjmp	.+148    	; 0x13ec <ChangeRTC()+0x340>
    1358:	85 30       	cpi	r24, 0x05	; 5
    135a:	09 f0       	breq	.+2      	; 0x135e <ChangeRTC()+0x2b2>
    135c:	ff ce       	rjmp	.-514    	; 0x115c <ChangeRTC()+0xb0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2463
            minutes = minutes + 10;
            if (minutes > 59) minutes = minutes - (minutes / 10 ) * 10;
          break;

          case 5:
            seconds = seconds + 10;
    135e:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <seconds>
    1362:	26 5f       	subi	r18, 0xF6	; 246
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2464
            if (seconds > 59) seconds = seconds - (seconds / 10 ) * 10;
    1364:	2c 33       	cpi	r18, 0x3C	; 60
    1366:	08 f0       	brcs	.+2      	; 0x136a <ChangeRTC()+0x2be>
    1368:	61 c0       	rjmp	.+194    	; 0x142c <ChangeRTC()+0x380>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2464 (discriminator 1)
    136a:	20 93 b8 01 	sts	0x01B8, r18	; 0x8001b8 <seconds>
    136e:	f6 ce       	rjmp	.-532    	; 0x115c <ChangeRTC()+0xb0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2437
      if ((inChar == 't') || (inChar == 'T'))
      // Change tens
        switch (tempByte)
        {
          case 0:
            year = year + 10;
    1370:	20 91 b3 01 	lds	r18, 0x01B3	; 0x8001b3 <year>
    1374:	26 5f       	subi	r18, 0xF6	; 246
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2438
            if (year > 99) year = year - (year / 10) * 10; 
    1376:	24 36       	cpi	r18, 0x64	; 100
    1378:	18 f4       	brcc	.+6      	; 0x1380 <ChangeRTC()+0x2d4>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2438 (discriminator 1)
    137a:	20 93 b3 01 	sts	0x01B3, r18	; 0x8001b3 <year>
    137e:	ee ce       	rjmp	.-548    	; 0x115c <ChangeRTC()+0xb0>
    1380:	82 2f       	mov	r24, r18
    1382:	6c 2f       	mov	r22, r28
    1384:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <__udivmodqi4>
    1388:	8d 9f       	mul	r24, r29
    138a:	20 0d       	add	r18, r0
    138c:	11 24       	eor	r1, r1
    138e:	f5 cf       	rjmp	.-22     	; 0x137a <ChangeRTC()+0x2ce>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2443
          break;

          case 1:
            if (month > 10) month = month - 10;
            else if (month < 3) month = month + 10;
    1390:	83 30       	cpi	r24, 0x03	; 3
    1392:	08 f0       	brcs	.+2      	; 0x1396 <ChangeRTC()+0x2ea>
    1394:	e3 ce       	rjmp	.-570    	; 0x115c <ChangeRTC()+0xb0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2443 (discriminator 1)
    1396:	86 5f       	subi	r24, 0xF6	; 246
    1398:	84 cf       	rjmp	.-248    	; 0x12a2 <ChangeRTC()+0x1f6>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2447
          break;

          case 2:
            day = day + 10;
    139a:	20 91 b5 01 	lds	r18, 0x01B5	; 0x8001b5 <day>
    139e:	26 5f       	subi	r18, 0xF6	; 246
    13a0:	20 93 b5 01 	sts	0x01B5, r18	; 0x8001b5 <day>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2448
            if (day > (daysOfMonth[month - 1] + isLeapYear(year))) day = day - (day / 10) * 10;
    13a4:	42 2f       	mov	r20, r18
    13a6:	50 e0       	ldi	r21, 0x00	; 0
    13a8:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <month>
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	eb 5d       	subi	r30, 0xDB	; 219
    13b0:	fe 4f       	sbci	r31, 0xFE	; 254
    13b2:	80 81       	ld	r24, Z
    13b4:	90 e0       	ldi	r25, 0x00	; 0
_Z10isLeapYearh():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2326
byte isLeapYear(byte yearXX)
// Check if the year 2000+XX (where XX is the argument yearXX [00..99]) is a leap year.
// Returns 1 if it is leap, 0 otherwise.
// This function works in the [2000..2099] years range. It should be enough...
{
  if (((2000 + yearXX) % 4) == 0) return 1;
    13b6:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <year>
    13ba:	33 70       	andi	r19, 0x03	; 3
    13bc:	61 e0       	ldi	r22, 0x01	; 1
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	11 f0       	breq	.+4      	; 0x13c6 <ChangeRTC()+0x31a>
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	60 e0       	ldi	r22, 0x00	; 0
_Z9ChangeRTCv():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2448
            else if (month < 3) month = month + 10;
          break;

          case 2:
            day = day + 10;
            if (day > (daysOfMonth[month - 1] + isLeapYear(year))) day = day - (day / 10) * 10;
    13c6:	86 0f       	add	r24, r22
    13c8:	97 1f       	adc	r25, r23
    13ca:	84 17       	cp	r24, r20
    13cc:	95 07       	cpc	r25, r21
    13ce:	4c f4       	brge	.+18     	; 0x13e2 <ChangeRTC()+0x336>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2448 (discriminator 1)
    13d0:	82 2f       	mov	r24, r18
    13d2:	6c 2f       	mov	r22, r28
    13d4:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <__udivmodqi4>
    13d8:	8d 9f       	mul	r24, r29
    13da:	20 0d       	add	r18, r0
    13dc:	11 24       	eor	r1, r1
    13de:	20 93 b5 01 	sts	0x01B5, r18	; 0x8001b5 <day>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2449
            if (day == 0) day = 1;
    13e2:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <day>
    13e6:	81 11       	cpse	r24, r1
    13e8:	b9 ce       	rjmp	.-654    	; 0x115c <ChangeRTC()+0xb0>
    13ea:	92 cf       	rjmp	.-220    	; 0x1310 <ChangeRTC()+0x264>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2453
          break;

          case 3:
            hours = hours + 10;
    13ec:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <hours>
    13f0:	26 5f       	subi	r18, 0xF6	; 246
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2454
            if (hours > 23) hours = hours - (hours / 10 ) * 10;
    13f2:	28 31       	cpi	r18, 0x18	; 24
    13f4:	18 f4       	brcc	.+6      	; 0x13fc <ChangeRTC()+0x350>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2454 (discriminator 1)
    13f6:	20 93 b6 01 	sts	0x01B6, r18	; 0x8001b6 <hours>
    13fa:	b0 ce       	rjmp	.-672    	; 0x115c <ChangeRTC()+0xb0>
    13fc:	82 2f       	mov	r24, r18
    13fe:	6c 2f       	mov	r22, r28
    1400:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <__udivmodqi4>
    1404:	8d 9f       	mul	r24, r29
    1406:	20 0d       	add	r18, r0
    1408:	11 24       	eor	r1, r1
    140a:	f5 cf       	rjmp	.-22     	; 0x13f6 <ChangeRTC()+0x34a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2458
          break;

          case 4:
            minutes = minutes + 10;
    140c:	20 91 b7 01 	lds	r18, 0x01B7	; 0x8001b7 <minutes>
    1410:	26 5f       	subi	r18, 0xF6	; 246
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2459
            if (minutes > 59) minutes = minutes - (minutes / 10 ) * 10;
    1412:	2c 33       	cpi	r18, 0x3C	; 60
    1414:	18 f4       	brcc	.+6      	; 0x141c <ChangeRTC()+0x370>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2459 (discriminator 1)
    1416:	20 93 b7 01 	sts	0x01B7, r18	; 0x8001b7 <minutes>
    141a:	a0 ce       	rjmp	.-704    	; 0x115c <ChangeRTC()+0xb0>
    141c:	82 2f       	mov	r24, r18
    141e:	6c 2f       	mov	r22, r28
    1420:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <__udivmodqi4>
    1424:	8d 9f       	mul	r24, r29
    1426:	20 0d       	add	r18, r0
    1428:	11 24       	eor	r1, r1
    142a:	f5 cf       	rjmp	.-22     	; 0x1416 <ChangeRTC()+0x36a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2464 (discriminator 1)
          break;

          case 5:
            seconds = seconds + 10;
            if (seconds > 59) seconds = seconds - (seconds / 10 ) * 10;
    142c:	82 2f       	mov	r24, r18
    142e:	6c 2f       	mov	r22, r28
    1430:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <__udivmodqi4>
    1434:	8d 9f       	mul	r24, r29
    1436:	20 0d       	add	r18, r0
    1438:	11 24       	eor	r1, r1
    143a:	97 cf       	rjmp	.-210    	; 0x136a <ChangeRTC()+0x2be>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2418
              if (day > (daysOfMonth[month - 1])) day = 1;
            }
          break;

          case 3:
            hours++;
    143c:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <hours>
    1440:	8d ce       	rjmp	.-742    	; 0x115c <ChangeRTC()+0xb0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2423
            if (hours > 23) hours = 0;
          break;

          case 4:
            minutes++;
    1442:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <minutes>
    1446:	8a ce       	rjmp	.-748    	; 0x115c <ChangeRTC()+0xb0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2396
      if ((inChar == 'u') || (inChar == 'U'))
      // Change units
        switch (tempByte)
        {
          case 0:
            year++;
    1448:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <year>
    144c:	87 ce       	rjmp	.-754    	; 0x115c <ChangeRTC()+0xb0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2428
            minutes++;
            if (minutes > 59) minutes = 0;
          break;

          case 5:
            seconds++;
    144e:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <seconds>
    1452:	84 ce       	rjmp	.-760    	; 0x115c <ChangeRTC()+0xb0>

00001454 <autoSetRTC()>:
_Z10autoSetRTCv():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2214

byte autoSetRTC()
// Check if the DS3231 RTC is present and set the date/time at compile date/time if 
// the RTC "Oscillator Stop Flag" is set (= date/time failure).
// Return value: 0 if RTC not present, 1 if found.
{
    1454:	ef 92       	push	r14
    1456:	0f 93       	push	r16
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
    145c:	00 d0       	rcall	.+0      	; 0x145e <autoSetRTC()+0xa>
    145e:	00 d0       	rcall	.+0      	; 0x1460 <autoSetRTC()+0xc>
    1460:	00 d0       	rcall	.+0      	; 0x1462 <autoSetRTC()+0xe>
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2217
  byte    OscStopFlag;

  Wire.beginTransmission(DS3231_RTC);
    1466:	68 e6       	ldi	r22, 0x68	; 104
    1468:	70 e0       	ldi	r23, 0x00	; 0
    146a:	86 ee       	ldi	r24, 0xE6	; 230
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2218
  if (Wire.endTransmission() != 0) return 0;      // RTC not found
    1472:	86 ee       	ldi	r24, 0xE6	; 230
    1474:	91 e0       	ldi	r25, 0x01	; 1
    1476:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <TwoWire::endTransmission()>
    147a:	81 11       	cpse	r24, r1
    147c:	6c c1       	rjmp	.+728    	; 0x1756 <autoSetRTC()+0x302>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2219
  Serial.print(F("IOS: Found RTC DS3231 Module ("));
    147e:	60 e7       	ldi	r22, 0x70	; 112
    1480:	72 e0       	ldi	r23, 0x02	; 2
    1482:	8c e8       	ldi	r24, 0x8C	; 140
    1484:	92 e0       	ldi	r25, 0x02	; 2
    1486:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2220
  printDateTime(1);
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	0e 94 fe 07 	call	0xffc	; 0xffc <printDateTime(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2221
  Serial.println(")");
    1490:	65 e8       	ldi	r22, 0x85	; 133
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	8c e8       	ldi	r24, 0x8C	; 140
    1496:	92 e0       	ldi	r25, 0x02	; 2
    1498:	0e 94 db 23 	call	0x47b6	; 0x47b6 <Print::println(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2224

  // Print the temperaturefrom the RTC sensor
  Serial.print(F("IOS: RTC DS3231 temperature sensor: "));
    149c:	6b e4       	ldi	r22, 0x4B	; 75
    149e:	72 e0       	ldi	r23, 0x02	; 2
    14a0:	8c e8       	ldi	r24, 0x8C	; 140
    14a2:	92 e0       	ldi	r25, 0x02	; 2
    14a4:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2225
  Serial.print((int8_t)tempC);
    14a8:	60 91 b2 01 	lds	r22, 0x01B2	; 0x8001b2 <tempC>
    14ac:	06 2e       	mov	r0, r22
    14ae:	00 0c       	add	r0, r0
    14b0:	77 0b       	sbc	r23, r23
    14b2:	4a e0       	ldi	r20, 0x0A	; 10
    14b4:	50 e0       	ldi	r21, 0x00	; 0
    14b6:	8c e8       	ldi	r24, 0x8C	; 140
    14b8:	92 e0       	ldi	r25, 0x02	; 2
    14ba:	0e 94 98 24 	call	0x4930	; 0x4930 <Print::print(int, int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2226
  Serial.println("C");
    14be:	6a ea       	ldi	r22, 0xAA	; 170
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	8c e8       	ldi	r24, 0x8C	; 140
    14c4:	92 e0       	ldi	r25, 0x02	; 2
    14c6:	0e 94 db 23 	call	0x47b6	; 0x47b6 <Print::println(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2229
  
  // Read the "Oscillator Stop Flag"
  Wire.beginTransmission(DS3231_RTC);
    14ca:	68 e6       	ldi	r22, 0x68	; 104
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	86 ee       	ldi	r24, 0xE6	; 230
    14d0:	91 e0       	ldi	r25, 0x01	; 1
    14d2:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2230
  Wire.write(DS3231_STATRG);                      // Set the DS3231 Status Register
    14d6:	6f e0       	ldi	r22, 0x0F	; 15
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	86 ee       	ldi	r24, 0xE6	; 230
    14dc:	91 e0       	ldi	r25, 0x01	; 1
    14de:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2231
  Wire.endTransmission();
    14e2:	86 ee       	ldi	r24, 0xE6	; 230
    14e4:	91 e0       	ldi	r25, 0x01	; 1
    14e6:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <TwoWire::endTransmission()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2232
  Wire.requestFrom(DS3231_RTC, 1);
    14ea:	41 e0       	ldi	r20, 0x01	; 1
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	68 e6       	ldi	r22, 0x68	; 104
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	86 ee       	ldi	r24, 0xE6	; 230
    14f4:	91 e0       	ldi	r25, 0x01	; 1
    14f6:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <TwoWire::requestFrom(int, int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2233
  OscStopFlag = Wire.read() & 0x80;               // Read the "Oscillator Stop Flag"
    14fa:	86 ee       	ldi	r24, 0xE6	; 230
    14fc:	91 e0       	ldi	r25, 0x01	; 1
    14fe:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <TwoWire::read()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2235

  if (OscStopFlag)
    1502:	87 ff       	sbrs	r24, 7
    1504:	00 c1       	rjmp	.+512    	; 0x1706 <autoSetRTC()+0x2b2>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2239
  // RTC oscillator stopped. RTC must be set at compile date/time
  {
    // Convert compile time strings to numeric values
    seconds = compTimeStr.substring(6,8).toInt();
    1506:	28 e0       	ldi	r18, 0x08	; 8
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	46 e0       	ldi	r20, 0x06	; 6
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	6b ed       	ldi	r22, 0xDB	; 219
    1510:	71 e0       	ldi	r23, 0x01	; 1
    1512:	ce 01       	movw	r24, r28
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <String::substring(unsigned int, unsigned int) const>
    151a:	ce 01       	movw	r24, r28
    151c:	01 96       	adiw	r24, 0x01	; 1
    151e:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <String::toInt() const>
    1522:	60 93 b8 01 	sts	0x01B8, r22	; 0x8001b8 <seconds>
    1526:	ce 01       	movw	r24, r28
    1528:	01 96       	adiw	r24, 0x01	; 1
    152a:	0e 94 b3 24 	call	0x4966	; 0x4966 <String::~String()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2240
    minutes = compTimeStr.substring(3,5).toInt();
    152e:	25 e0       	ldi	r18, 0x05	; 5
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	43 e0       	ldi	r20, 0x03	; 3
    1534:	50 e0       	ldi	r21, 0x00	; 0
    1536:	6b ed       	ldi	r22, 0xDB	; 219
    1538:	71 e0       	ldi	r23, 0x01	; 1
    153a:	ce 01       	movw	r24, r28
    153c:	01 96       	adiw	r24, 0x01	; 1
    153e:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <String::substring(unsigned int, unsigned int) const>
    1542:	ce 01       	movw	r24, r28
    1544:	01 96       	adiw	r24, 0x01	; 1
    1546:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <String::toInt() const>
    154a:	60 93 b7 01 	sts	0x01B7, r22	; 0x8001b7 <minutes>
    154e:	ce 01       	movw	r24, r28
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	0e 94 b3 24 	call	0x4966	; 0x4966 <String::~String()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2241
    hours = compTimeStr.substring(0,2).toInt();
    1556:	22 e0       	ldi	r18, 0x02	; 2
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	50 e0       	ldi	r21, 0x00	; 0
    155c:	40 e0       	ldi	r20, 0x00	; 0
    155e:	6b ed       	ldi	r22, 0xDB	; 219
    1560:	71 e0       	ldi	r23, 0x01	; 1
    1562:	ce 01       	movw	r24, r28
    1564:	01 96       	adiw	r24, 0x01	; 1
    1566:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <String::substring(unsigned int, unsigned int) const>
    156a:	ce 01       	movw	r24, r28
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <String::toInt() const>
    1572:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <hours>
    1576:	ce 01       	movw	r24, r28
    1578:	01 96       	adiw	r24, 0x01	; 1
    157a:	0e 94 b3 24 	call	0x4966	; 0x4966 <String::~String()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2242
    day = compDateStr.substring(4,6).toInt();
    157e:	26 e0       	ldi	r18, 0x06	; 6
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	44 e0       	ldi	r20, 0x04	; 4
    1584:	50 e0       	ldi	r21, 0x00	; 0
    1586:	65 ed       	ldi	r22, 0xD5	; 213
    1588:	71 e0       	ldi	r23, 0x01	; 1
    158a:	ce 01       	movw	r24, r28
    158c:	01 96       	adiw	r24, 0x01	; 1
    158e:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <String::substring(unsigned int, unsigned int) const>
    1592:	ce 01       	movw	r24, r28
    1594:	01 96       	adiw	r24, 0x01	; 1
    1596:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <String::toInt() const>
    159a:	60 93 b5 01 	sts	0x01B5, r22	; 0x8001b5 <day>
    159e:	ce 01       	movw	r24, r28
    15a0:	01 96       	adiw	r24, 0x01	; 1
    15a2:	0e 94 b3 24 	call	0x4966	; 0x4966 <String::~String()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2243
    switch (compDateStr[0]) 
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	85 ed       	ldi	r24, 0xD5	; 213
    15ac:	91 e0       	ldi	r25, 0x01	; 1
    15ae:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <String::operator[](unsigned int) const>
    15b2:	ef eb       	ldi	r30, 0xBF	; 191
    15b4:	e8 0f       	add	r30, r24
    15b6:	e3 31       	cpi	r30, 0x13	; 19
    15b8:	08 f0       	brcs	.+2      	; 0x15bc <autoSetRTC()+0x168>
    15ba:	2f c0       	rjmp	.+94     	; 0x161a <autoSetRTC()+0x1c6>
    15bc:	0e 2e       	mov	r0, r30
    15be:	00 0c       	add	r0, r0
    15c0:	ff 0b       	sbc	r31, r31
    15c2:	eb 51       	subi	r30, 0x1B	; 27
    15c4:	f5 4f       	sbci	r31, 0xF5	; 245
    15c6:	0c 94 7f 27 	jmp	0x4efe	; 0x4efe <__tablejump2__>
    15ca:	8b 0b       	sbc	r24, r27
    15cc:	0d 0b       	sbc	r16, r29
    15ce:	0d 0b       	sbc	r16, r29
    15d0:	a9 0b       	sbc	r26, r25
    15d2:	0d 0b       	sbc	r16, r29
    15d4:	89 0b       	sbc	r24, r25
    15d6:	0d 0b       	sbc	r16, r29
    15d8:	0d 0b       	sbc	r16, r29
    15da:	0d 0b       	sbc	r16, r29
    15dc:	f8 0a       	sbc	r15, r24
    15de:	0d 0b       	sbc	r16, r29
    15e0:	0d 0b       	sbc	r16, r29
    15e2:	97 0b       	sbc	r25, r23
    15e4:	a7 0b       	sbc	r26, r23
    15e6:	a5 0b       	sbc	r26, r21
    15e8:	0d 0b       	sbc	r16, r29
    15ea:	0d 0b       	sbc	r16, r29
    15ec:	0d 0b       	sbc	r16, r29
    15ee:	a3 0b       	sbc	r26, r19
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2245
      {
        case 'J': month = compDateStr[1] == 'a' ? 1 : month = compDateStr[2] == 'n' ? 6 : 7; break;
    15f0:	61 e0       	ldi	r22, 0x01	; 1
    15f2:	70 e0       	ldi	r23, 0x00	; 0
    15f4:	85 ed       	ldi	r24, 0xD5	; 213
    15f6:	91 e0       	ldi	r25, 0x01	; 1
    15f8:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <String::operator[](unsigned int) const>
    15fc:	81 36       	cpi	r24, 0x61	; 97
    15fe:	09 f4       	brne	.+2      	; 0x1602 <autoSetRTC()+0x1ae>
    1600:	84 c0       	rjmp	.+264    	; 0x170a <autoSetRTC()+0x2b6>
    1602:	62 e0       	ldi	r22, 0x02	; 2
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	85 ed       	ldi	r24, 0xD5	; 213
    1608:	91 e0       	ldi	r25, 0x01	; 1
    160a:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <String::operator[](unsigned int) const>
    160e:	8e 36       	cpi	r24, 0x6E	; 110
    1610:	09 f4       	brne	.+2      	; 0x1614 <autoSetRTC()+0x1c0>
    1612:	7d c0       	rjmp	.+250    	; 0x170e <autoSetRTC()+0x2ba>
    1614:	87 e0       	ldi	r24, 0x07	; 7
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2252
        case 'A': month = compDateStr[2] == 'r' ? 4 : 8; break;
        case 'M': month = compDateStr[2] == 'r' ? 3 : 5; break;
        case 'S': month = 9; break;
        case 'O': month = 10; break;
        case 'N': month = 11; break;
        case 'D': month = 12; break;
    1616:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <month>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2254
      };
    year = compDateStr.substring(9,11).toInt();
    161a:	2b e0       	ldi	r18, 0x0B	; 11
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	49 e0       	ldi	r20, 0x09	; 9
    1620:	50 e0       	ldi	r21, 0x00	; 0
    1622:	65 ed       	ldi	r22, 0xD5	; 213
    1624:	71 e0       	ldi	r23, 0x01	; 1
    1626:	ce 01       	movw	r24, r28
    1628:	01 96       	adiw	r24, 0x01	; 1
    162a:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <String::substring(unsigned int, unsigned int) const>
    162e:	ce 01       	movw	r24, r28
    1630:	01 96       	adiw	r24, 0x01	; 1
    1632:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <String::toInt() const>
    1636:	60 93 b3 01 	sts	0x01B3, r22	; 0x8001b3 <year>
    163a:	ce 01       	movw	r24, r28
    163c:	01 96       	adiw	r24, 0x01	; 1
    163e:	0e 94 b3 24 	call	0x4966	; 0x4966 <String::~String()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2257

    // Ask for RTC setting al compile date/time
    Serial.println(F("IOS: RTC clock failure!"));
    1642:	63 e3       	ldi	r22, 0x33	; 51
    1644:	72 e0       	ldi	r23, 0x02	; 2
    1646:	8c e8       	ldi	r24, 0x8C	; 140
    1648:	92 e0       	ldi	r25, 0x02	; 2
    164a:	0e 94 c9 23 	call	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2258
    Serial.print(F("\nDo you want set RTC at IOS compile time ("));
    164e:	68 e0       	ldi	r22, 0x08	; 8
    1650:	72 e0       	ldi	r23, 0x02	; 2
    1652:	8c e8       	ldi	r24, 0x8C	; 140
    1654:	92 e0       	ldi	r25, 0x02	; 2
    1656:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2259
    printDateTime(0);
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	0e 94 fe 07 	call	0xffc	; 0xffc <printDateTime(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2260
    Serial.print(F(")? [Y/N] >"));
    1660:	6d ef       	ldi	r22, 0xFD	; 253
    1662:	71 e0       	ldi	r23, 0x01	; 1
    1664:	8c e8       	ldi	r24, 0x8C	; 140
    1666:	92 e0       	ldi	r25, 0x02	; 2
    1668:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2263
    do
    {
      WaitAndBlink(BLK);
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	0e 94 61 06 	call	0xcc2	; 0xcc2 <WaitAndBlink(baudRecCheck)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2264
      inChar = Serial.read();
    1674:	8c e8       	ldi	r24, 0x8C	; 140
    1676:	92 e0       	ldi	r25, 0x02	; 2
    1678:	0e 94 b2 21 	call	0x4364	; 0x4364 <HardwareSerial::read()>
    167c:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <inChar>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2266
    }
    while ((inChar != 'y') && (inChar != 'Y') && (inChar != 'n') &&(inChar != 'N'));
    1680:	89 37       	cpi	r24, 0x79	; 121
    1682:	31 f0       	breq	.+12     	; 0x1690 <autoSetRTC()+0x23c>
    1684:	89 35       	cpi	r24, 0x59	; 89
    1686:	21 f0       	breq	.+8      	; 0x1690 <autoSetRTC()+0x23c>
    1688:	8e 36       	cpi	r24, 0x6E	; 110
    168a:	11 f0       	breq	.+4      	; 0x1690 <autoSetRTC()+0x23c>
    168c:	8e 34       	cpi	r24, 0x4E	; 78
    168e:	71 f7       	brne	.-36     	; 0x166c <autoSetRTC()+0x218>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2267
    Serial.println(inChar);
    1690:	68 2f       	mov	r22, r24
    1692:	8c e8       	ldi	r24, 0x8C	; 140
    1694:	92 e0       	ldi	r25, 0x02	; 2
    1696:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <Print::println(char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2270
 
    // Set the RTC at the compile date/time and print a message
    if ((inChar == 'y') || (inChar == 'Y'))
    169a:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <inChar>
    169e:	8f 7d       	andi	r24, 0xDF	; 223
    16a0:	89 35       	cpi	r24, 0x59	; 89
    16a2:	d9 f4       	brne	.+54     	; 0x16da <autoSetRTC()+0x286>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2272
    {
      writeRTC(seconds, minutes, hours, day, month, year);
    16a4:	e0 90 b3 01 	lds	r14, 0x01B3	; 0x8001b3 <year>
    16a8:	00 91 b4 01 	lds	r16, 0x01B4	; 0x8001b4 <month>
    16ac:	20 91 b5 01 	lds	r18, 0x01B5	; 0x8001b5 <day>
    16b0:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <hours>
    16b4:	60 91 b7 01 	lds	r22, 0x01B7	; 0x8001b7 <minutes>
    16b8:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <seconds>
    16bc:	0e 94 33 07 	call	0xe66	; 0xe66 <writeRTC(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2273
      Serial.print(F("IOS: RTC set at compile time - Now: "));
    16c0:	68 ed       	ldi	r22, 0xD8	; 216
    16c2:	71 e0       	ldi	r23, 0x01	; 1
    16c4:	8c e8       	ldi	r24, 0x8C	; 140
    16c6:	92 e0       	ldi	r25, 0x02	; 2
    16c8:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2274
      printDateTime(1);
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	0e 94 fe 07 	call	0xffc	; 0xffc <printDateTime(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2275
      Serial.println();
    16d2:	8c e8       	ldi	r24, 0x8C	; 140
    16d4:	92 e0       	ldi	r25, 0x02	; 2
    16d6:	0e 94 c5 23 	call	0x478a	; 0x478a <Print::println()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2279
    }

    // Reset the "Oscillator Stop Flag" 
    Wire.beginTransmission(DS3231_RTC);
    16da:	68 e6       	ldi	r22, 0x68	; 104
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	86 ee       	ldi	r24, 0xE6	; 230
    16e0:	91 e0       	ldi	r25, 0x01	; 1
    16e2:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2280
    Wire.write(DS3231_STATRG);                    // Set the DS3231 Status Register
    16e6:	6f e0       	ldi	r22, 0x0F	; 15
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	86 ee       	ldi	r24, 0xE6	; 230
    16ec:	91 e0       	ldi	r25, 0x01	; 1
    16ee:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2281
    Wire.write(0x08);                             // Reset the "Oscillator Stop Flag" (32KHz output left enabled)
    16f2:	68 e0       	ldi	r22, 0x08	; 8
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	86 ee       	ldi	r24, 0xE6	; 230
    16f8:	91 e0       	ldi	r25, 0x01	; 1
    16fa:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2282
    Wire.endTransmission();
    16fe:	86 ee       	ldi	r24, 0xE6	; 230
    1700:	91 e0       	ldi	r25, 0x01	; 1
    1702:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <TwoWire::endTransmission()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2235
  Wire.write(DS3231_STATRG);                      // Set the DS3231 Status Register
  Wire.endTransmission();
  Wire.requestFrom(DS3231_RTC, 1);
  OscStopFlag = Wire.read() & 0x80;               // Read the "Oscillator Stop Flag"

  if (OscStopFlag)
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	27 c0       	rjmp	.+78     	; 0x1758 <autoSetRTC()+0x304>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2245
    minutes = compTimeStr.substring(3,5).toInt();
    hours = compTimeStr.substring(0,2).toInt();
    day = compDateStr.substring(4,6).toInt();
    switch (compDateStr[0]) 
      {
        case 'J': month = compDateStr[1] == 'a' ? 1 : month = compDateStr[2] == 'n' ? 6 : 7; break;
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	84 cf       	rjmp	.-248    	; 0x1616 <autoSetRTC()+0x1c2>
    170e:	86 e0       	ldi	r24, 0x06	; 6
    1710:	82 cf       	rjmp	.-252    	; 0x1616 <autoSetRTC()+0x1c2>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2246
        case 'F': month = 2; break;
    1712:	82 e0       	ldi	r24, 0x02	; 2
    1714:	80 cf       	rjmp	.-256    	; 0x1616 <autoSetRTC()+0x1c2>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2247
        case 'A': month = compDateStr[2] == 'r' ? 4 : 8; break;
    1716:	62 e0       	ldi	r22, 0x02	; 2
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	85 ed       	ldi	r24, 0xD5	; 213
    171c:	91 e0       	ldi	r25, 0x01	; 1
    171e:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <String::operator[](unsigned int) const>
    1722:	82 37       	cpi	r24, 0x72	; 114
    1724:	11 f0       	breq	.+4      	; 0x172a <autoSetRTC()+0x2d6>
    1726:	88 e0       	ldi	r24, 0x08	; 8
    1728:	76 cf       	rjmp	.-276    	; 0x1616 <autoSetRTC()+0x1c2>
    172a:	84 e0       	ldi	r24, 0x04	; 4
    172c:	74 cf       	rjmp	.-280    	; 0x1616 <autoSetRTC()+0x1c2>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2248
        case 'M': month = compDateStr[2] == 'r' ? 3 : 5; break;
    172e:	62 e0       	ldi	r22, 0x02	; 2
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	85 ed       	ldi	r24, 0xD5	; 213
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <String::operator[](unsigned int) const>
    173a:	82 37       	cpi	r24, 0x72	; 114
    173c:	11 f0       	breq	.+4      	; 0x1742 <autoSetRTC()+0x2ee>
    173e:	85 e0       	ldi	r24, 0x05	; 5
    1740:	6a cf       	rjmp	.-300    	; 0x1616 <autoSetRTC()+0x1c2>
    1742:	83 e0       	ldi	r24, 0x03	; 3
    1744:	68 cf       	rjmp	.-304    	; 0x1616 <autoSetRTC()+0x1c2>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2249
        case 'S': month = 9; break;
    1746:	89 e0       	ldi	r24, 0x09	; 9
    1748:	66 cf       	rjmp	.-308    	; 0x1616 <autoSetRTC()+0x1c2>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2250
        case 'O': month = 10; break;
    174a:	8a e0       	ldi	r24, 0x0A	; 10
    174c:	64 cf       	rjmp	.-312    	; 0x1616 <autoSetRTC()+0x1c2>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2251
        case 'N': month = 11; break;
    174e:	8b e0       	ldi	r24, 0x0B	; 11
    1750:	62 cf       	rjmp	.-316    	; 0x1616 <autoSetRTC()+0x1c2>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2252
        case 'D': month = 12; break;
    1752:	8c e0       	ldi	r24, 0x0C	; 12
    1754:	60 cf       	rjmp	.-320    	; 0x1616 <autoSetRTC()+0x1c2>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2218
// Return value: 0 if RTC not present, 1 if found.
{
  byte    OscStopFlag;

  Wire.beginTransmission(DS3231_RTC);
  if (Wire.endTransmission() != 0) return 0;      // RTC not found
    1756:	80 e0       	ldi	r24, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2285
    Wire.write(DS3231_STATRG);                    // Set the DS3231 Status Register
    Wire.write(0x08);                             // Reset the "Oscillator Stop Flag" (32KHz output left enabled)
    Wire.endTransmission();
  }
  return 1;
}
    1758:	26 96       	adiw	r28, 0x06	; 6
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	cd bf       	out	0x3d, r28	; 61
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	0f 91       	pop	r16
    176a:	ef 90       	pop	r14
    176c:	08 95       	ret

0000176e <setup>:
setup():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:351
byte          diskSet;                    // Current "Disk Set"

// ------------------------------------------------------------------------------

void setup() 
{
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:373
  // ----------------------------------------
  // INITIALIZATION
  // ----------------------------------------

  // Initialize RESET_ and WAIT_RES_
  pinMode(RESET_, OUTPUT);                        // Configure RESET_ and set it ACTIVE
    1772:	61 e0       	ldi	r22, 0x01	; 1
    1774:	86 e1       	ldi	r24, 0x16	; 22
    1776:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:374
  digitalWrite(RESET_, LOW);
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	86 e1       	ldi	r24, 0x16	; 22
    177e:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:375
  pinMode(WAIT_RES_, OUTPUT);                     // Configure WAIT_RES_ and set it ACTIVE to reset the WAIT FF (U1C/D)
    1782:	61 e0       	ldi	r22, 0x01	; 1
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:376
  digitalWrite(WAIT_RES_, LOW);
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:379

  // Check USER Key for boot mode changes 
  pinMode(USER, INPUT_PULLUP);                    // Read USER Key to enter into the boot mode selection
    1792:	62 e0       	ldi	r22, 0x02	; 2
    1794:	8d e0       	ldi	r24, 0x0D	; 13
    1796:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:380
  if (!digitalRead(USER)) bootSelection = 1;
    179a:	8d e0       	ldi	r24, 0x0D	; 13
    179c:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <digitalRead>
    17a0:	ec 01       	movw	r28, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:383

  // Initialize USER,  INT_, RAM_CE2, and BUSREQ_
  pinMode(USER, OUTPUT);                          // USER led OFF
    17a2:	61 e0       	ldi	r22, 0x01	; 1
    17a4:	8d e0       	ldi	r24, 0x0D	; 13
    17a6:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:384
  digitalWrite(USER, HIGH);
    17aa:	61 e0       	ldi	r22, 0x01	; 1
    17ac:	8d e0       	ldi	r24, 0x0D	; 13
    17ae:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:385
  pinMode(INT_, INPUT_PULLUP);                    // Configure INT_ and set it NOT ACTIVE
    17b2:	62 e0       	ldi	r22, 0x02	; 2
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:386
  pinMode(INT_, OUTPUT);
    17ba:	61 e0       	ldi	r22, 0x01	; 1
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:387
  digitalWrite(INT_, HIGH);
    17c2:	61 e0       	ldi	r22, 0x01	; 1
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:388
  pinMode(RAM_CE2, OUTPUT);                       // Configure RAM_CE2 as output
    17ca:	61 e0       	ldi	r22, 0x01	; 1
    17cc:	82 e0       	ldi	r24, 0x02	; 2
    17ce:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:389
  digitalWrite(RAM_CE2, HIGH);                    // Set RAM_CE2 active
    17d2:	61 e0       	ldi	r22, 0x01	; 1
    17d4:	82 e0       	ldi	r24, 0x02	; 2
    17d6:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:390
  pinMode(WAIT_, INPUT);                          // Configure WAIT_ as input
    17da:	60 e0       	ldi	r22, 0x00	; 0
    17dc:	83 e0       	ldi	r24, 0x03	; 3
    17de:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:391
  pinMode(BUSREQ_, INPUT_PULLUP);                 // Set BUSREQ_ HIGH
    17e2:	62 e0       	ldi	r22, 0x02	; 2
    17e4:	8e e0       	ldi	r24, 0x0E	; 14
    17e6:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:392
  pinMode(BUSREQ_, OUTPUT);
    17ea:	61 e0       	ldi	r22, 0x01	; 1
    17ec:	8e e0       	ldi	r24, 0x0E	; 14
    17ee:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:393
  digitalWrite(BUSREQ_, HIGH);
    17f2:	61 e0       	ldi	r22, 0x01	; 1
    17f4:	8e e0       	ldi	r24, 0x0E	; 14
    17f6:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:396

  // Initialize D0-D7, AD0, MREQ_, RD_ and WR_
  DDRA = 0x00;                                    // Configure Z80 data bus D0-D7 (PA0-PA7) as input with pull-up
    17fa:	1a ba       	out	0x1a, r1	; 26
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:397
  PORTA = 0xFF;
    17fc:	8f ef       	ldi	r24, 0xFF	; 255
    17fe:	8b bb       	out	0x1b, r24	; 27
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:398
  pinMode(MREQ_, INPUT_PULLUP);                   // Configure MREQ_ as input with pull-up
    1800:	62 e0       	ldi	r22, 0x02	; 2
    1802:	85 e1       	ldi	r24, 0x15	; 21
    1804:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:399
  pinMode(RD_, INPUT_PULLUP);                     // Configure RD_ as input with pull-up
    1808:	62 e0       	ldi	r22, 0x02	; 2
    180a:	84 e1       	ldi	r24, 0x14	; 20
    180c:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:400
  pinMode(WR_, INPUT_PULLUP);                     // Configure WR_ as input with pull-up
    1810:	62 e0       	ldi	r22, 0x02	; 2
    1812:	83 e1       	ldi	r24, 0x13	; 19
    1814:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:401
  pinMode(AD0, INPUT_PULLUP);
    1818:	62 e0       	ldi	r22, 0x02	; 2
    181a:	82 e1       	ldi	r24, 0x12	; 18
    181c:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:404

  // Initialize the Logical RAM Bank (32KB) to map into the lower half of the Z80 addressing space
  pinMode(BANK0, OUTPUT);                         // Set RAM Logical Bank 1 (Os Bank 0)
    1820:	61 e0       	ldi	r22, 0x01	; 1
    1822:	8c e0       	ldi	r24, 0x0C	; 12
    1824:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:405
  digitalWrite(BANK0, HIGH);
    1828:	61 e0       	ldi	r22, 0x01	; 1
    182a:	8c e0       	ldi	r24, 0x0C	; 12
    182c:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:406
  pinMode(BANK1, OUTPUT);
    1830:	61 e0       	ldi	r22, 0x01	; 1
    1832:	8b e0       	ldi	r24, 0x0B	; 11
    1834:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:407
  digitalWrite(BANK1, LOW);
    1838:	60 e0       	ldi	r22, 0x00	; 0
    183a:	8b e0       	ldi	r24, 0x0B	; 11
    183c:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:410

  // Initialize CLK (single clock pulses mode) and reset the Z80 CPU
  pinMode(CLK, OUTPUT);                           // Set CLK as output
    1840:	61 e0       	ldi	r22, 0x01	; 1
    1842:	8f e0       	ldi	r24, 0x0F	; 15
    1844:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:411
  singlePulsesResetZ80();                         // Reset the Z80 CPU using single clock pulses
    1848:	0e 94 21 05 	call	0xa42	; 0xa42 <singlePulsesResetZ80()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:414

  // Initialize MCU_RTS and MCU_CTS and reset uTerm (A071218-R250119) if present
  pinMode(MCU_CTS_, INPUT_PULLUP);                // Parked (not used)
    184c:	62 e0       	ldi	r22, 0x02	; 2
    184e:	8a e0       	ldi	r24, 0x0A	; 10
    1850:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:415
  pinMode(MCU_RTS_, OUTPUT);
    1854:	61 e0       	ldi	r22, 0x01	; 1
    1856:	87 e1       	ldi	r24, 0x17	; 23
    1858:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:416
  digitalWrite(MCU_RTS_, LOW);                    // Reset the uTerm optional add-on board
    185c:	60 e0       	ldi	r22, 0x00	; 0
    185e:	87 e1       	ldi	r24, 0x17	; 23
    1860:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:417
  delay(100); 
    1864:	64 e6       	ldi	r22, 0x64	; 100
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	0e 94 41 26 	call	0x4c82	; 0x4c82 <delay>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:418
  digitalWrite(MCU_RTS_, HIGH); 
    1870:	61 e0       	ldi	r22, 0x01	; 1
    1872:	87 e1       	ldi	r24, 0x17	; 23
    1874:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:419
  delay(500);
    1878:	64 ef       	ldi	r22, 0xF4	; 244
    187a:	71 e0       	ldi	r23, 0x01	; 1
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	0e 94 41 26 	call	0x4c82	; 0x4c82 <delay>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:422

  // Read the Z80 CPU speed mode
  if (EEPROM.read(clockModeAddr) > 1)             // Check if it is a valid value, otherwise set it to low speed
    1884:	8d e0       	ldi	r24, 0x0D	; 13
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	0e 94 77 04 	call	0x8ee	; 0x8ee <EEPROMClass::read(int) [clone .isra.1]>
    188c:	82 30       	cpi	r24, 0x02	; 2
    188e:	28 f0       	brcs	.+10     	; 0x189a <setup+0x12c>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:425
  // Not a valid value. Set it to low speed
  {
    EEPROM.update(clockModeAddr, 1);
    1890:	61 e0       	ldi	r22, 0x01	; 1
    1892:	8d e0       	ldi	r24, 0x0D	; 13
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:427
  }
  clockMode = EEPROM.read(clockModeAddr);         // Read the previous stored value
    189a:	8d e0       	ldi	r24, 0x0D	; 13
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 94 77 04 	call	0x8ee	; 0x8ee <EEPROMClass::read(int) [clone .isra.1]>
    18a2:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <clockMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:430

  // Read the stored Disk Set. If not valid set it to 0
  diskSet = EEPROM.read(diskSetAddr);
    18a6:	8e e0       	ldi	r24, 0x0E	; 14
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	0e 94 77 04 	call	0x8ee	; 0x8ee <EEPROMClass::read(int) [clone .isra.1]>
    18ae:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <diskSet>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:431
  if (diskSet >= maxDiskSet) 
    18b2:	86 30       	cpi	r24, 0x06	; 6
    18b4:	38 f0       	brcs	.+14     	; 0x18c4 <setup+0x156>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:433
  {
    EEPROM.update(diskSetAddr, 0);
    18b6:	60 e0       	ldi	r22, 0x00	; 0
    18b8:	8e e0       	ldi	r24, 0x0E	; 14
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:434
    diskSet = 0;
    18c0:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <diskSet>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:438
  }

  // Initialize the EXP_PORT (I2C) and search for "known" optional modules
  Wire.begin();                                   // Wake up I2C bus
    18c4:	86 ee       	ldi	r24, 0xE6	; 230
    18c6:	91 e0       	ldi	r25, 0x01	; 1
    18c8:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <TwoWire::begin()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:439
  Wire.beginTransmission(GPIOEXP_ADDR);
    18cc:	60 e2       	ldi	r22, 0x20	; 32
    18ce:	70 e0       	ldi	r23, 0x00	; 0
    18d0:	86 ee       	ldi	r24, 0xE6	; 230
    18d2:	91 e0       	ldi	r25, 0x01	; 1
    18d4:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:440
  if (Wire.endTransmission() == 0) 
    18d8:	86 ee       	ldi	r24, 0xE6	; 230
    18da:	91 e0       	ldi	r25, 0x01	; 1
    18dc:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <TwoWire::endTransmission()>
    18e0:	81 11       	cpse	r24, r1
    18e2:	19 c0       	rjmp	.+50     	; 0x1916 <setup+0x1a8>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:443
  // Found GPE expansion
  {
    moduleGPIO = 1;                               // Set to 1 if GPIO Module is found
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <moduleGPIO>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:447
    // Set pullup enabled for GPA0 and GPA2:
    //  this just in case the SPP adapter is used and a printer is connected and powered on before the Z80-MBC2,
    //  to avoid a possible "strange" behavior of the printer (GPA0 = STROBE_, GPA2 = INIT_. See SPP Adapter schematic)
    Wire.beginTransmission(GPIOEXP_ADDR);
    18ea:	60 e2       	ldi	r22, 0x20	; 32
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    18ee:	86 ee       	ldi	r24, 0xE6	; 230
    18f0:	91 e0       	ldi	r25, 0x01	; 1
    18f2:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:448
    Wire.write(GPPUA_REG);                        // Select GPPUA
    18f6:	6c e0       	ldi	r22, 0x0C	; 12
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	86 ee       	ldi	r24, 0xE6	; 230
    18fc:	91 e0       	ldi	r25, 0x01	; 1
    18fe:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:449
    Wire.write(0b00000101);                       // Write value (1 = pullup enabled, 0 = pullup disabled)
    1902:	65 e0       	ldi	r22, 0x05	; 5
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	86 ee       	ldi	r24, 0xE6	; 230
    1908:	91 e0       	ldi	r25, 0x01	; 1
    190a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:450
    Wire.endTransmission();
    190e:	86 ee       	ldi	r24, 0xE6	; 230
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <TwoWire::endTransmission()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:454
  }

  // Check the serial speed index and set it to the default if needed
  if (EEPROM.read(serBaudAddr) >= maxBaudIndex)
    1916:	8f e0       	ldi	r24, 0x0F	; 15
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	0e 94 77 04 	call	0x8ee	; 0x8ee <EEPROMClass::read(int) [clone .isra.1]>
    191e:	8a 30       	cpi	r24, 0x0A	; 10
    1920:	28 f0       	brcs	.+10     	; 0x192c <setup+0x1be>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:457
  // Invalid value. Set it to the default 115200 index
  {
    EEPROM.update(serBaudAddr, 9);
    1922:	69 e0       	ldi	r22, 0x09	; 9
    1924:	8f e0       	ldi	r24, 0x0F	; 15
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:461
  }
  
  // Print some system information
  Serial.begin(indexToBaud(EEPROM.read(serBaudAddr)));
    192c:	8f e0       	ldi	r24, 0x0F	; 15
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	0e 94 77 04 	call	0x8ee	; 0x8ee <EEPROMClass::read(int) [clone .isra.1]>
    1934:	40 e0       	ldi	r20, 0x00	; 0
    1936:	52 ec       	ldi	r21, 0xC2	; 194
    1938:	61 e0       	ldi	r22, 0x01	; 1
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	89 30       	cpi	r24, 0x09	; 9
    193e:	50 f4       	brcc	.+20     	; 0x1954 <setup+0x1e6>
    1940:	e8 2f       	mov	r30, r24
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	ee 0f       	add	r30, r30
    1946:	ff 1f       	adc	r31, r31
    1948:	ec 5e       	subi	r30, 0xEC	; 236
    194a:	fe 4f       	sbci	r31, 0xFE	; 254
    194c:	40 81       	ld	r20, Z
    194e:	51 81       	ldd	r21, Z+1	; 0x01
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	60 e0       	ldi	r22, 0x00	; 0
_ZN14HardwareSerial5beginEm():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1954:	26 e0       	ldi	r18, 0x06	; 6
    1956:	8c e8       	ldi	r24, 0x8C	; 140
    1958:	92 e0       	ldi	r25, 0x02	; 2
    195a:	0e 94 70 22 	call	0x44e0	; 0x44e0 <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:462
  Serial.println(F("\r\n\nZ80-MBC2 - A040618\r\nIOS - I/O Subsystem - S220718-R290823\r\n"));
    195e:	61 e4       	ldi	r22, 0x41	; 65
    1960:	75 e0       	ldi	r23, 0x05	; 5
    1962:	8c e8       	ldi	r24, 0x8C	; 140
    1964:	92 e0       	ldi	r25, 0x02	; 2
    1966:	0e 94 c9 23 	call	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:465

  // Print if the input serial buffer is 128 bytes wide (this is needed for xmodem protocol support)
  if (SERIAL_RX_BUFFER_SIZE >= 128) Serial.println(F("IOS: Found extended serial Rx buffer"));
    196a:	6c e1       	ldi	r22, 0x1C	; 28
    196c:	75 e0       	ldi	r23, 0x05	; 5
    196e:	8c e8       	ldi	r24, 0x8C	; 140
    1970:	92 e0       	ldi	r25, 0x02	; 2
    1972:	0e 94 c9 23 	call	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:468

  // Print the Z80 clock speed mode
  Serial.print(F("IOS: Z80 clock set at "));
    1976:	65 e0       	ldi	r22, 0x05	; 5
    1978:	75 e0       	ldi	r23, 0x05	; 5
    197a:	8c e8       	ldi	r24, 0x8C	; 140
    197c:	92 e0       	ldi	r25, 0x02	; 2
    197e:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:469
  if (clockMode) Serial.print(CLOCK_LOW);
    1982:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <clockMode>
    1986:	64 ea       	ldi	r22, 0xA4	; 164
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	81 11       	cpse	r24, r1
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <setup+0x224>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:470
  else Serial.print(CLOCK_HIGH);
    198e:	6c ea       	ldi	r22, 0xAC	; 172
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	8c e8       	ldi	r24, 0x8C	; 140
    1994:	92 e0       	ldi	r25, 0x02	; 2
    1996:	0e 94 b6 23 	call	0x476c	; 0x476c <Print::print(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:471
  Serial.println(F("MHz"));
    199a:	61 e0       	ldi	r22, 0x01	; 1
    199c:	75 e0       	ldi	r23, 0x05	; 5
    199e:	8c e8       	ldi	r24, 0x8C	; 140
    19a0:	92 e0       	ldi	r25, 0x02	; 2
    19a2:	0e 94 c9 23 	call	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:474

  // Print RTC and GPIO informations if found
  foundRTC = autoSetRTC();                        // Check if RTC is present and initialize it as needed
    19a6:	0e 94 2a 0a 	call	0x1454	; 0x1454 <autoSetRTC()>
    19aa:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <foundRTC>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:475
  if (moduleGPIO) Serial.println(F("IOS: Found GPE Option"));
    19ae:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <moduleGPIO>
    19b2:	88 23       	and	r24, r24
    19b4:	31 f0       	breq	.+12     	; 0x19c2 <setup+0x254>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:475 (discriminator 1)
    19b6:	6b ee       	ldi	r22, 0xEB	; 235
    19b8:	74 e0       	ldi	r23, 0x04	; 4
    19ba:	8c e8       	ldi	r24, 0x8C	; 140
    19bc:	92 e0       	ldi	r25, 0x02	; 2
    19be:	0e 94 c9 23 	call	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:478

  // Print CP/M Autoexec on cold boot status
  Serial.print(F("IOS: CP/M Autoexec is "));
    19c2:	64 ed       	ldi	r22, 0xD4	; 212
    19c4:	74 e0       	ldi	r23, 0x04	; 4
    19c6:	8c e8       	ldi	r24, 0x8C	; 140
    19c8:	92 e0       	ldi	r25, 0x02	; 2
    19ca:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:479
  if (EEPROM.read(autoexecFlagAddr) > 1) EEPROM.update(autoexecFlagAddr, 0); // Reset AUTOEXEC flag to OFF if invalid
    19ce:	8c e0       	ldi	r24, 0x0C	; 12
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	0e 94 77 04 	call	0x8ee	; 0x8ee <EEPROMClass::read(int) [clone .isra.1]>
    19d6:	82 30       	cpi	r24, 0x02	; 2
    19d8:	28 f0       	brcs	.+10     	; 0x19e4 <setup+0x276>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:479 (discriminator 1)
    19da:	60 e0       	ldi	r22, 0x00	; 0
    19dc:	8c e0       	ldi	r24, 0x0C	; 12
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:480
  autoexecFlag = EEPROM.read(autoexecFlagAddr);   // Read the previous stored AUTOEXEC flag
    19e4:	8c e0       	ldi	r24, 0x0C	; 12
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0e 94 77 04 	call	0x8ee	; 0x8ee <EEPROMClass::read(int) [clone .isra.1]>
    19ec:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <autoexecFlag>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:481
  if (autoexecFlag) Serial.println(F("ON"));
    19f0:	61 ed       	ldi	r22, 0xD1	; 209
    19f2:	74 e0       	ldi	r23, 0x04	; 4
    19f4:	81 11       	cpse	r24, r1
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <setup+0x28e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:482
  else Serial.println(F("OFF"));
    19f8:	6d ec       	ldi	r22, 0xCD	; 205
    19fa:	74 e0       	ldi	r23, 0x04	; 4
    19fc:	8c e8       	ldi	r24, 0x8C	; 140
    19fe:	92 e0       	ldi	r25, 0x02	; 2
    1a00:	0e 94 c9 23 	call	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:489
  // ----------------------------------------
  // BOOT SELECTION AND SYS PARAMETERS MENU
  // ----------------------------------------

  // Boot selection and system parameters menu if requested
  mountSD(&filesysSD); mountSD(&filesysSD);       // Try to muont the SD volume
    1a04:	88 e8       	ldi	r24, 0x88	; 136
    1a06:	91 e0       	ldi	r25, 0x01	; 1
    1a08:	0e 94 2f 05 	call	0xa5e	; 0xa5e <mountSD(FATFS*)>
    1a0c:	88 e8       	ldi	r24, 0x88	; 136
    1a0e:	91 e0       	ldi	r25, 0x01	; 1
    1a10:	0e 94 2f 05 	call	0xa5e	; 0xa5e <mountSD(FATFS*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:490
  bootMode = EEPROM.read(bootModeAddr);           // Read the previous stored boot mode
    1a14:	8a e0       	ldi	r24, 0x0A	; 10
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	0e 94 77 04 	call	0x8ee	; 0x8ee <EEPROMClass::read(int) [clone .isra.1]>
    1a1c:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <bootMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:491
  if ((bootSelection == 1 ) || (bootMode > maxBootMode))
    1a20:	cd 2b       	or	r28, r29
    1a22:	19 f0       	breq	.+6      	; 0x1a2a <setup+0x2bc>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:491 (discriminator 1)
    1a24:	85 30       	cpi	r24, 0x05	; 5
    1a26:	08 f4       	brcc	.+2      	; 0x1a2a <setup+0x2bc>
    1a28:	f5 c0       	rjmp	.+490    	; 0x1c14 <setup+0x4a6>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:495
  // Enter in the boot selection menu if USER key was pressed at startup 
  //   or an invalid bootMode code was read from internal EEPROM
  {
    while (Serial.available() > 0)                // Flush input serial Rx buffer
    1a2a:	8c e8       	ldi	r24, 0x8C	; 140
    1a2c:	92 e0       	ldi	r25, 0x02	; 2
    1a2e:	0e 94 98 21 	call	0x4330	; 0x4330 <HardwareSerial::available()>
    1a32:	18 16       	cp	r1, r24
    1a34:	19 06       	cpc	r1, r25
    1a36:	2c f4       	brge	.+10     	; 0x1a42 <setup+0x2d4>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:497
    {
      Serial.read();
    1a38:	8c e8       	ldi	r24, 0x8C	; 140
    1a3a:	92 e0       	ldi	r25, 0x02	; 2
    1a3c:	0e 94 b2 21 	call	0x4364	; 0x4364 <HardwareSerial::read()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:495
  bootMode = EEPROM.read(bootModeAddr);           // Read the previous stored boot mode
  if ((bootSelection == 1 ) || (bootMode > maxBootMode))
  // Enter in the boot selection menu if USER key was pressed at startup 
  //   or an invalid bootMode code was read from internal EEPROM
  {
    while (Serial.available() > 0)                // Flush input serial Rx buffer
    1a40:	f4 cf       	rjmp	.-24     	; 0x1a2a <setup+0x2bc>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:499
    {
      Serial.read();
    }
    Serial.println();
    1a42:	8c e8       	ldi	r24, 0x8C	; 140
    1a44:	92 e0       	ldi	r25, 0x02	; 2
    1a46:	0e 94 c5 23 	call	0x478a	; 0x478a <Print::println()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:500
    Serial.println(F("IOS: Select boot mode or system parameters:"));
    1a4a:	61 ea       	ldi	r22, 0xA1	; 161
    1a4c:	74 e0       	ldi	r23, 0x04	; 4
    1a4e:	8c e8       	ldi	r24, 0x8C	; 140
    1a50:	92 e0       	ldi	r25, 0x02	; 2
    1a52:	0e 94 c9 23 	call	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:501
    Serial.println();
    1a56:	8c e8       	ldi	r24, 0x8C	; 140
    1a58:	92 e0       	ldi	r25, 0x02	; 2
    1a5a:	0e 94 c5 23 	call	0x478a	; 0x478a <Print::println()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:502
    if (bootMode <= maxBootMode)
    1a5e:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <bootMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:361
//
// ------------------------------------------------------------------------------

  byte          data;                       // External RAM data byte
  word          address;                    // External RAM current address;
  char          minBootChar   = '1';        // Minimum allowed ASCII value selection (boot selection)
    1a62:	d1 e3       	ldi	r29, 0x31	; 49
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:502
      Serial.read();
    }
    Serial.println();
    Serial.println(F("IOS: Select boot mode or system parameters:"));
    Serial.println();
    if (bootMode <= maxBootMode)
    1a64:	85 30       	cpi	r24, 0x05	; 5
    1a66:	c0 f4       	brcc	.+48     	; 0x1a98 <setup+0x32a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:506
    // Previous valid boot mode read, so enable '0' selection
    {
      minBootChar = '0';
      Serial.print(F(" 0: No change ("));
    1a68:	61 e9       	ldi	r22, 0x91	; 145
    1a6a:	74 e0       	ldi	r23, 0x04	; 4
    1a6c:	8c e8       	ldi	r24, 0x8C	; 140
    1a6e:	92 e0       	ldi	r25, 0x02	; 2
    1a70:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:507
      Serial.print(bootMode + 1);
    1a74:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <bootMode>
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	6f 5f       	subi	r22, 0xFF	; 255
    1a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7e:	4a e0       	ldi	r20, 0x0A	; 10
    1a80:	50 e0       	ldi	r21, 0x00	; 0
    1a82:	8c e8       	ldi	r24, 0x8C	; 140
    1a84:	92 e0       	ldi	r25, 0x02	; 2
    1a86:	0e 94 98 24 	call	0x4930	; 0x4930 <Print::print(int, int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:508
      Serial.println(")");
    1a8a:	65 e8       	ldi	r22, 0x85	; 133
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	8c e8       	ldi	r24, 0x8C	; 140
    1a90:	92 e0       	ldi	r25, 0x02	; 2
    1a92:	0e 94 db 23 	call	0x47b6	; 0x47b6 <Print::println(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:505
    Serial.println(F("IOS: Select boot mode or system parameters:"));
    Serial.println();
    if (bootMode <= maxBootMode)
    // Previous valid boot mode read, so enable '0' selection
    {
      minBootChar = '0';
    1a96:	d0 e3       	ldi	r29, 0x30	; 48
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:510
      Serial.print(F(" 0: No change ("));
      Serial.print(bootMode + 1);
      Serial.println(")");
    }
    Serial.println(F(" 1: Basic"));   
    1a98:	67 e8       	ldi	r22, 0x87	; 135
    1a9a:	74 e0       	ldi	r23, 0x04	; 4
    1a9c:	8c e8       	ldi	r24, 0x8C	; 140
    1a9e:	92 e0       	ldi	r25, 0x02	; 2
    1aa0:	0e 94 c9 23 	call	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:511
    Serial.println(F(" 2: Forth"));
    1aa4:	6d e7       	ldi	r22, 0x7D	; 125
    1aa6:	74 e0       	ldi	r23, 0x04	; 4
    1aa8:	8c e8       	ldi	r24, 0x8C	; 140
    1aaa:	92 e0       	ldi	r25, 0x02	; 2
    1aac:	0e 94 c9 23 	call	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:512
    Serial.print(F(" 3: Load/set OS "));
    1ab0:	6c e6       	ldi	r22, 0x6C	; 108
    1ab2:	74 e0       	ldi	r23, 0x04	; 4
    1ab4:	8c e8       	ldi	r24, 0x8C	; 140
    1ab6:	92 e0       	ldi	r25, 0x02	; 2
    1ab8:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:513
    printOsName(diskSet);
    1abc:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <diskSet>
    1ac0:	0e 94 fd 05 	call	0xbfa	; 0xbfa <printOsName(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:514
    Serial.println(F("\r\n 4: Autoboot"));
    1ac4:	6d e5       	ldi	r22, 0x5D	; 93
    1ac6:	74 e0       	ldi	r23, 0x04	; 4
    1ac8:	8c e8       	ldi	r24, 0x8C	; 140
    1aca:	92 e0       	ldi	r25, 0x02	; 2
    1acc:	0e 94 c9 23 	call	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:515
    Serial.println(F(" 5: iLoad"));
    1ad0:	63 e5       	ldi	r22, 0x53	; 83
    1ad2:	74 e0       	ldi	r23, 0x04	; 4
    1ad4:	8c e8       	ldi	r24, 0x8C	; 140
    1ad6:	92 e0       	ldi	r25, 0x02	; 2
    1ad8:	0e 94 c9 23 	call	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:516
    Serial.print(F(" 6: Change Z80 clock speed (->"));
    1adc:	64 e3       	ldi	r22, 0x34	; 52
    1ade:	74 e0       	ldi	r23, 0x04	; 4
    1ae0:	8c e8       	ldi	r24, 0x8C	; 140
    1ae2:	92 e0       	ldi	r25, 0x02	; 2
    1ae4:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:517
    if (clockMode) Serial.print(CLOCK_HIGH);
    1ae8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <clockMode>
    1aec:	6c ea       	ldi	r22, 0xAC	; 172
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	81 11       	cpse	r24, r1
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <setup+0x38a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:518
    else Serial.print(CLOCK_LOW);
    1af4:	64 ea       	ldi	r22, 0xA4	; 164
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	8c e8       	ldi	r24, 0x8C	; 140
    1afa:	92 e0       	ldi	r25, 0x02	; 2
    1afc:	0e 94 b6 23 	call	0x476c	; 0x476c <Print::print(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:519
    Serial.println(F("MHz)"));
    1b00:	6f e2       	ldi	r22, 0x2F	; 47
    1b02:	74 e0       	ldi	r23, 0x04	; 4
    1b04:	8c e8       	ldi	r24, 0x8C	; 140
    1b06:	92 e0       	ldi	r25, 0x02	; 2
    1b08:	0e 94 c9 23 	call	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:520
    Serial.print(F(" 7: Toggle CP/M Autoexec (->"));
    1b0c:	62 e1       	ldi	r22, 0x12	; 18
    1b0e:	74 e0       	ldi	r23, 0x04	; 4
    1b10:	8c e8       	ldi	r24, 0x8C	; 140
    1b12:	92 e0       	ldi	r25, 0x02	; 2
    1b14:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:521
    if (!autoexecFlag) Serial.print("ON");
    1b18:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <autoexecFlag>
    1b1c:	81 11       	cpse	r24, r1
    1b1e:	db c0       	rjmp	.+438    	; 0x1cd6 <setup+0x568>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:521 (discriminator 1)
    1b20:	6e ea       	ldi	r22, 0xAE	; 174
    1b22:	70 e0       	ldi	r23, 0x00	; 0
    1b24:	8c e8       	ldi	r24, 0x8C	; 140
    1b26:	92 e0       	ldi	r25, 0x02	; 2
    1b28:	0e 94 b6 23 	call	0x476c	; 0x476c <Print::print(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:523
    else Serial.print(F("OFF"));
    Serial.println(")");
    1b2c:	65 e8       	ldi	r22, 0x85	; 133
    1b2e:	70 e0       	ldi	r23, 0x00	; 0
    1b30:	8c e8       	ldi	r24, 0x8C	; 140
    1b32:	92 e0       	ldi	r25, 0x02	; 2
    1b34:	0e 94 db 23 	call	0x47b6	; 0x47b6 <Print::println(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:524
    Serial.print(F(" 8: Set serial port speed (")); 
    1b38:	62 ef       	ldi	r22, 0xF2	; 242
    1b3a:	73 e0       	ldi	r23, 0x03	; 3
    1b3c:	8c e8       	ldi	r24, 0x8C	; 140
    1b3e:	92 e0       	ldi	r25, 0x02	; 2
    1b40:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:525
    Serial.print(indexToBaud(EEPROM.read(serBaudAddr)));
    1b44:	8f e0       	ldi	r24, 0x0F	; 15
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	0e 94 77 04 	call	0x8ee	; 0x8ee <EEPROMClass::read(int) [clone .isra.1]>
    1b4c:	40 e0       	ldi	r20, 0x00	; 0
    1b4e:	52 ec       	ldi	r21, 0xC2	; 194
    1b50:	61 e0       	ldi	r22, 0x01	; 1
    1b52:	70 e0       	ldi	r23, 0x00	; 0
    1b54:	89 30       	cpi	r24, 0x09	; 9
    1b56:	50 f4       	brcc	.+20     	; 0x1b6c <setup+0x3fe>
    1b58:	e8 2f       	mov	r30, r24
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	ee 0f       	add	r30, r30
    1b5e:	ff 1f       	adc	r31, r31
    1b60:	ec 5e       	subi	r30, 0xEC	; 236
    1b62:	fe 4f       	sbci	r31, 0xFE	; 254
    1b64:	40 81       	ld	r20, Z
    1b66:	51 81       	ldd	r21, Z+1	; 0x01
    1b68:	70 e0       	ldi	r23, 0x00	; 0
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	2a e0       	ldi	r18, 0x0A	; 10
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	8c e8       	ldi	r24, 0x8C	; 140
    1b72:	92 e0       	ldi	r25, 0x02	; 2
    1b74:	0e 94 9f 24 	call	0x493e	; 0x493e <Print::print(unsigned long, int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:526
    Serial.println(")");
    1b78:	65 e8       	ldi	r22, 0x85	; 133
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	8c e8       	ldi	r24, 0x8C	; 140
    1b7e:	92 e0       	ldi	r25, 0x02	; 2
    1b80:	0e 94 db 23 	call	0x47b6	; 0x47b6 <Print::println(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:529

    // If RTC module is present add a menu choice
    if (foundRTC)
    1b84:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <foundRTC>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:362
// ------------------------------------------------------------------------------

  byte          data;                       // External RAM data byte
  word          address;                    // External RAM current address;
  char          minBootChar   = '1';        // Minimum allowed ASCII value selection (boot selection)
  char          maxSelChar    = '8';        // Maximum allowed ASCII value selection (boot selection)
    1b88:	c8 e3       	ldi	r28, 0x38	; 56
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:529
    Serial.print(F(" 8: Set serial port speed (")); 
    Serial.print(indexToBaud(EEPROM.read(serBaudAddr)));
    Serial.println(")");

    // If RTC module is present add a menu choice
    if (foundRTC)
    1b8a:	88 23       	and	r24, r24
    1b8c:	39 f0       	breq	.+14     	; 0x1b9c <setup+0x42e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:531
    {
      Serial.println(F(" 9: Set RTC time/date"));
    1b8e:	6c ed       	ldi	r22, 0xDC	; 220
    1b90:	73 e0       	ldi	r23, 0x03	; 3
    1b92:	8c e8       	ldi	r24, 0x8C	; 140
    1b94:	92 e0       	ldi	r25, 0x02	; 2
    1b96:	0e 94 c9 23 	call	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:532
      maxSelChar = '9';
    1b9a:	c9 e3       	ldi	r28, 0x39	; 57
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:536
    }

    // Ask a choice
    Serial.println();
    1b9c:	8c e8       	ldi	r24, 0x8C	; 140
    1b9e:	92 e0       	ldi	r25, 0x02	; 2
    1ba0:	0e 94 c5 23 	call	0x478a	; 0x478a <Print::println()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:537
    Serial.print(F("Enter your choice >"));
    1ba4:	68 ec       	ldi	r22, 0xC8	; 200
    1ba6:	73 e0       	ldi	r23, 0x03	; 3
    1ba8:	8c e8       	ldi	r24, 0x8C	; 140
    1baa:	92 e0       	ldi	r25, 0x02	; 2
    1bac:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:540
    do
    {
      WaitAndBlink(CHECK);
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	0e 94 61 06 	call	0xcc2	; 0xcc2 <WaitAndBlink(baudRecCheck)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:541
      inChar = Serial.read();
    1bb8:	8c e8       	ldi	r24, 0x8C	; 140
    1bba:	92 e0       	ldi	r25, 0x02	; 2
    1bbc:	0e 94 b2 21 	call	0x4364	; 0x4364 <HardwareSerial::read()>
    1bc0:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <inChar>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:543
    }               
    while ((inChar < minBootChar) || (inChar > maxSelChar));
    1bc4:	8d 17       	cp	r24, r29
    1bc6:	a4 f3       	brlt	.-24     	; 0x1bb0 <setup+0x442>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:543 (discriminator 1)
    1bc8:	c8 17       	cp	r28, r24
    1bca:	94 f3       	brlt	.-28     	; 0x1bb0 <setup+0x442>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:544
    Serial.print(inChar);
    1bcc:	68 2f       	mov	r22, r24
    1bce:	8c e8       	ldi	r24, 0x8C	; 140
    1bd0:	92 e0       	ldi	r25, 0x02	; 2
    1bd2:	0e 94 be 23 	call	0x477c	; 0x477c <Print::print(char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:545
    Serial.println(F("  Ok"));
    1bd6:	63 ec       	ldi	r22, 0xC3	; 195
    1bd8:	73 e0       	ldi	r23, 0x03	; 3
    1bda:	8c e8       	ldi	r24, 0x8C	; 140
    1bdc:	92 e0       	ldi	r25, 0x02	; 2
    1bde:	0e 94 c9 23 	call	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:548

    // Make the selected action for the system parameters choice
    switch (inChar)
    1be2:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <inChar>
    1be6:	87 33       	cpi	r24, 0x37	; 55
    1be8:	09 f4       	brne	.+2      	; 0x1bec <setup+0x47e>
    1bea:	ec c0       	rjmp	.+472    	; 0x1dc4 <setup+0x656>
    1bec:	0c f0       	brlt	.+2      	; 0x1bf0 <setup+0x482>
    1bee:	7a c0       	rjmp	.+244    	; 0x1ce4 <setup+0x576>
    1bf0:	83 33       	cpi	r24, 0x33	; 51
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <setup+0x488>
    1bf4:	80 c0       	rjmp	.+256    	; 0x1cf6 <setup+0x588>
    1bf6:	86 33       	cpi	r24, 0x36	; 54
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <setup+0x48e>
    1bfa:	d8 c0       	rjmp	.+432    	; 0x1dac <setup+0x63e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:618
        ChangeRTC();                              // Change RTC Date/Time if requested
      break;
    };
    
    // Save selectd boot program if changed
    bootMode = inChar - '1';                      // Calculate bootMode from inChar
    1bfc:	60 91 bf 01 	lds	r22, 0x01BF	; 0x8001bf <inChar>
    1c00:	61 53       	subi	r22, 0x31	; 49
    1c02:	60 93 cc 01 	sts	0x01CC, r22	; 0x8001cc <bootMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:619
    if (bootMode <= maxBootMode) EEPROM.update(bootModeAddr, bootMode); // Save to the internal EEPROM if required
    1c06:	65 30       	cpi	r22, 0x05	; 5
    1c08:	08 f0       	brcs	.+2      	; 0x1c0c <setup+0x49e>
    1c0a:	b9 c2       	rjmp	.+1394   	; 0x217e <setup+0xa10>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:619 (discriminator 1)
    1c0c:	8a e0       	ldi	r24, 0x0A	; 10
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:624
    else bootMode = EEPROM.read(bootModeAddr);    // Reload boot mode if '0' or > '5' choice selected
  }

  // Print current Disk Set and OS name (if OS boot is enabled)
  if (bootMode == 2)
    1c14:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <bootMode>
    1c18:	82 30       	cpi	r24, 0x02	; 2
    1c1a:	71 f4       	brne	.+28     	; 0x1c38 <setup+0x4ca>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:626
  {
    Serial.print(F("IOS: Current "));
    1c1c:	6d e5       	ldi	r22, 0x5D	; 93
    1c1e:	73 e0       	ldi	r23, 0x03	; 3
    1c20:	8c e8       	ldi	r24, 0x8C	; 140
    1c22:	92 e0       	ldi	r25, 0x02	; 2
    1c24:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:627
    printOsName(diskSet);
    1c28:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <diskSet>
    1c2c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <printOsName(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:628
    Serial.println();
    1c30:	8c e8       	ldi	r24, 0x8C	; 140
    1c32:	92 e0       	ldi	r25, 0x02	; 2
    1c34:	0e 94 c5 23 	call	0x478a	; 0x478a <Print::println()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:636
  // ----------------------------------------
  // Z80 PROGRAM LOAD
  // ----------------------------------------

  // Get the starting address of the program to load and boot, and its size if stored in the flash
  switch (bootMode)
    1c38:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <bootMode>
    1c3c:	82 30       	cpi	r24, 0x02	; 2
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <setup+0x4d4>
    1c40:	72 c1       	rjmp	.+740    	; 0x1f26 <setup+0x7b8>
    1c42:	08 f0       	brcs	.+2      	; 0x1c46 <setup+0x4d8>
    1c44:	42 c1       	rjmp	.+644    	; 0x1eca <setup+0x75c>
    1c46:	88 23       	and	r24, r24
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <setup+0x4de>
    1c4a:	56 c1       	rjmp	.+684    	; 0x1ef8 <setup+0x78a>
    1c4c:	81 30       	cpi	r24, 0x01	; 1
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <setup+0x4e4>
    1c50:	61 c1       	rjmp	.+706    	; 0x1f14 <setup+0x7a6>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:697
      BootImage = (byte *) pgm_read_word (&flahBootTable[0]); 
      BootImageSize = sizeof(boot_A_);
      BootStrAddr = boot_A_StrAddr;
    break;
  }
  digitalWrite(WAIT_RES_, HIGH);                  // Set WAIT_RES_ HIGH (Led LED_0 ON)
    1c52:	61 e0       	ldi	r22, 0x01	; 1
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:700
  
  // Load a JP instruction if the boot program starting addr is > 0x0000
  if (BootStrAddr > 0x0000)                       // Check if the boot program starting addr > 0x0000
    1c5a:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <BootStrAddr>
    1c5e:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <BootStrAddr+0x1>
    1c62:	89 2b       	or	r24, r25
    1c64:	79 f0       	breq	.+30     	; 0x1c84 <setup+0x516>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:703
  // Inject a "JP <BootStrAddr>" instruction to jump at boot starting address
  {
    loadHL(0x0000);                               // HL = 0x0000 (used as pointer to RAM)
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	0e 94 f7 04 	call	0x9ee	; 0x9ee <loadHL(unsigned int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:704
    loadByteToRAM(JP_nn);                         // Write the JP instruction @ 0x0000;
    1c6e:	83 ec       	ldi	r24, 0xC3	; 195
    1c70:	0e 94 bb 04 	call	0x976	; 0x976 <loadByteToRAM(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:705
    loadByteToRAM(lowByte(BootStrAddr));          // Write LSB to jump @ 0x0001
    1c74:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <BootStrAddr>
    1c78:	0e 94 bb 04 	call	0x976	; 0x976 <loadByteToRAM(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:706
    loadByteToRAM(highByte(BootStrAddr));         // Write MSB to jump @ 0x0002
    1c7c:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <BootStrAddr+0x1>
    1c80:	0e 94 bb 04 	call	0x976	; 0x976 <loadByteToRAM(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:721
    //
    
  }

  // Execute the load of the selected file on SD or image on flash
  loadHL(BootStrAddr);                            // Set Z80 HL = boot starting address (used as pointer to RAM);
    1c84:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <BootStrAddr>
    1c88:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <BootStrAddr+0x1>
    1c8c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <loadHL(unsigned int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:735
    Serial.println(BootStrAddr, HEX);    
  }
  // DEBUG END ------------------------------
  //
  
  if (bootMode < maxBootMode)
    1c90:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <bootMode>
    1c94:	84 30       	cpi	r24, 0x04	; 4
    1c96:	08 f0       	brcs	.+2      	; 0x1c9a <setup+0x52c>
    1c98:	48 c2       	rjmp	.+1168   	; 0x212a <setup+0x9bc>
_Z7mountSDP5FATFS():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2600
byte mountSD(FATFS* fatFs)
// Mount a volume on SD: 
// *  "fatFs" is a pointer to a FATFS object (PetitFS library)
// The returned value is the resulting status (0 = ok, otherwise see printErrSD())
{
  return pf_mount(fatFs);
    1c9a:	88 e8       	ldi	r24, 0x88	; 136
    1c9c:	91 e0       	ldi	r25, 0x01	; 1
    1c9e:	0e 94 92 18 	call	0x3124	; 0x3124 <pf_mount>
setup():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:739
  
  if (bootMode < maxBootMode)
  // Load from SD
  {
    // Mount a volume on SD
    if (mountSD(&filesysSD))
    1ca2:	88 23       	and	r24, r24
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <setup+0x53a>
    1ca6:	89 c1       	rjmp	.+786    	; 0x1fba <setup+0x84c>
_Z7mountSDP5FATFS():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2600
byte mountSD(FATFS* fatFs)
// Mount a volume on SD: 
// *  "fatFs" is a pointer to a FATFS object (PetitFS library)
// The returned value is the resulting status (0 = ok, otherwise see printErrSD())
{
  return pf_mount(fatFs);
    1ca8:	88 e8       	ldi	r24, 0x88	; 136
    1caa:	91 e0       	ldi	r25, 0x01	; 1
    1cac:	0e 94 92 18 	call	0x3124	; 0x3124 <pf_mount>
setup():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:742
  {
    // Mount a volume on SD
    if (mountSD(&filesysSD))
    // Error mounting. Try again
    {
      errCodeSD = mountSD(&filesysSD);
    1cb0:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <errCodeSD>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:743
      if (errCodeSD)
    1cb4:	88 23       	and	r24, r24
    1cb6:	09 f4       	brne	.+2      	; 0x1cba <setup+0x54c>
    1cb8:	80 c1       	rjmp	.+768    	; 0x1fba <setup+0x84c>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:747
      // Error again. Repeat until error disappears (or the user forces a reset)
      do
      {
        printErrSD(0, errCodeSD, NULL);
    1cba:	50 e0       	ldi	r21, 0x00	; 0
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <errCodeSD>
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <printErrSD(unsigned char, unsigned char, char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:748
        waitKey();                                // Wait a key to repeat
    1cc8:	0e 94 19 07 	call	0xe32	; 0xe32 <waitKey()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:749
        mountSD(&filesysSD);                      // New double try
    1ccc:	88 e8       	ldi	r24, 0x88	; 136
    1cce:	91 e0       	ldi	r25, 0x01	; 1
    1cd0:	0e 94 2f 05 	call	0xa5e	; 0xa5e <mountSD(FATFS*)>
    1cd4:	e9 cf       	rjmp	.-46     	; 0x1ca8 <setup+0x53a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:522
    if (clockMode) Serial.print(CLOCK_HIGH);
    else Serial.print(CLOCK_LOW);
    Serial.println(F("MHz)"));
    Serial.print(F(" 7: Toggle CP/M Autoexec (->"));
    if (!autoexecFlag) Serial.print("ON");
    else Serial.print(F("OFF"));
    1cd6:	6e e0       	ldi	r22, 0x0E	; 14
    1cd8:	74 e0       	ldi	r23, 0x04	; 4
    1cda:	8c e8       	ldi	r24, 0x8C	; 140
    1cdc:	92 e0       	ldi	r25, 0x02	; 2
    1cde:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
    1ce2:	24 cf       	rjmp	.-440    	; 0x1b2c <setup+0x3be>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:548
    while ((inChar < minBootChar) || (inChar > maxSelChar));
    Serial.print(inChar);
    Serial.println(F("  Ok"));

    // Make the selected action for the system parameters choice
    switch (inChar)
    1ce4:	88 33       	cpi	r24, 0x38	; 56
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <setup+0x57c>
    1ce8:	77 c0       	rjmp	.+238    	; 0x1dd8 <setup+0x66a>
    1cea:	89 33       	cpi	r24, 0x39	; 57
    1cec:	09 f0       	breq	.+2      	; 0x1cf0 <setup+0x582>
    1cee:	86 cf       	rjmp	.-244    	; 0x1bfc <setup+0x48e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:613
        }

      break;

      case '9':                                   // Change RTC Date/Time
        ChangeRTC();                              // Change RTC Date/Time if requested
    1cf0:	0e 94 56 08 	call	0x10ac	; 0x10ac <ChangeRTC()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:614
      break;
    1cf4:	83 cf       	rjmp	.-250    	; 0x1bfc <setup+0x48e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:551

    // Make the selected action for the system parameters choice
    switch (inChar)
    {
      case '3':                                   // Load/change current Disk Set
        printMsg1();
    1cf6:	0e 94 80 04 	call	0x900	; 0x900 <printMsg1()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:552
        iCount = (byte) (diskSet - 1); // Set the previous Disk Set
    1cfa:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <diskSet>
    1cfe:	81 50       	subi	r24, 0x01	; 1
    1d00:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <iCount>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:556
        do
        {
          // Print the OS name of the next Disk Set
          iCount = (byte)(iCount + 1) % maxDiskSet;
    1d04:	c6 e0       	ldi	r28, 0x06	; 6
    1d06:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <iCount>
    1d0a:	8f 5f       	subi	r24, 0xFF	; 255
    1d0c:	6c 2f       	mov	r22, r28
    1d0e:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <__udivmodqi4>
    1d12:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <iCount>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:557
          Serial.print(F("\r ->"));
    1d16:	6e eb       	ldi	r22, 0xBE	; 190
    1d18:	73 e0       	ldi	r23, 0x03	; 3
    1d1a:	8c e8       	ldi	r24, 0x8C	; 140
    1d1c:	92 e0       	ldi	r25, 0x02	; 2
    1d1e:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:558
          printOsName(iCount);
    1d22:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <iCount>
    1d26:	0e 94 fd 05 	call	0xbfa	; 0xbfa <printOsName(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:559
          Serial.print(F("                 \r"));
    1d2a:	6b ea       	ldi	r22, 0xAB	; 171
    1d2c:	73 e0       	ldi	r23, 0x03	; 3
    1d2e:	8c e8       	ldi	r24, 0x8C	; 140
    1d30:	92 e0       	ldi	r25, 0x02	; 2
    1d32:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:560 (discriminator 2)
          while (Serial.available() > 0) Serial.read(); // Flush serial Rx buffer
    1d36:	8c e8       	ldi	r24, 0x8C	; 140
    1d38:	92 e0       	ldi	r25, 0x02	; 2
    1d3a:	0e 94 98 21 	call	0x4330	; 0x4330 <HardwareSerial::available()>
    1d3e:	18 16       	cp	r1, r24
    1d40:	19 06       	cpc	r1, r25
    1d42:	2c f4       	brge	.+10     	; 0x1d4e <setup+0x5e0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:560 (discriminator 1)
    1d44:	8c e8       	ldi	r24, 0x8C	; 140
    1d46:	92 e0       	ldi	r25, 0x02	; 2
    1d48:	0e 94 b2 21 	call	0x4364	; 0x4364 <HardwareSerial::read()>
    1d4c:	f4 cf       	rjmp	.-24     	; 0x1d36 <setup+0x5c8>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:561 (discriminator 2)
          while(Serial.available() < 1) WaitAndBlink(BLK);  // Wait a key
    1d4e:	8c e8       	ldi	r24, 0x8C	; 140
    1d50:	92 e0       	ldi	r25, 0x02	; 2
    1d52:	0e 94 98 21 	call	0x4330	; 0x4330 <HardwareSerial::available()>
    1d56:	18 16       	cp	r1, r24
    1d58:	19 06       	cpc	r1, r25
    1d5a:	2c f0       	brlt	.+10     	; 0x1d66 <setup+0x5f8>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:561 (discriminator 1)
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	0e 94 61 06 	call	0xcc2	; 0xcc2 <WaitAndBlink(baudRecCheck)>
    1d64:	f4 cf       	rjmp	.-24     	; 0x1d4e <setup+0x5e0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:562
          inChar = Serial.read();
    1d66:	8c e8       	ldi	r24, 0x8C	; 140
    1d68:	92 e0       	ldi	r25, 0x02	; 2
    1d6a:	0e 94 b2 21 	call	0x4364	; 0x4364 <HardwareSerial::read()>
    1d6e:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <inChar>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:564
        }
        while ((inChar != 13) && (inChar != 27)); // Continue until a CR or ESC is pressed
    1d72:	8d 30       	cpi	r24, 0x0D	; 13
    1d74:	11 f0       	breq	.+4      	; 0x1d7a <setup+0x60c>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:564 (discriminator 1)
    1d76:	8b 31       	cpi	r24, 0x1B	; 27
    1d78:	31 f6       	brne	.-116    	; 0x1d06 <setup+0x598>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:565
        Serial.println();
    1d7a:	8c e8       	ldi	r24, 0x8C	; 140
    1d7c:	92 e0       	ldi	r25, 0x02	; 2
    1d7e:	0e 94 c5 23 	call	0x478a	; 0x478a <Print::println()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:566
        Serial.println();
    1d82:	8c e8       	ldi	r24, 0x8C	; 140
    1d84:	92 e0       	ldi	r25, 0x02	; 2
    1d86:	0e 94 c5 23 	call	0x478a	; 0x478a <Print::println()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:567
        if (inChar == 13)                         // Set and store the new Disk Set if required
    1d8a:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <inChar>
    1d8e:	8d 30       	cpi	r24, 0x0D	; 13
    1d90:	09 f0       	breq	.+2      	; 0x1d94 <setup+0x626>
    1d92:	34 cf       	rjmp	.-408    	; 0x1bfc <setup+0x48e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:569
        {
           diskSet = iCount;
    1d94:	60 91 be 01 	lds	r22, 0x01BE	; 0x8001be <iCount>
    1d98:	60 93 5e 01 	sts	0x015E, r22	; 0x80015e <diskSet>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:570
           EEPROM.update(diskSetAddr, iCount);
    1d9c:	8e e0       	ldi	r24, 0x0E	; 14
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:571
           inChar = '3';                          // Set to boot the current selected OS
    1da4:	83 e3       	ldi	r24, 0x33	; 51
    1da6:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <inChar>
    1daa:	28 cf       	rjmp	.-432    	; 0x1bfc <setup+0x48e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:576
        }
      break;
      
      case '6':                                   // Change the clock speed of the Z80 CPU
        clockMode = !clockMode;                   // Toggle Z80 clock speed mode (High/Low)
    1dac:	61 e0       	ldi	r22, 0x01	; 1
    1dae:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <clockMode>
    1db2:	81 11       	cpse	r24, r1
    1db4:	60 e0       	ldi	r22, 0x00	; 0
    1db6:	60 93 bd 01 	sts	0x01BD, r22	; 0x8001bd <clockMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:577
        EEPROM.update(clockModeAddr, clockMode);  // Save it to the internal EEPROM
    1dba:	8d e0       	ldi	r24, 0x0D	; 13
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:582
      break;

      case '7':                                   // Toggle CP/M AUTOEXEC execution on cold boot
        autoexecFlag = !autoexecFlag;             // Toggle AUTOEXEC executiont status
        EEPROM.update(autoexecFlagAddr, autoexecFlag); // Save it to the internal EEPROM
    1dbe:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:583
      break;
    1dc2:	1c cf       	rjmp	.-456    	; 0x1bfc <setup+0x48e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:581
        clockMode = !clockMode;                   // Toggle Z80 clock speed mode (High/Low)
        EEPROM.update(clockModeAddr, clockMode);  // Save it to the internal EEPROM
      break;

      case '7':                                   // Toggle CP/M AUTOEXEC execution on cold boot
        autoexecFlag = !autoexecFlag;             // Toggle AUTOEXEC executiont status
    1dc4:	61 e0       	ldi	r22, 0x01	; 1
    1dc6:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <autoexecFlag>
    1dca:	81 11       	cpse	r24, r1
    1dcc:	60 e0       	ldi	r22, 0x00	; 0
    1dce:	60 93 65 01 	sts	0x0165, r22	; 0x800165 <autoexecFlag>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:582
        EEPROM.update(autoexecFlagAddr, autoexecFlag); // Save it to the internal EEPROM
    1dd2:	8c e0       	ldi	r24, 0x0C	; 12
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	f3 cf       	rjmp	.-26     	; 0x1dbe <setup+0x650>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:586
      break;

      case '8':                                   // Change serial port speed
        printMsg1();
    1dd8:	0e 94 80 04 	call	0x900	; 0x900 <printMsg1()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:587
        iCount = EEPROM.read(serBaudAddr);        // Read the serial speed index
    1ddc:	8f e0       	ldi	r24, 0x0F	; 15
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	0e 94 77 04 	call	0x8ee	; 0x8ee <EEPROMClass::read(int) [clone .isra.1]>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:588
        iCount = (byte) (iCount - 1);             // Set the previous speed index
    1de4:	81 50       	subi	r24, 0x01	; 1
    1de6:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <iCount>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:592
        do
        {
          // Print the current serial speed
          iCount = (byte)(iCount + 1) % maxBaudIndex;
    1dea:	ca e0       	ldi	r28, 0x0A	; 10
    1dec:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <iCount>
    1df0:	8f 5f       	subi	r24, 0xFF	; 255
    1df2:	6c 2f       	mov	r22, r28
    1df4:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <__udivmodqi4>
    1df8:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <iCount>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:593
          Serial.print(F("\r ->"));
    1dfc:	66 ea       	ldi	r22, 0xA6	; 166
    1dfe:	73 e0       	ldi	r23, 0x03	; 3
    1e00:	8c e8       	ldi	r24, 0x8C	; 140
    1e02:	92 e0       	ldi	r25, 0x02	; 2
    1e04:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:594
          Serial.print(indexToBaud(iCount));      // Print current serial speed
    1e08:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <iCount>
    1e0c:	40 e0       	ldi	r20, 0x00	; 0
    1e0e:	52 ec       	ldi	r21, 0xC2	; 194
    1e10:	61 e0       	ldi	r22, 0x01	; 1
    1e12:	70 e0       	ldi	r23, 0x00	; 0
    1e14:	e9 30       	cpi	r30, 0x09	; 9
    1e16:	48 f4       	brcc	.+18     	; 0x1e2a <setup+0x6bc>
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	ee 0f       	add	r30, r30
    1e1c:	ff 1f       	adc	r31, r31
    1e1e:	ec 5e       	subi	r30, 0xEC	; 236
    1e20:	fe 4f       	sbci	r31, 0xFE	; 254
    1e22:	40 81       	ld	r20, Z
    1e24:	51 81       	ldd	r21, Z+1	; 0x01
    1e26:	70 e0       	ldi	r23, 0x00	; 0
    1e28:	60 e0       	ldi	r22, 0x00	; 0
    1e2a:	2a e0       	ldi	r18, 0x0A	; 10
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	8c e8       	ldi	r24, 0x8C	; 140
    1e30:	92 e0       	ldi	r25, 0x02	; 2
    1e32:	0e 94 9f 24 	call	0x493e	; 0x493e <Print::print(unsigned long, int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:595
          Serial.print(F("   \r"));
    1e36:	61 ea       	ldi	r22, 0xA1	; 161
    1e38:	73 e0       	ldi	r23, 0x03	; 3
    1e3a:	8c e8       	ldi	r24, 0x8C	; 140
    1e3c:	92 e0       	ldi	r25, 0x02	; 2
    1e3e:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:596 (discriminator 2)
          while (Serial.available() > 0) Serial.read(); // Flush serial Rx buffer
    1e42:	8c e8       	ldi	r24, 0x8C	; 140
    1e44:	92 e0       	ldi	r25, 0x02	; 2
    1e46:	0e 94 98 21 	call	0x4330	; 0x4330 <HardwareSerial::available()>
    1e4a:	18 16       	cp	r1, r24
    1e4c:	19 06       	cpc	r1, r25
    1e4e:	2c f4       	brge	.+10     	; 0x1e5a <setup+0x6ec>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:596 (discriminator 1)
    1e50:	8c e8       	ldi	r24, 0x8C	; 140
    1e52:	92 e0       	ldi	r25, 0x02	; 2
    1e54:	0e 94 b2 21 	call	0x4364	; 0x4364 <HardwareSerial::read()>
    1e58:	f4 cf       	rjmp	.-24     	; 0x1e42 <setup+0x6d4>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:597 (discriminator 2)
          while(Serial.available() < 1) WaitAndBlink(BLK);  // Wait a key
    1e5a:	8c e8       	ldi	r24, 0x8C	; 140
    1e5c:	92 e0       	ldi	r25, 0x02	; 2
    1e5e:	0e 94 98 21 	call	0x4330	; 0x4330 <HardwareSerial::available()>
    1e62:	18 16       	cp	r1, r24
    1e64:	19 06       	cpc	r1, r25
    1e66:	2c f0       	brlt	.+10     	; 0x1e72 <setup+0x704>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:597 (discriminator 1)
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <WaitAndBlink(baudRecCheck)>
    1e70:	f4 cf       	rjmp	.-24     	; 0x1e5a <setup+0x6ec>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:598
          inChar = Serial.read();
    1e72:	8c e8       	ldi	r24, 0x8C	; 140
    1e74:	92 e0       	ldi	r25, 0x02	; 2
    1e76:	0e 94 b2 21 	call	0x4364	; 0x4364 <HardwareSerial::read()>
    1e7a:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <inChar>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:600
        }
        while ((inChar != 13) && (inChar != 27)); // Continue until a CR or ESC is pressed
    1e7e:	8d 30       	cpi	r24, 0x0D	; 13
    1e80:	19 f0       	breq	.+6      	; 0x1e88 <setup+0x71a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:600 (discriminator 1)
    1e82:	8b 31       	cpi	r24, 0x1B	; 27
    1e84:	09 f0       	breq	.+2      	; 0x1e88 <setup+0x71a>
    1e86:	b2 cf       	rjmp	.-156    	; 0x1dec <setup+0x67e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:601
        Serial.println();
    1e88:	8c e8       	ldi	r24, 0x8C	; 140
    1e8a:	92 e0       	ldi	r25, 0x02	; 2
    1e8c:	0e 94 c5 23 	call	0x478a	; 0x478a <Print::println()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:602
        Serial.println();
    1e90:	8c e8       	ldi	r24, 0x8C	; 140
    1e92:	92 e0       	ldi	r25, 0x02	; 2
    1e94:	0e 94 c5 23 	call	0x478a	; 0x478a <Print::println()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:603
        if ((inChar == 13) && (iCount != EEPROM.read(serBaudAddr)))
    1e98:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <inChar>
    1e9c:	8d 30       	cpi	r24, 0x0D	; 13
    1e9e:	09 f0       	breq	.+2      	; 0x1ea2 <setup+0x734>
    1ea0:	ad ce       	rjmp	.-678    	; 0x1bfc <setup+0x48e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:603 (discriminator 1)
    1ea2:	8f e0       	ldi	r24, 0x0F	; 15
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	0e 94 77 04 	call	0x8ee	; 0x8ee <EEPROMClass::read(int) [clone .isra.1]>
    1eaa:	60 91 be 01 	lds	r22, 0x01BE	; 0x8001be <iCount>
    1eae:	86 17       	cp	r24, r22
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <setup+0x746>
    1eb2:	62 c1       	rjmp	.+708    	; 0x2178 <setup+0xa0a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:606
        // Store new serial speed index
        {
          EEPROM.update(serBaudAddr, iCount);
    1eb4:	8f e0       	ldi	r24, 0x0F	; 15
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EEPROMClass::update(int, unsigned char) [clone .isra.2]>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:607
          Serial.println(F("Changed speed will be effective after next reboot!\r\n\n"));
    1ebc:	6b e6       	ldi	r22, 0x6B	; 107
    1ebe:	73 e0       	ldi	r23, 0x03	; 3
    1ec0:	8c e8       	ldi	r24, 0x8C	; 140
    1ec2:	92 e0       	ldi	r25, 0x02	; 2
    1ec4:	0e 94 c9 23 	call	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>
    1ec8:	99 ce       	rjmp	.-718    	; 0x1bfc <setup+0x48e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:636
  // ----------------------------------------
  // Z80 PROGRAM LOAD
  // ----------------------------------------

  // Get the starting address of the program to load and boot, and its size if stored in the flash
  switch (bootMode)
    1eca:	83 30       	cpi	r24, 0x03	; 3
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <setup+0x762>
    1ece:	72 c0       	rjmp	.+228    	; 0x1fb4 <setup+0x846>
    1ed0:	84 30       	cpi	r24, 0x04	; 4
    1ed2:	09 f0       	breq	.+2      	; 0x1ed6 <setup+0x768>
    1ed4:	be ce       	rjmp	.-644    	; 0x1c52 <setup+0x4e4>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:692
      fileNameSD = AUTOFN;
      BootStrAddr = AUTSTRADDR;
    break;
    
    case 4:                                       // Load iLoad from flash
      BootImage = (byte *) pgm_read_word (&flahBootTable[0]); 
    1ed6:	e0 e8       	ldi	r30, 0x80	; 128
    1ed8:	f5 e0       	ldi	r31, 0x05	; 5
    1eda:	85 91       	lpm	r24, Z+
    1edc:	94 91       	lpm	r25, Z
    1ede:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <BootImage+0x1>
    1ee2:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <BootImage>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:693
      BootImageSize = sizeof(boot_A_);
    1ee6:	8a e6       	ldi	r24, 0x6A	; 106
    1ee8:	92 e0       	ldi	r25, 0x02	; 2
    1eea:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <BootImageSize+0x1>
    1eee:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <BootImageSize>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:694
      BootStrAddr = boot_A_StrAddr;
    1ef2:	80 e1       	ldi	r24, 0x10	; 16
    1ef4:	9d ef       	ldi	r25, 0xFD	; 253
    1ef6:	48 c0       	rjmp	.+144    	; 0x1f88 <setup+0x81a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:639

  // Get the starting address of the program to load and boot, and its size if stored in the flash
  switch (bootMode)
  {
    case 0:                                       // Load Basic from SD
      fileNameSD = BASICFN;
    1ef8:	81 eb       	ldi	r24, 0xB1	; 177
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <fileNameSD+0x1>
    1f00:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <fileNameSD>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:640
      BootStrAddr = BASSTRADDR;
    1f04:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <BootStrAddr+0x1>
    1f08:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <BootStrAddr>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:641
      Z80IntRx = 1;                               // Enable Z80 Rx INT_ interrupt signal generation (Z80 M1 INT I/O)
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Z80IntRx>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:642
    break;
    1f12:	9f ce       	rjmp	.-706    	; 0x1c52 <setup+0x4e4>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:645
    
    case 1:                                       // Load Forth from SD
      fileNameSD = FORTHFN;
    1f14:	8d eb       	ldi	r24, 0xBD	; 189
    1f16:	90 e0       	ldi	r25, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:663
        fileNameSD = QPMFN;
        BootStrAddr = QPMSTRADDR;
      break;

      case 2:                                     // CP/M 3.0
        fileNameSD = CPM3FN;
    1f18:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <fileNameSD+0x1>
    1f1c:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <fileNameSD>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:664
        BootStrAddr = CPM3STRADDR;
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	91 e0       	ldi	r25, 0x01	; 1
    1f24:	31 c0       	rjmp	.+98     	; 0x1f88 <setup+0x81a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:650
      fileNameSD = FORTHFN;
      BootStrAddr = FORSTRADDR;
    break;

    case 2:                                       // Load an OS from current Disk Set on SD
      switch (diskSet)
    1f26:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <diskSet>
    1f2a:	82 30       	cpi	r24, 0x02	; 2
    1f2c:	91 f1       	breq	.+100    	; 0x1f92 <setup+0x824>
    1f2e:	70 f4       	brcc	.+28     	; 0x1f4c <setup+0x7de>
    1f30:	88 23       	and	r24, r24
    1f32:	11 f1       	breq	.+68     	; 0x1f78 <setup+0x80a>
    1f34:	81 30       	cpi	r24, 0x01	; 1
    1f36:	09 f0       	breq	.+2      	; 0x1f3a <setup+0x7cc>
    1f38:	8c ce       	rjmp	.-744    	; 0x1c52 <setup+0x4e4>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:658
        fileNameSD = CPMFN;
        BootStrAddr = CPMSTRADDR;
      break;

      case 1:                                     // QP/M 2.71
        fileNameSD = QPMFN;
    1f3a:	83 ed       	ldi	r24, 0xD3	; 211
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <fileNameSD+0x1>
    1f42:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <fileNameSD>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:659
        BootStrAddr = QPMSTRADDR;
    1f46:	80 e8       	ldi	r24, 0x80	; 128
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	1e c0       	rjmp	.+60     	; 0x1f88 <setup+0x81a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:650
      fileNameSD = FORTHFN;
      BootStrAddr = FORSTRADDR;
    break;

    case 2:                                       // Load an OS from current Disk Set on SD
      switch (diskSet)
    1f4c:	84 30       	cpi	r24, 0x04	; 4
    1f4e:	79 f1       	breq	.+94     	; 0x1fae <setup+0x840>
    1f50:	18 f1       	brcs	.+70     	; 0x1f98 <setup+0x82a>
    1f52:	85 30       	cpi	r24, 0x05	; 5
    1f54:	09 f0       	breq	.+2      	; 0x1f58 <setup+0x7ea>
    1f56:	7d ce       	rjmp	.-774    	; 0x1c52 <setup+0x4e4>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:678
        fileNameSD = COSFN;
        BootStrAddr = COSSTRADDR;
      break;

      case 5:                                     // Fuzix OS
        fileNameSD = FUZIXFN;
    1f58:	8d ef       	ldi	r24, 0xFD	; 253
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <fileNameSD+0x1>
    1f60:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <fileNameSD>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:679
        BootStrAddr = FUZSTRADDR;
    1f64:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <BootStrAddr+0x1>
    1f68:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <BootStrAddr>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:680
        Z80IntRx = 1;                             // Enable Z80 Rx INT_ interrupt signal generation (Z80 M1 INT I/O)
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Z80IntRx>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:681
        Z80IntSysTick = 1;                        // Enable Z80 Systick INT_ interrupt signal generation (Z80 M1 INT I/O)
    1f72:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <Z80IntSysTick>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:682
      break;
    1f76:	6d ce       	rjmp	.-806    	; 0x1c52 <setup+0x4e4>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:653

    case 2:                                       // Load an OS from current Disk Set on SD
      switch (diskSet)
      {
      case 0:                                     // CP/M 2.2
        fileNameSD = CPMFN;
    1f78:	89 ec       	ldi	r24, 0xC9	; 201
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <fileNameSD+0x1>
    1f80:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <fileNameSD>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:654
        BootStrAddr = CPMSTRADDR;
    1f84:	80 ee       	ldi	r24, 0xE0	; 224
    1f86:	91 ed       	ldi	r25, 0xD1	; 209
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:694
    break;
    
    case 4:                                       // Load iLoad from flash
      BootImage = (byte *) pgm_read_word (&flahBootTable[0]); 
      BootImageSize = sizeof(boot_A_);
      BootStrAddr = boot_A_StrAddr;
    1f88:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <BootStrAddr+0x1>
    1f8c:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <BootStrAddr>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:695
    break;
    1f90:	60 ce       	rjmp	.-832    	; 0x1c52 <setup+0x4e4>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:663
        fileNameSD = QPMFN;
        BootStrAddr = QPMSTRADDR;
      break;

      case 2:                                     // CP/M 3.0
        fileNameSD = CPM3FN;
    1f92:	8e ed       	ldi	r24, 0xDE	; 222
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	c0 cf       	rjmp	.-128    	; 0x1f18 <setup+0x7aa>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:668
        BootStrAddr = CPM3STRADDR;
      break;

      case 3:                                     // UCSD Pascal
        fileNameSD = UCSDFN;
    1f98:	89 ee       	ldi	r24, 0xE9	; 233
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:687
      break;
      }
    break;
    
    case 3:                                       // Load AUTOBOOT.BIN from SD (load an user executable binary file)
      fileNameSD = AUTOFN;
    1f9c:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <fileNameSD+0x1>
    1fa0:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <fileNameSD>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:688
      BootStrAddr = AUTSTRADDR;
    1fa4:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <BootStrAddr+0x1>
    1fa8:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <BootStrAddr>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:689
    break;
    1fac:	52 ce       	rjmp	.-860    	; 0x1c52 <setup+0x4e4>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:673
        fileNameSD = UCSDFN;
        BootStrAddr = UCSDSTRADDR;
      break;

      case 4:                                     // Collapse OS
        fileNameSD = COSFN;
    1fae:	85 ef       	ldi	r24, 0xF5	; 245
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	f4 cf       	rjmp	.-24     	; 0x1f9c <setup+0x82e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:687
      break;
      }
    break;
    
    case 3:                                       // Load AUTOBOOT.BIN from SD (load an user executable binary file)
      fileNameSD = AUTOFN;
    1fb4:	87 e0       	ldi	r24, 0x07	; 7
    1fb6:	91 e0       	ldi	r25, 0x01	; 1
    1fb8:	f1 cf       	rjmp	.-30     	; 0x1f9c <setup+0x82e>
_Z6openSDPKc():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2610
byte openSD(const char* fileName)
// Open an existing file on SD:
// *  "fileName" is the pointer to the string holding the file name (8.3 format)
// The returned value is the resulting status (0 = ok, otherwise see printErrSD())
{
  return pf_open(fileName);
    1fba:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <fileNameSD>
    1fbe:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <fileNameSD+0x1>
    1fc2:	0e 94 a0 19 	call	0x3340	; 0x3340 <pf_open>
setup():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:756
      }
      while (errCodeSD);
    }

    // Open the selected file to load
    errCodeSD = openSD(fileNameSD);
    1fc6:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <errCodeSD>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:757
    if (errCodeSD)
    1fca:	88 23       	and	r24, r24
    1fcc:	41 f1       	breq	.+80     	; 0x201e <setup+0x8b0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:761
    // Error opening the required file. Repeat until error disappears (or the user forces a reset)
    do
    {
      printErrSD(1, errCodeSD, fileNameSD);
    1fce:	40 91 66 01 	lds	r20, 0x0166	; 0x800166 <fileNameSD>
    1fd2:	50 91 67 01 	lds	r21, 0x0167	; 0x800167 <fileNameSD+0x1>
    1fd6:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <errCodeSD>
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <printErrSD(unsigned char, unsigned char, char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:762
      waitKey();                                  // Wait a key to repeat
    1fe0:	0e 94 19 07 	call	0xe32	; 0xe32 <waitKey()>
_Z6openSDPKc():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2610
byte openSD(const char* fileName)
// Open an existing file on SD:
// *  "fileName" is the pointer to the string holding the file name (8.3 format)
// The returned value is the resulting status (0 = ok, otherwise see printErrSD())
{
  return pf_open(fileName);
    1fe4:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <fileNameSD>
    1fe8:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <fileNameSD+0x1>
    1fec:	0e 94 a0 19 	call	0x3340	; 0x3340 <pf_open>
setup():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:763
    // Error opening the required file. Repeat until error disappears (or the user forces a reset)
    do
    {
      printErrSD(1, errCodeSD, fileNameSD);
      waitKey();                                  // Wait a key to repeat
      errCodeSD = openSD(fileNameSD);
    1ff0:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <errCodeSD>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:764
      if (errCodeSD != 3)
    1ff4:	83 30       	cpi	r24, 0x03	; 3
    1ff6:	81 f0       	breq	.+32     	; 0x2018 <setup+0x8aa>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:767
      // Try to do a two mount operations followed by an open
      {
        mountSD(&filesysSD);
    1ff8:	88 e8       	ldi	r24, 0x88	; 136
    1ffa:	91 e0       	ldi	r25, 0x01	; 1
    1ffc:	0e 94 2f 05 	call	0xa5e	; 0xa5e <mountSD(FATFS*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:768
        mountSD(&filesysSD);
    2000:	88 e8       	ldi	r24, 0x88	; 136
    2002:	91 e0       	ldi	r25, 0x01	; 1
    2004:	0e 94 2f 05 	call	0xa5e	; 0xa5e <mountSD(FATFS*)>
_Z6openSDPKc():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2610
byte openSD(const char* fileName)
// Open an existing file on SD:
// *  "fileName" is the pointer to the string holding the file name (8.3 format)
// The returned value is the resulting status (0 = ok, otherwise see printErrSD())
{
  return pf_open(fileName);
    2008:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <fileNameSD>
    200c:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <fileNameSD+0x1>
    2010:	0e 94 a0 19 	call	0x3340	; 0x3340 <pf_open>
    2014:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <errCodeSD>
setup():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:772
        mountSD(&filesysSD);
        mountSD(&filesysSD);
        errCodeSD = openSD(fileNameSD);
      }
    }
    while (errCodeSD);
    2018:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <errCodeSD>
    201c:	d6 cf       	rjmp	.-84     	; 0x1fca <setup+0x85c>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:775

    // Read the selected file from SD and load it into RAM until an EOF is reached
    Serial.print(F("IOS: Loading boot program ("));
    201e:	61 e4       	ldi	r22, 0x41	; 65
    2020:	73 e0       	ldi	r23, 0x03	; 3
    2022:	8c e8       	ldi	r24, 0x8C	; 140
    2024:	92 e0       	ldi	r25, 0x02	; 2
    2026:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:776
    Serial.print(fileNameSD);
    202a:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <fileNameSD>
    202e:	70 91 67 01 	lds	r23, 0x0167	; 0x800167 <fileNameSD+0x1>
    2032:	8c e8       	ldi	r24, 0x8C	; 140
    2034:	92 e0       	ldi	r25, 0x02	; 2
    2036:	0e 94 b6 23 	call	0x476c	; 0x476c <Print::print(char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:777
    Serial.print(F(")..."));
    203a:	6c e3       	ldi	r22, 0x3C	; 60
    203c:	73 e0       	ldi	r23, 0x03	; 3
    203e:	8c e8       	ldi	r24, 0x8C	; 140
    2040:	92 e0       	ldi	r25, 0x02	; 2
    2042:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:784
    // If an error occurs repeat until error disappears (or the user forces a reset)
    {
      do
      // Read a "segment" of a SD sector and load it into RAM
      {
        errCodeSD = readSD(bufferSD, &numReadBytes);  // Read current "segment" (32 bytes) of the current SD serctor
    2046:	63 e6       	ldi	r22, 0x63	; 99
    2048:	71 e0       	ldi	r23, 0x01	; 1
    204a:	88 e6       	ldi	r24, 0x68	; 104
    204c:	91 e0       	ldi	r25, 0x01	; 1
    204e:	0e 94 35 05 	call	0xa6a	; 0xa6a <readSD(void*, unsigned char*)>
    2052:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <errCodeSD>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:785
        for (iCount = 0; iCount < numReadBytes; iCount++)
    2056:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <iCount>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:785 (discriminator 3)
    205a:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <iCount>
    205e:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <numReadBytes>
    2062:	e8 17       	cp	r30, r24
    2064:	60 f4       	brcc	.+24     	; 0x207e <setup+0x910>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:788 (discriminator 2)
        // Load the read "segment" into RAM
        {
          loadByteToRAM(bufferSD[iCount]);        // Write current data byte into RAM
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	e8 59       	subi	r30, 0x98	; 152
    206a:	fe 4f       	sbci	r31, 0xFE	; 254
    206c:	80 81       	ld	r24, Z
    206e:	0e 94 bb 04 	call	0x976	; 0x976 <loadByteToRAM(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:785 (discriminator 2)
    {
      do
      // Read a "segment" of a SD sector and load it into RAM
      {
        errCodeSD = readSD(bufferSD, &numReadBytes);  // Read current "segment" (32 bytes) of the current SD serctor
        for (iCount = 0; iCount < numReadBytes; iCount++)
    2072:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <iCount>
    2076:	8f 5f       	subi	r24, 0xFF	; 255
    2078:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <iCount>
    207c:	ee cf       	rjmp	.-36     	; 0x205a <setup+0x8ec>
    207e:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <errCodeSD>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:791
        // Load the read "segment" into RAM
        {
          loadByteToRAM(bufferSD[iCount]);        // Write current data byte into RAM
        }
      }
      while ((numReadBytes == 32) && (!errCodeSD)); // If numReadBytes < 32 -> EOF reached
    2082:	80 32       	cpi	r24, 0x20	; 32
    2084:	81 f4       	brne	.+32     	; 0x20a6 <setup+0x938>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:791 (discriminator 1)
    2086:	66 23       	and	r22, r22
    2088:	f1 f2       	breq	.-68     	; 0x2046 <setup+0x8d8>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:794
      if (errCodeSD)
      {
        printErrSD(2, errCodeSD, fileNameSD);
    208a:	40 91 66 01 	lds	r20, 0x0166	; 0x800166 <fileNameSD>
    208e:	50 91 67 01 	lds	r21, 0x0167	; 0x800167 <fileNameSD+0x1>
    2092:	82 e0       	ldi	r24, 0x02	; 2
    2094:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <printErrSD(unsigned char, unsigned char, char const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:795
        waitKey();                                // Wait a key to repeat
    2098:	0e 94 19 07 	call	0xe32	; 0xe32 <waitKey()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:796
        seekSD(0);                                // Reset the sector pointer
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	0e 94 6d 05 	call	0xada	; 0xada <seekSD(unsigned int)>
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <setup+0x93c>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:792
        {
          loadByteToRAM(bufferSD[iCount]);        // Write current data byte into RAM
        }
      }
      while ((numReadBytes == 32) && (!errCodeSD)); // If numReadBytes < 32 -> EOF reached
      if (errCodeSD)
    20a6:	61 11       	cpse	r22, r1
    20a8:	f0 cf       	rjmp	.-32     	; 0x208a <setup+0x91c>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:799
        printErrSD(2, errCodeSD, fileNameSD);
        waitKey();                                // Wait a key to repeat
        seekSD(0);                                // Reset the sector pointer
      }
    }
    while (errCodeSD);
    20aa:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <errCodeSD>
    20ae:	81 11       	cpse	r24, r1
    20b0:	ca cf       	rjmp	.-108    	; 0x2046 <setup+0x8d8>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:811
    // Write boot program into external RAM
    {
      loadByteToRAM(pgm_read_byte(BootImage + i));// Write current data byte into RAM
    }
  }
  Serial.println(F(" Done"));
    20b2:	69 e1       	ldi	r22, 0x19	; 25
    20b4:	73 e0       	ldi	r23, 0x03	; 3
    20b6:	8c e8       	ldi	r24, 0x8C	; 140
    20b8:	92 e0       	ldi	r25, 0x02	; 2
    20ba:	0e 94 c9 23 	call	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:817

  // ----------------------------------------
  // Z80 BOOT
  // ----------------------------------------
  
  digitalWrite(RESET_, LOW);                      // Activate the RESET_ signal
    20be:	60 e0       	ldi	r22, 0x00	; 0
    20c0:	86 e1       	ldi	r24, 0x16	; 22
    20c2:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:822

  #if defined(__AVR_ATmega32__)
    // Atmega32 MCU
    // Initialize CLK @ 4/8MHz (@ Fosc = 16MHz). Z80 clock_freq = (Atmega_clock) / ((OCR2 + 1) * 2)
    ASSR &= ~(1 << AS2);                          // Set Timer2 clock from system clock
    20c6:	82 b5       	in	r24, 0x22	; 34
    20c8:	87 7f       	andi	r24, 0xF7	; 247
    20ca:	82 bd       	out	0x22, r24	; 34
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:823
    TCCR2 |= (1 << CS20);                         // Set Timer2 clock to "no prescaling"
    20cc:	85 b5       	in	r24, 0x25	; 37
    20ce:	81 60       	ori	r24, 0x01	; 1
    20d0:	85 bd       	out	0x25, r24	; 37
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:824
    TCCR2 &= ~((1 << CS21) | (1 << CS22));
    20d2:	85 b5       	in	r24, 0x25	; 37
    20d4:	89 7f       	andi	r24, 0xF9	; 249
    20d6:	85 bd       	out	0x25, r24	; 37
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:825
    TCCR2 |= (1 << WGM21);                        // Set Timer2 CTC mode
    20d8:	85 b5       	in	r24, 0x25	; 37
    20da:	88 60       	ori	r24, 0x08	; 8
    20dc:	85 bd       	out	0x25, r24	; 37
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:826
    TCCR2 &= ~(1 << WGM20);
    20de:	85 b5       	in	r24, 0x25	; 37
    20e0:	8f 7b       	andi	r24, 0xBF	; 191
    20e2:	85 bd       	out	0x25, r24	; 37
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:827
    TCCR2 |= (1 <<  COM20);                       // Set "toggle OC2 on compare match"
    20e4:	85 b5       	in	r24, 0x25	; 37
    20e6:	80 61       	ori	r24, 0x10	; 16
    20e8:	85 bd       	out	0x25, r24	; 37
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:828
    TCCR2 &= ~(1 << COM21);
    20ea:	85 b5       	in	r24, 0x25	; 37
    20ec:	8f 7d       	andi	r24, 0xDF	; 223
    20ee:	85 bd       	out	0x25, r24	; 37
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:829
    OCR2 = clockMode;                             // Set the compare value to toggle OC2 (0 = low or 1 = high)
    20f0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <clockMode>
    20f4:	83 bd       	out	0x23, r24	; 35
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:846
  #else
    Serial.print(F("IOS: Current MCU is not supported. Aborted!"));
    while (1);
  #endif  

  pinMode(CLK, OUTPUT);                           // Set OC2 as output and start to output the clock
    20f6:	61 e0       	ldi	r22, 0x01	; 1
    20f8:	8f e0       	ldi	r24, 0x0F	; 15
    20fa:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:847
  Serial.println(F("IOS: Z80 is running from now"));
    20fe:	6c ef       	ldi	r22, 0xFC	; 252
    2100:	72 e0       	ldi	r23, 0x02	; 2
    2102:	8c e8       	ldi	r24, 0x8C	; 140
    2104:	92 e0       	ldi	r25, 0x02	; 2
    2106:	0e 94 c9 23 	call	0x4792	; 0x4792 <Print::println(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:848
  Serial.println();
    210a:	8c e8       	ldi	r24, 0x8C	; 140
    210c:	92 e0       	ldi	r25, 0x02	; 2
    210e:	0e 94 c5 23 	call	0x478a	; 0x478a <Print::println()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:851

  // Flush serial Rx buffer
  while (Serial.available() > 0) 
    2112:	8c e8       	ldi	r24, 0x8C	; 140
    2114:	92 e0       	ldi	r25, 0x02	; 2
    2116:	0e 94 98 21 	call	0x4330	; 0x4330 <HardwareSerial::available()>
    211a:	18 16       	cp	r1, r24
    211c:	19 06       	cpc	r1, r25
    211e:	04 f5       	brge	.+64     	; 0x2160 <setup+0x9f2>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:853
  {
    Serial.read();
    2120:	8c e8       	ldi	r24, 0x8C	; 140
    2122:	92 e0       	ldi	r25, 0x02	; 2
    2124:	0e 94 b2 21 	call	0x4364	; 0x4364 <HardwareSerial::read()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:851
  pinMode(CLK, OUTPUT);                           // Set OC2 as output and start to output the clock
  Serial.println(F("IOS: Z80 is running from now"));
  Serial.println();

  // Flush serial Rx buffer
  while (Serial.available() > 0) 
    2128:	f4 cf       	rjmp	.-24     	; 0x2112 <setup+0x9a4>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:804
    while (errCodeSD);
  }
  else
  // Load from flash
  {
    Serial.print(F("IOS: Loading boot program..."));
    212a:	6f e1       	ldi	r22, 0x1F	; 31
    212c:	73 e0       	ldi	r23, 0x03	; 3
    212e:	8c e8       	ldi	r24, 0x8C	; 140
    2130:	92 e0       	ldi	r25, 0x02	; 2
    2132:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:805
    for (word i = 0; i < BootImageSize; i++)
    2136:	d0 e0       	ldi	r29, 0x00	; 0
    2138:	c0 e0       	ldi	r28, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:805 (discriminator 3)
    213a:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <BootImageSize>
    213e:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <BootImageSize+0x1>
    2142:	c8 17       	cp	r28, r24
    2144:	d9 07       	cpc	r29, r25
    2146:	08 f0       	brcs	.+2      	; 0x214a <setup+0x9dc>
    2148:	b4 cf       	rjmp	.-152    	; 0x20b2 <setup+0x944>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:808 (discriminator 2)
    // Write boot program into external RAM
    {
      loadByteToRAM(pgm_read_byte(BootImage + i));// Write current data byte into RAM
    214a:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <BootImage>
    214e:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <BootImage+0x1>
    2152:	ec 0f       	add	r30, r28
    2154:	fd 1f       	adc	r31, r29
    2156:	84 91       	lpm	r24, Z
    2158:	0e 94 bb 04 	call	0x976	; 0x976 <loadByteToRAM(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:805 (discriminator 2)
  }
  else
  // Load from flash
  {
    Serial.print(F("IOS: Loading boot program..."));
    for (word i = 0; i < BootImageSize; i++)
    215c:	21 96       	adiw	r28, 0x01	; 1
    215e:	ed cf       	rjmp	.-38     	; 0x213a <setup+0x9cc>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:857
  {
    Serial.read();
  }

  // Leave the Z80 CPU running
  delay(1);                                       // Just to be sure...
    2160:	61 e0       	ldi	r22, 0x01	; 1
    2162:	70 e0       	ldi	r23, 0x00	; 0
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	0e 94 41 26 	call	0x4c82	; 0x4c82 <delay>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:858
  digitalWrite(RESET_, HIGH);                     // Release Z80 from reset and let it run
    216c:	61 e0       	ldi	r22, 0x01	; 1
    216e:	86 e1       	ldi	r24, 0x16	; 22
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:859
}
    2170:	df 91       	pop	r29
    2172:	cf 91       	pop	r28
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:858
    Serial.read();
  }

  // Leave the Z80 CPU running
  delay(1);                                       // Just to be sure...
  digitalWrite(RESET_, HIGH);                     // Release Z80 from reset and let it run
    2174:	0c 94 f9 26 	jmp	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:618
        ChangeRTC();                              // Change RTC Date/Time if requested
      break;
    };
    
    // Save selectd boot program if changed
    bootMode = inChar - '1';                      // Calculate bootMode from inChar
    2178:	8c ed       	ldi	r24, 0xDC	; 220
    217a:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <bootMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:620
    if (bootMode <= maxBootMode) EEPROM.update(bootModeAddr, bootMode); // Save to the internal EEPROM if required
    else bootMode = EEPROM.read(bootModeAddr);    // Reload boot mode if '0' or > '5' choice selected
    217e:	8a e0       	ldi	r24, 0x0A	; 10
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	0e 94 77 04 	call	0x8ee	; 0x8ee <EEPROMClass::read(int) [clone .isra.1]>
    2186:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <bootMode>
    218a:	44 cd       	rjmp	.-1400   	; 0x1c14 <setup+0x4a6>

0000218c <loop>:
loop():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:864
}

// ------------------------------------------------------------------------------

void loop() 
{
    218c:	cf 92       	push	r12
    218e:	df 92       	push	r13
    2190:	ef 92       	push	r14
    2192:	ff 92       	push	r15
    2194:	0f 93       	push	r16
    2196:	1f 93       	push	r17
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:865
  if (!digitalRead(WAIT_))
    219c:	83 e0       	ldi	r24, 0x03	; 3
    219e:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <digitalRead>
    21a2:	89 2b       	or	r24, r25
    21a4:	09 f0       	breq	.+2      	; 0x21a8 <loop+0x1c>
    21a6:	b3 c2       	rjmp	.+1382   	; 0x270e <loop+0x582>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:868
  // I/O operaton requested
  {
    if (!digitalRead(WR_))
    21a8:	83 e1       	ldi	r24, 0x13	; 19
    21aa:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <digitalRead>
    21ae:	89 2b       	or	r24, r25
    21b0:	09 f0       	breq	.+2      	; 0x21b4 <loop+0x28>
    21b2:	63 c2       	rjmp	.+1222   	; 0x267a <loop+0x4ee>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:876
    // ----------------------------------------
    // VIRTUAL I/O WRITE OPERATIONS ENGINE
    // ----------------------------------------
    
    {
      ioAddress = digitalRead(AD0);               // Read Z80 address bus line AD0 (PC2)
    21b4:	82 e1       	ldi	r24, 0x12	; 18
    21b6:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <digitalRead>
    21ba:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <ioAddress>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:877
      ioData = PINA;                              // Read Z80 data bus D0-D7 (PA0-PA7)
    21be:	29 b3       	in	r18, 0x19	; 25
    21c0:	20 93 d3 01 	sts	0x01D3, r18	; 0x8001d3 <ioData>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:878
      if (ioAddress)                              // Check the I/O address (only AD0 is checked!)
    21c4:	88 23       	and	r24, r24
    21c6:	79 f0       	breq	.+30     	; 0x21e6 <loop+0x5a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:938
      //
      // See the following lines for the Opcodes details.
      // 
      // .........................................................................................................     
      {
        ioOpcode = ioData;                        // Store the I/O operation code (Opcode)
    21c8:	20 93 7f 00 	sts	0x007F, r18	; 0x80007f <ioOpcode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:939
        ioByteCnt = 0;                            // Reset the exchanged bytes counter
    21cc:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <ioByteCnt+0x1>
    21d0:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <ioByteCnt>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2013
        }
        // DEBUG END ------------------------------
        //
        
        // Control bus sequence to exit from a wait state (M interrupt cycle)
        digitalWrite(BUSREQ_, LOW);               // Request for a DMA
    21d4:	60 e0       	ldi	r22, 0x00	; 0
    21d6:	8e e0       	ldi	r24, 0x0E	; 14
    21d8:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2014
        digitalWrite(WAIT_RES_, LOW);             // Reset WAIT FF exiting from WAIT state
    21dc:	60 e0       	ldi	r22, 0x00	; 0
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
    21e4:	8c c2       	rjmp	.+1304   	; 0x26fe <loop+0x572>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:951
      // Execute the previously stored I/O write Opcode with the current data.
      // The code of the I/O write operation (Opcode) must be previously stored with a STORE Opcode operation.
      // .........................................................................................................
      //
      {
        switch (ioOpcode)
    21e6:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <ioOpcode>
    21ea:	e3 31       	cpi	r30, 0x13	; 19
    21ec:	f0 f4       	brcc	.+60     	; 0x222a <loop+0x9e>
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	e4 50       	subi	r30, 0x04	; 4
    21f2:	ff 4e       	sbci	r31, 0xEF	; 239
    21f4:	0c 94 7f 27 	jmp	0x4efe	; 0x4efe <__tablejump2__>
    21f8:	0f 11       	cpse	r16, r15
    21fa:	21 11       	cpse	r18, r1
    21fc:	15 11       	cpse	r17, r5
    21fe:	27 11       	cpse	r18, r7
    2200:	42 11       	cpse	r20, r2
    2202:	4f 11       	cpse	r20, r15
    2204:	5c 11       	cpse	r21, r12
    2206:	6a 11       	cpse	r22, r10
    2208:	78 11       	cpse	r23, r8
    220a:	86 11       	cpse	r24, r6
    220c:	a5 11       	cpse	r26, r5
    220e:	d2 11       	cpse	r29, r2
    2210:	e6 11       	cpse	r30, r6
    2212:	42 12       	cpse	r4, r18
    2214:	57 12       	cpse	r5, r23
    2216:	61 12       	cpse	r6, r17
    2218:	67 12       	cpse	r6, r23
    221a:	6b 12       	cpse	r6, r27
    221c:	02 13       	cpse	r16, r18
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:961
            //                I/O DATA:    D7 D6 D5 D4 D3 D2 D1 D0
            //                            ---------------------------------------------------------
            //                              x  x  x  x  x  x  x  0    USER Led off
            //                              x  x  x  x  x  x  x  1    USER Led on
            
            if (ioData & 0x01) digitalWrite(USER, LOW); 
    221e:	60 e0       	ldi	r22, 0x00	; 0
    2220:	20 ff       	sbrs	r18, 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:962
            else digitalWrite(USER, HIGH);
    2222:	61 e0       	ldi	r22, 0x01	; 1
    2224:	8d e0       	ldi	r24, 0x0D	; 13
    2226:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1560
              Wire.write(tempByte);               // Set STROBE bit to not active (High)
              Wire.endTransmission();
            }
          break;
        }
        if ((ioOpcode != 0x0A) && (ioOpcode != 0x0C)) ioOpcode = 0xFF;  // All done for the single byte Opcodes. 
    222a:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <ioOpcode>
    222e:	8a 30       	cpi	r24, 0x0A	; 10
    2230:	09 f4       	brne	.+2      	; 0x2234 <loop+0xa8>
    2232:	d0 cf       	rjmp	.-96     	; 0x21d4 <loop+0x48>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1560 (discriminator 1)
    2234:	8c 30       	cpi	r24, 0x0C	; 12
    2236:	09 f4       	brne	.+2      	; 0x223a <loop+0xae>
    2238:	cd cf       	rjmp	.-102    	; 0x21d4 <loop+0x48>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1560 (discriminator 2)
    223a:	8f ef       	ldi	r24, 0xFF	; 255
    223c:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <ioOpcode>
    2240:	c9 cf       	rjmp	.-110    	; 0x21d4 <loop+0x48>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:971
            // SERIAL TX:     
            //                I/O DATA:    D7 D6 D5 D4 D3 D2 D1 D0
            //                            ---------------------------------------------------------
            //                             D7 D6 D5 D4 D3 D2 D1 D0    ASCII char to be sent to serial
            
            Serial.write(ioData);
    2242:	62 2f       	mov	r22, r18
    2244:	8c e8       	ldi	r24, 0x8C	; 140
    2246:	92 e0       	ldi	r25, 0x02	; 2
    2248:	0e 94 24 22 	call	0x4448	; 0x4448 <HardwareSerial::write(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:972
          break;
    224c:	ee cf       	rjmp	.-36     	; 0x222a <loop+0x9e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:981
            //
            //                I/O DATA:    D7 D6 D5 D4 D3 D2 D1 D0
            //                            ---------------------------------------------------------
            //                             D7 D6 D5 D4 D3 D2 D1 D0    GPIOA value (see MCP23017 datasheet)
            
            if (moduleGPIO) 
    224e:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <moduleGPIO>
    2252:	88 23       	and	r24, r24
    2254:	51 f3       	breq	.-44     	; 0x222a <loop+0x9e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:983
            {
              Wire.beginTransmission(GPIOEXP_ADDR);
    2256:	60 e2       	ldi	r22, 0x20	; 32
    2258:	70 e0       	ldi	r23, 0x00	; 0
    225a:	86 ee       	ldi	r24, 0xE6	; 230
    225c:	91 e0       	ldi	r25, 0x01	; 1
    225e:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:984
              Wire.write(GPIOA_REG);              // Select GPIOA
    2262:	62 e1       	ldi	r22, 0x12	; 18
    2264:	70 e0       	ldi	r23, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1000
            //                             D7 D6 D5 D4 D3 D2 D1 D0    GPIOB value (see MCP23017 datasheet)
            
            if (moduleGPIO) 
            {
              Wire.beginTransmission(GPIOEXP_ADDR);
              Wire.write(GPIOB_REG);              // Select GPIOB
    2266:	86 ee       	ldi	r24, 0xE6	; 230
    2268:	91 e0       	ldi	r25, 0x01	; 1
    226a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1001
              Wire.write(ioData);                 // Write value
    226e:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <ioData>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1555
              Wire.write(tempByte);               // Set STROBE bit to active (Low)
              Wire.endTransmission();
              tempByte = tempByte | 0b00000001;   // Change STROBE bit to not active (High)
              Wire.beginTransmission(GPIOEXP_ADDR);
              Wire.write(GPIOA_REG);              // Select GPIOA
              Wire.write(tempByte);               // Set STROBE bit to not active (High)
    2272:	86 ee       	ldi	r24, 0xE6	; 230
    2274:	91 e0       	ldi	r25, 0x01	; 1
    2276:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <TwoWire::write(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1556
              Wire.endTransmission();
    227a:	86 ee       	ldi	r24, 0xE6	; 230
    227c:	91 e0       	ldi	r25, 0x01	; 1
    227e:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <TwoWire::endTransmission()>
    2282:	d3 cf       	rjmp	.-90     	; 0x222a <loop+0x9e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:997
            //   
            //                I/O DATA:    D7 D6 D5 D4 D3 D2 D1 D0
            //                            ---------------------------------------------------------
            //                             D7 D6 D5 D4 D3 D2 D1 D0    GPIOB value (see MCP23017 datasheet)
            
            if (moduleGPIO) 
    2284:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <moduleGPIO>
    2288:	88 23       	and	r24, r24
    228a:	79 f2       	breq	.-98     	; 0x222a <loop+0x9e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:999
            {
              Wire.beginTransmission(GPIOEXP_ADDR);
    228c:	60 e2       	ldi	r22, 0x20	; 32
    228e:	70 e0       	ldi	r23, 0x00	; 0
    2290:	86 ee       	ldi	r24, 0xE6	; 230
    2292:	91 e0       	ldi	r25, 0x01	; 1
    2294:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1000
              Wire.write(GPIOB_REG);              // Select GPIOB
    2298:	63 e1       	ldi	r22, 0x13	; 19
    229a:	70 e0       	ldi	r23, 0x00	; 0
    229c:	e4 cf       	rjmp	.-56     	; 0x2266 <loop+0xda>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1013
            //
            //                I/O DATA:    D7 D6 D5 D4 D3 D2 D1 D0
            //                            ---------------------------------------------------------
            //                             D7 D6 D5 D4 D3 D2 D1 D0    IODIRA value (see MCP23017 datasheet)
            
            if (moduleGPIO) 
    229e:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <moduleGPIO>
    22a2:	88 23       	and	r24, r24
    22a4:	11 f2       	breq	.-124    	; 0x222a <loop+0x9e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1015
            {
              Wire.beginTransmission(GPIOEXP_ADDR);
    22a6:	60 e2       	ldi	r22, 0x20	; 32
    22a8:	70 e0       	ldi	r23, 0x00	; 0
    22aa:	86 ee       	ldi	r24, 0xE6	; 230
    22ac:	91 e0       	ldi	r25, 0x01	; 1
    22ae:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1016
              Wire.write(IODIRA_REG);             // Select IODIRA
    22b2:	70 e0       	ldi	r23, 0x00	; 0
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	d7 cf       	rjmp	.-82     	; 0x2266 <loop+0xda>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1029
            //
            //                I/O DATA:    D7 D6 D5 D4 D3 D2 D1 D0
            //                            ---------------------------------------------------------
            //                             D7 D6 D5 D4 D3 D2 D1 D0    IODIRB value (see MCP23017 datasheet)
            
            if (moduleGPIO) 
    22b8:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <moduleGPIO>
    22bc:	88 23       	and	r24, r24
    22be:	09 f4       	brne	.+2      	; 0x22c2 <loop+0x136>
    22c0:	b4 cf       	rjmp	.-152    	; 0x222a <loop+0x9e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1031
            {
              Wire.beginTransmission(GPIOEXP_ADDR);
    22c2:	60 e2       	ldi	r22, 0x20	; 32
    22c4:	70 e0       	ldi	r23, 0x00	; 0
    22c6:	86 ee       	ldi	r24, 0xE6	; 230
    22c8:	91 e0       	ldi	r25, 0x01	; 1
    22ca:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1032
              Wire.write(IODIRB_REG);             // Select IODIRB
    22ce:	61 e0       	ldi	r22, 0x01	; 1
    22d0:	70 e0       	ldi	r23, 0x00	; 0
    22d2:	c9 cf       	rjmp	.-110    	; 0x2266 <loop+0xda>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1045
            //
            //                I/O DATA:    D7 D6 D5 D4 D3 D2 D1 D0
            //                            ---------------------------------------------------------
            //                             D7 D6 D5 D4 D3 D2 D1 D0    GPPUA value (see MCP23017 datasheet)
            
            if (moduleGPIO) 
    22d4:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <moduleGPIO>
    22d8:	88 23       	and	r24, r24
    22da:	09 f4       	brne	.+2      	; 0x22de <loop+0x152>
    22dc:	a6 cf       	rjmp	.-180    	; 0x222a <loop+0x9e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1047
            {
              Wire.beginTransmission(GPIOEXP_ADDR);
    22de:	60 e2       	ldi	r22, 0x20	; 32
    22e0:	70 e0       	ldi	r23, 0x00	; 0
    22e2:	86 ee       	ldi	r24, 0xE6	; 230
    22e4:	91 e0       	ldi	r25, 0x01	; 1
    22e6:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1048
              Wire.write(GPPUA_REG);              // Select GPPUA
    22ea:	6c e0       	ldi	r22, 0x0C	; 12
    22ec:	70 e0       	ldi	r23, 0x00	; 0
    22ee:	bb cf       	rjmp	.-138    	; 0x2266 <loop+0xda>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1061
            //
            //                I/O DATA:    D7 D6 D5 D4 D3 D2 D1 D0
            //                            ---------------------------------------------------------
            //                             D7 D6 D5 D4 D3 D2 D1 D0    GPPUB value (see MCP23017 datasheet)
            
            if (moduleGPIO) 
    22f0:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <moduleGPIO>
    22f4:	88 23       	and	r24, r24
    22f6:	09 f4       	brne	.+2      	; 0x22fa <loop+0x16e>
    22f8:	98 cf       	rjmp	.-208    	; 0x222a <loop+0x9e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1063
            {
              Wire.beginTransmission(GPIOEXP_ADDR);
    22fa:	60 e2       	ldi	r22, 0x20	; 32
    22fc:	70 e0       	ldi	r23, 0x00	; 0
    22fe:	86 ee       	ldi	r24, 0xE6	; 230
    2300:	91 e0       	ldi	r25, 0x01	; 1
    2302:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1064
              Wire.write(GPPUB_REG);              // Select GPPUB
    2306:	6d e0       	ldi	r22, 0x0D	; 13
    2308:	70 e0       	ldi	r23, 0x00	; 0
    230a:	ad cf       	rjmp	.-166    	; 0x2266 <loop+0xda>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1112
              diskName[2] = diskSet + 48;         // Set the current Disk Set
              diskName[4] = (ioData / 10) + 48;   // Set the disk number
              diskName[5] = ioData - ((ioData / 10) * 10) + 48;
              diskErr = openSD(diskName);         // Open the "disk file" corresponding to the given disk number
            }
            else diskErr = 16;                    // Illegal disk number
    230c:	80 e1       	ldi	r24, 0x10	; 16
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1104
            // NOTE 1: The maximum disks number may be lower due the limitations of the used OS (e.g. CP/M 2.2 supports
            //         a maximum of 16 disks)
            // NOTE 2: Because SELDISK opens the "disk file" used for disk emulation, before using WRITESECT or READSECT
            //         a SELDISK must be performed at first.
  
            if (ioData <= maxDiskNum)             // Valid disk number
    230e:	24 36       	cpi	r18, 0x64	; 100
    2310:	c8 f4       	brcc	.+50     	; 0x2344 <loop+0x1b8>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1107
            // Set the name of the file to open as virtual disk, and open it
            {
              diskName[2] = diskSet + 48;         // Set the current Disk Set
    2312:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <diskSet>
    2316:	80 5d       	subi	r24, 0xD0	; 208
    2318:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <diskName+0x2>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1108
              diskName[4] = (ioData / 10) + 48;   // Set the disk number
    231c:	82 2f       	mov	r24, r18
    231e:	6a e0       	ldi	r22, 0x0A	; 10
    2320:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <__udivmodqi4>
    2324:	90 e3       	ldi	r25, 0x30	; 48
    2326:	98 0f       	add	r25, r24
    2328:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <diskName+0x4>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1109
              diskName[5] = ioData - ((ioData / 10) * 10) + 48;
    232c:	60 e3       	ldi	r22, 0x30	; 48
    232e:	62 0f       	add	r22, r18
    2330:	26 ef       	ldi	r18, 0xF6	; 246
    2332:	82 9f       	mul	r24, r18
    2334:	60 0d       	add	r22, r0
    2336:	11 24       	eor	r1, r1
    2338:	60 93 77 00 	sts	0x0077, r22	; 0x800077 <diskName+0x5>
_Z6openSDPKc():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2610
byte openSD(const char* fileName)
// Open an existing file on SD:
// *  "fileName" is the pointer to the string holding the file name (8.3 format)
// The returned value is the resulting status (0 = ok, otherwise see printErrSD())
{
  return pf_open(fileName);
    233c:	82 e7       	ldi	r24, 0x72	; 114
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	0e 94 a0 19 	call	0x3340	; 0x3340 <pf_open>
loop():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1112
              diskName[2] = diskSet + 48;         // Set the current Disk Set
              diskName[4] = (ioData / 10) + 48;   // Set the disk number
              diskName[5] = ioData - ((ioData / 10) * 10) + 48;
              diskErr = openSD(diskName);         // Open the "disk file" corresponding to the given disk number
            }
            else diskErr = 16;                    // Illegal disk number
    2344:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <diskErr>
    2348:	70 cf       	rjmp	.-288    	; 0x222a <loop+0x9e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1140
            //
            // NOTE 1: Allowed track numbers are in the range [0..511] (512 tracks)
            // NOTE 2: Before a WRITESECT or READSECT operation at least a SELSECT or a SELTRAK operation
            //         must be performed
  
            if (!ioByteCnt)
    234a:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <ioByteCnt>
    234e:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <ioByteCnt+0x1>
    2352:	62 2f       	mov	r22, r18
    2354:	70 e0       	ldi	r23, 0x00	; 0
    2356:	00 97       	sbiw	r24, 0x00	; 0
    2358:	51 f4       	brne	.+20     	; 0x236e <loop+0x1e2>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1143
            // LSB
            {
              trackSel = ioData;
    235a:	70 93 62 01 	sts	0x0162, r23	; 0x800162 <trackSel+0x1>
    235e:	60 93 61 01 	sts	0x0161, r22	; 0x800161 <trackSel>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1263
                  if (!diskErr) diskErr = writeSD(NULL, &numWriBytes);
                  ioOpcode = 0xFF;                // All done. Set ioOpcode = "No operation"
                }
              }
            }
            ioByteCnt++;                          // Increment the counter of the exchanged data bytes
    2362:	01 96       	adiw	r24, 0x01	; 1
    2364:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <ioByteCnt+0x1>
    2368:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <ioByteCnt>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1264
          break;
    236c:	5e cf       	rjmp	.-324    	; 0x222a <loop+0x9e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1148
              trackSel = ioData;
            }
            else
            // MSB
            {
              trackSel = (((word) ioData) << 8) | lowByte(trackSel);
    236e:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <trackSel>
    2372:	36 2f       	mov	r19, r22
    2374:	30 93 62 01 	sts	0x0162, r19	; 0x800162 <trackSel+0x1>
    2378:	20 93 61 01 	sts	0x0161, r18	; 0x800161 <trackSel>
    237c:	40 91 60 01 	lds	r20, 0x0160	; 0x800160 <sectSel>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1149
              if ((trackSel < 512) && (sectSel < 32))
    2380:	21 15       	cp	r18, r1
    2382:	32 40       	sbci	r19, 0x02	; 2
    2384:	40 f4       	brcc	.+16     	; 0x2396 <loop+0x20a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1149 (discriminator 1)
    2386:	40 32       	cpi	r20, 0x20	; 32
    2388:	48 f4       	brcc	.+18     	; 0x239c <loop+0x210>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1152
              // Sector and track numbers valid
              {
                diskErr = 0;                      // No errors
    238a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <diskErr>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1160
              // Sector or track invalid number
              {
                if (sectSel < 32) diskErr = 17;   // Illegal track number
                else diskErr = 18;                // Illegal sector number
              }
              ioOpcode = 0xFF;                    // All done. Set ioOpcode = "No operation"
    238e:	2f ef       	ldi	r18, 0xFF	; 255
    2390:	20 93 7f 00 	sts	0x007F, r18	; 0x80007f <ioOpcode>
    2394:	e6 cf       	rjmp	.-52     	; 0x2362 <loop+0x1d6>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1157
                diskErr = 0;                      // No errors
              }
              else
              // Sector or track invalid number
              {
                if (sectSel < 32) diskErr = 17;   // Illegal track number
    2396:	21 e1       	ldi	r18, 0x11	; 17
    2398:	40 32       	cpi	r20, 0x20	; 32
    239a:	08 f0       	brcs	.+2      	; 0x239e <loop+0x212>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1158
                else diskErr = 18;                // Illegal sector number
    239c:	22 e1       	ldi	r18, 0x12	; 18
    239e:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <diskErr>
    23a2:	f5 cf       	rjmp	.-22     	; 0x238e <loop+0x202>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1186
            //
            // NOTE 1: Allowed sector numbers are in the range [0..31] (32 sectors)
            // NOTE 2: Before a WRITESECT or READSECT operation at least a SELSECT or a SELTRAK operation
            //         must be performed
  
            sectSel = ioData;
    23a4:	20 93 60 01 	sts	0x0160, r18	; 0x800160 <sectSel>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1187
            if ((trackSel < 512) && (sectSel < 32))
    23a8:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <trackSel>
    23ac:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <trackSel+0x1>
    23b0:	81 15       	cp	r24, r1
    23b2:	92 40       	sbci	r25, 0x02	; 2
    23b4:	28 f4       	brcc	.+10     	; 0x23c0 <loop+0x234>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1187 (discriminator 1)
    23b6:	20 32       	cpi	r18, 0x20	; 32
    23b8:	38 f4       	brcc	.+14     	; 0x23c8 <loop+0x23c>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1190
            // Sector and track numbers valid
            {
              diskErr = 0;                        // No errors
    23ba:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <diskErr>
    23be:	35 cf       	rjmp	.-406    	; 0x222a <loop+0x9e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1195
            }
            else
            // Sector or track invalid number
            {
              if (sectSel < 32) diskErr = 17;     // Illegal track number
    23c0:	81 e1       	ldi	r24, 0x11	; 17
    23c2:	20 32       	cpi	r18, 0x20	; 32
    23c4:	08 f4       	brcc	.+2      	; 0x23c8 <loop+0x23c>
    23c6:	be cf       	rjmp	.-132    	; 0x2344 <loop+0x1b8>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1196
              else diskErr = 18;                  // Illegal sector number
    23c8:	82 e1       	ldi	r24, 0x12	; 18
    23ca:	bc cf       	rjmp	.-136    	; 0x2344 <loop+0x1b8>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1232
            // NOTE 1: Before a WRITESECT operation at least a SELTRACK or a SELSECT must be always performed
            // NOTE 2: Remember to open the right "disk file" at first using the SELDISK Opcode
            // NOTE 3: The write finalization on SD "disk file" is executed only on the 512th data byte exchange, so be 
            //         sure that exactly 512 data bytes are exchanged.
  
            if (!ioByteCnt)
    23cc:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <ioByteCnt>
    23d0:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <ioByteCnt+0x1>
    23d4:	89 2b       	or	r24, r25
    23d6:	d1 f4       	brne	.+52     	; 0x240c <loop+0x280>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1235
            // First byte of 512, so set the right file pointer to the current emulated track/sector first
            {
              if ((trackSel < 512) && (sectSel < 32) && (!diskErr))
    23d8:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <trackSel>
    23dc:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <trackSel+0x1>
    23e0:	81 15       	cp	r24, r1
    23e2:	42 e0       	ldi	r20, 0x02	; 2
    23e4:	94 07       	cpc	r25, r20
    23e6:	90 f4       	brcc	.+36     	; 0x240c <loop+0x280>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1235 (discriminator 1)
    23e8:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <sectSel>
    23ec:	20 32       	cpi	r18, 0x20	; 32
    23ee:	70 f4       	brcc	.+28     	; 0x240c <loop+0x280>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1235 (discriminator 2)
    23f0:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <diskErr>
    23f4:	31 11       	cpse	r19, r1
    23f6:	0a c0       	rjmp	.+20     	; 0x240c <loop+0x280>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1238
              // Sector and track numbers valid and no previous error; set the LBA-like logical sector
              {
              diskErr = seekSD((trackSel << 5) | sectSel);  // Set the starting point inside the "disk file"
    23f8:	75 e0       	ldi	r23, 0x05	; 5
    23fa:	88 0f       	add	r24, r24
    23fc:	99 1f       	adc	r25, r25
    23fe:	7a 95       	dec	r23
    2400:	e1 f7       	brne	.-8      	; 0x23fa <loop+0x26e>
    2402:	82 2b       	or	r24, r18
    2404:	0e 94 6d 05 	call	0xada	; 0xada <seekSD(unsigned int)>
    2408:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <diskErr>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1245
                                                            //  logical sector address created as TTTTTTTTTSSSSS
              }
            }
            
  
            if (!diskErr)
    240c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <diskErr>
    2410:	81 11       	cpse	r24, r1
    2412:	33 c0       	rjmp	.+102    	; 0x247a <loop+0x2ee>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1248
            // No previous error (e.g. selecting disk, track or sector)
            {
              tempByte = ioByteCnt % 32;          // [0..31]
    2414:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <ioByteCnt>
    2418:	8f 71       	andi	r24, 0x1F	; 31
    241a:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <tempByte>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1249
              bufferSD[tempByte] = ioData;        // Store current exchanged data byte in the buffer array
    241e:	e8 2f       	mov	r30, r24
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	e8 59       	subi	r30, 0x98	; 152
    2424:	fe 4f       	sbci	r31, 0xFE	; 254
    2426:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <ioData>
    242a:	90 83       	st	Z, r25
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1250
              if (tempByte == 31)
    242c:	8f 31       	cpi	r24, 0x1F	; 31
    242e:	29 f5       	brne	.+74     	; 0x247a <loop+0x2ee>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1253
              // Buffer full. Write all the buffer content (32 bytes) into the "disk file"
              {
                diskErr = writeSD(bufferSD, &numWriBytes);
    2430:	6f e5       	ldi	r22, 0x5F	; 95
    2432:	71 e0       	ldi	r23, 0x01	; 1
    2434:	88 e6       	ldi	r24, 0x68	; 104
    2436:	91 e0       	ldi	r25, 0x01	; 1
    2438:	0e 94 4e 05 	call	0xa9c	; 0xa9c <writeSD(void*, unsigned char*)>
    243c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <diskErr>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1254
                if (numWriBytes < 32) diskErr = 19; // Reached an unexpected EOF
    2440:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <numWriBytes>
    2444:	80 32       	cpi	r24, 0x20	; 32
    2446:	18 f4       	brcc	.+6      	; 0x244e <loop+0x2c2>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1254 (discriminator 1)
    2448:	83 e1       	ldi	r24, 0x13	; 19
    244a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <diskErr>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1255
                if (ioByteCnt >= 511)
    244e:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <ioByteCnt>
    2452:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <ioByteCnt+0x1>
    2456:	8f 3f       	cpi	r24, 0xFF	; 255
    2458:	91 40       	sbci	r25, 0x01	; 1
    245a:	78 f0       	brcs	.+30     	; 0x247a <loop+0x2ee>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1258
                // Finalize write operation and check result (if no previous error occurred)
                {
                  if (!diskErr) diskErr = writeSD(NULL, &numWriBytes);
    245c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <diskErr>
    2460:	81 11       	cpse	r24, r1
    2462:	08 c0       	rjmp	.+16     	; 0x2474 <loop+0x2e8>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1258 (discriminator 1)
    2464:	6f e5       	ldi	r22, 0x5F	; 95
    2466:	71 e0       	ldi	r23, 0x01	; 1
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <writeSD(void*, unsigned char*)>
    2470:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <diskErr>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1259
                  ioOpcode = 0xFF;                // All done. Set ioOpcode = "No operation"
    2474:	8f ef       	ldi	r24, 0xFF	; 255
    2476:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <ioOpcode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1263
                }
              }
            }
            ioByteCnt++;                          // Increment the counter of the exchanged data bytes
    247a:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <ioByteCnt>
    247e:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <ioByteCnt+0x1>
    2482:	6f cf       	rjmp	.-290    	; 0x2362 <loop+0x1d6>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1315
            //  fixed bank mapped in the upper half of the Z80 address space (from 0x8000 to 0xFFFF).
            //
            //
            // NOTE: If the Os Bank number is greater than 2 no selection is done.
  
            switch (ioData)
    2484:	21 30       	cpi	r18, 0x01	; 1
    2486:	69 f0       	breq	.+26     	; 0x24a2 <loop+0x316>
    2488:	28 f0       	brcs	.+10     	; 0x2494 <loop+0x308>
    248a:	22 30       	cpi	r18, 0x02	; 2
    248c:	09 f0       	breq	.+2      	; 0x2490 <loop+0x304>
    248e:	cd ce       	rjmp	.-614    	; 0x222a <loop+0x9e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1331
                digitalWrite(BANK1, HIGH);
              break;  
  
              case 2:                             // Os bank 2
                // Set physical bank 3 (logical bank 2)
                digitalWrite(BANK0, LOW);
    2490:	60 e0       	ldi	r22, 0x00	; 0
    2492:	08 c0       	rjmp	.+16     	; 0x24a4 <loop+0x318>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1319
  
            switch (ioData)
            {
              case 0:                             // Os bank 0
                // Set physical bank 0 (logical bank 1)
                digitalWrite(BANK0, HIGH);
    2494:	61 e0       	ldi	r22, 0x01	; 1
    2496:	8c e0       	ldi	r24, 0x0C	; 12
    2498:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1320
                digitalWrite(BANK1, LOW);
    249c:	60 e0       	ldi	r22, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1332
              break;  
  
              case 2:                             // Os bank 2
                // Set physical bank 3 (logical bank 2)
                digitalWrite(BANK0, LOW);
                digitalWrite(BANK1, HIGH);
    249e:	8b e0       	ldi	r24, 0x0B	; 11
    24a0:	c2 ce       	rjmp	.-636    	; 0x2226 <loop+0x9a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1325
                digitalWrite(BANK1, LOW);
              break;
  
              case 1:                             // Os bank 1
                // Set physical bank 2 (logical bank 3)
                digitalWrite(BANK0, HIGH);
    24a2:	61 e0       	ldi	r22, 0x01	; 1
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1331
                digitalWrite(BANK1, HIGH);
              break;  
  
              case 2:                             // Os bank 2
                // Set physical bank 3 (logical bank 2)
                digitalWrite(BANK0, LOW);
    24a4:	8c e0       	ldi	r24, 0x0C	; 12
    24a6:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1332
                digitalWrite(BANK1, HIGH);
    24aa:	61 e0       	ldi	r22, 0x01	; 1
    24ac:	f8 cf       	rjmp	.-16     	; 0x249e <loop+0x312>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1403
            // To ensure safe Opcode calls inside the Z80 user code, before every Opcode call the interrupt must be 
            //  disabled an re-enabled soon after the completion of the Opcode call.
            // 
            // ...................................................................................
  
            Z80IntRx = ioData & 1;                // Enable/disable the Systick IRQ generation
    24ae:	82 2f       	mov	r24, r18
    24b0:	81 70       	andi	r24, 0x01	; 1
    24b2:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <Z80IntRx>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1404
            Z80IntSysTick = (ioData & (1 << 1)) >> 1;  // Enable/disable the Serial Rx IRQ generation
    24b6:	21 fb       	bst	r18, 1
    24b8:	66 27       	eor	r22, r22
    24ba:	60 f9       	bld	r22, 0
    24bc:	60 93 c4 01 	sts	0x01C4, r22	; 0x8001c4 <Z80IntSysTick>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1405
          break;
    24c0:	b4 ce       	rjmp	.-664    	; 0x222a <loop+0x9e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1420
            // At reset time the default value is 100ms.
            // See SETIRQ and SYSIRQ Opcodes for more info.
            //
            // NOTE: If the time is 0 milliseconds the set operation is ignored.
  
            if (ioData >0) sysTickTime = ioData;
    24c2:	22 23       	and	r18, r18
    24c4:	09 f4       	brne	.+2      	; 0x24c8 <loop+0x33c>
    24c6:	b1 ce       	rjmp	.-670    	; 0x222a <loop+0x9e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1420 (discriminator 1)
    24c8:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <sysTickTime>
    24cc:	ae ce       	rjmp	.-676    	; 0x222a <loop+0x9e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1438
            // The value of D0 can be read using the SYSFLAGS Opcode (bit D4).
            //
            // NOTE: The CP/M custom BIOS (CBIOS) must implement a read of the SYSFLAGS (bit D4) Opcode to switch on/off
            //       the CP/M warm boot message display

            cpmWarmBootFlg = ioData & 0x01;
    24ce:	21 70       	andi	r18, 0x01	; 1
    24d0:	20 93 ba 01 	sts	0x01BA, r18	; 0x8001ba <cpmWarmBootFlg>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1439
          break;
    24d4:	aa ce       	rjmp	.-684    	; 0x222a <loop+0x9e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1486
            // NOTE 1: When the GPIO is set to operate as an SPP port all the GPIO write Opcodes (GPIOA Write, GPIOB Write, IODIRA Write, 
            //         IODIRB Write, GPPUA Write, GPPUB Write) are ignored/disabled.
            // NOTE 2: If the GPIO expansion module (GPE) is not found this Opcode is ignored.
            // NOTE 3: When the SPP mode is activated cannot be disabled anymore (the only way is reset the board).
        
            if (moduleGPIO)                       // Only if GPE was found
    24d6:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <moduleGPIO>
    24da:	88 23       	and	r24, r24
    24dc:	09 f4       	brne	.+2      	; 0x24e0 <loop+0x354>
    24de:	a5 ce       	rjmp	.-694    	; 0x222a <loop+0x9e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1488
            {
              SPPmode = 1;                        // Set the SPP mode flag
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <SPPmode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1489
              SPPautofd = (!ioData) & 0x01;       // Store the value of the AUTOFD Control Line (active Low))
    24e6:	21 11       	cpse	r18, r1
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <SPPautofd>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1492
              
              // Set STROBE and INIT at 1, and AUTOFD = !D0
              Wire.beginTransmission(GPIOEXP_ADDR);
    24ee:	60 e2       	ldi	r22, 0x20	; 32
    24f0:	70 e0       	ldi	r23, 0x00	; 0
    24f2:	86 ee       	ldi	r24, 0xE6	; 230
    24f4:	91 e0       	ldi	r25, 0x01	; 1
    24f6:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1493
              Wire.write(GPIOA_REG);              // Select GPIOA
    24fa:	62 e1       	ldi	r22, 0x12	; 18
    24fc:	70 e0       	ldi	r23, 0x00	; 0
    24fe:	86 ee       	ldi	r24, 0xE6	; 230
    2500:	91 e0       	ldi	r25, 0x01	; 1
    2502:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1494
              Wire.write(0b00000101 | (byte) (SPPautofd << 1)); // Write value
    2506:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <SPPautofd>
    250a:	66 0f       	add	r22, r22
    250c:	65 60       	ori	r22, 0x05	; 5
    250e:	70 e0       	ldi	r23, 0x00	; 0
    2510:	86 ee       	ldi	r24, 0xE6	; 230
    2512:	91 e0       	ldi	r25, 0x01	; 1
    2514:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1495
              Wire.endTransmission();
    2518:	86 ee       	ldi	r24, 0xE6	; 230
    251a:	91 e0       	ldi	r25, 0x01	; 1
    251c:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <TwoWire::endTransmission()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1498
              
              // Set the GPIO port to work as an SPP port (direction and pullup)
              Wire.beginTransmission(GPIOEXP_ADDR);
    2520:	60 e2       	ldi	r22, 0x20	; 32
    2522:	70 e0       	ldi	r23, 0x00	; 0
    2524:	86 ee       	ldi	r24, 0xE6	; 230
    2526:	91 e0       	ldi	r25, 0x01	; 1
    2528:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1499
              Wire.write(IODIRA_REG);             // Select IODIRA
    252c:	70 e0       	ldi	r23, 0x00	; 0
    252e:	60 e0       	ldi	r22, 0x00	; 0
    2530:	86 ee       	ldi	r24, 0xE6	; 230
    2532:	91 e0       	ldi	r25, 0x01	; 1
    2534:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1500
              Wire.write(0b11111000);             // Write value (1 = input, 0 = ouput)
    2538:	68 ef       	ldi	r22, 0xF8	; 248
    253a:	70 e0       	ldi	r23, 0x00	; 0
    253c:	86 ee       	ldi	r24, 0xE6	; 230
    253e:	91 e0       	ldi	r25, 0x01	; 1
    2540:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1501
              Wire.endTransmission();
    2544:	86 ee       	ldi	r24, 0xE6	; 230
    2546:	91 e0       	ldi	r25, 0x01	; 1
    2548:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <TwoWire::endTransmission()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1502
              Wire.beginTransmission(GPIOEXP_ADDR);
    254c:	60 e2       	ldi	r22, 0x20	; 32
    254e:	70 e0       	ldi	r23, 0x00	; 0
    2550:	86 ee       	ldi	r24, 0xE6	; 230
    2552:	91 e0       	ldi	r25, 0x01	; 1
    2554:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1503
              Wire.write(IODIRB_REG);             // Select IODIRB 
    2558:	61 e0       	ldi	r22, 0x01	; 1
    255a:	70 e0       	ldi	r23, 0x00	; 0
    255c:	86 ee       	ldi	r24, 0xE6	; 230
    255e:	91 e0       	ldi	r25, 0x01	; 1
    2560:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1504
              Wire.write(0b00000000);             // Write value (1 = input, 0 = ouput)
    2564:	70 e0       	ldi	r23, 0x00	; 0
    2566:	60 e0       	ldi	r22, 0x00	; 0
    2568:	86 ee       	ldi	r24, 0xE6	; 230
    256a:	91 e0       	ldi	r25, 0x01	; 1
    256c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1505
              Wire.endTransmission();
    2570:	86 ee       	ldi	r24, 0xE6	; 230
    2572:	91 e0       	ldi	r25, 0x01	; 1
    2574:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <TwoWire::endTransmission()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1506
              Wire.beginTransmission(GPIOEXP_ADDR);
    2578:	60 e2       	ldi	r22, 0x20	; 32
    257a:	70 e0       	ldi	r23, 0x00	; 0
    257c:	86 ee       	ldi	r24, 0xE6	; 230
    257e:	91 e0       	ldi	r25, 0x01	; 1
    2580:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1507
              Wire.write(GPPUA_REG);              // Select GPPUA
    2584:	6c e0       	ldi	r22, 0x0C	; 12
    2586:	70 e0       	ldi	r23, 0x00	; 0
    2588:	86 ee       	ldi	r24, 0xE6	; 230
    258a:	91 e0       	ldi	r25, 0x01	; 1
    258c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1508
              Wire.write(0b11111111);             // Write value (1 = pullup enabled, 0 = pullup disabled)
    2590:	6f ef       	ldi	r22, 0xFF	; 255
    2592:	70 e0       	ldi	r23, 0x00	; 0
    2594:	86 ee       	ldi	r24, 0xE6	; 230
    2596:	91 e0       	ldi	r25, 0x01	; 1
    2598:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1509
              Wire.endTransmission();
    259c:	86 ee       	ldi	r24, 0xE6	; 230
    259e:	91 e0       	ldi	r25, 0x01	; 1
    25a0:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <TwoWire::endTransmission()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1513
              
              // Initialize the printer using a pulse on INIT
              // NOTE: The I2C protocol introduces delays greater than needed by the SPP, so no further delay is used here to generate the pulse
              tempByte = 0b00000001 | (byte) (SPPautofd << 1);  // Change INIT bit to active (Low)
    25a4:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <SPPautofd>
    25a8:	88 0f       	add	r24, r24
    25aa:	81 60       	ori	r24, 0x01	; 1
    25ac:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <tempByte>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1514
              Wire.beginTransmission(GPIOEXP_ADDR);
    25b0:	60 e2       	ldi	r22, 0x20	; 32
    25b2:	70 e0       	ldi	r23, 0x00	; 0
    25b4:	86 ee       	ldi	r24, 0xE6	; 230
    25b6:	91 e0       	ldi	r25, 0x01	; 1
    25b8:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1515
              Wire.write(GPIOA_REG);              // Select GPIOA
    25bc:	62 e1       	ldi	r22, 0x12	; 18
    25be:	70 e0       	ldi	r23, 0x00	; 0
    25c0:	86 ee       	ldi	r24, 0xE6	; 230
    25c2:	91 e0       	ldi	r25, 0x01	; 1
    25c4:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1516
              Wire.write(tempByte);               // Set INIT bit to active (Low)
    25c8:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <tempByte>
    25cc:	86 ee       	ldi	r24, 0xE6	; 230
    25ce:	91 e0       	ldi	r25, 0x01	; 1
    25d0:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <TwoWire::write(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1517
              Wire.endTransmission();
    25d4:	86 ee       	ldi	r24, 0xE6	; 230
    25d6:	91 e0       	ldi	r25, 0x01	; 1
    25d8:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <TwoWire::endTransmission()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1518
              tempByte = tempByte | 0b00000100;   // Change INIT bit to not active (High)
    25dc:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <tempByte>
    25e0:	84 60       	ori	r24, 0x04	; 4
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1552
              tempByte = 0b11111100 | (byte) (SPPautofd << 1);  // Change STROBE bit to active (Low)
              Wire.beginTransmission(GPIOEXP_ADDR);
              Wire.write(GPIOA_REG);              // Select GPIOA
              Wire.write(tempByte);               // Set STROBE bit to active (Low)
              Wire.endTransmission();
              tempByte = tempByte | 0b00000001;   // Change STROBE bit to not active (High)
    25e2:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <tempByte>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1553
              Wire.beginTransmission(GPIOEXP_ADDR);
    25e6:	60 e2       	ldi	r22, 0x20	; 32
    25e8:	70 e0       	ldi	r23, 0x00	; 0
    25ea:	86 ee       	ldi	r24, 0xE6	; 230
    25ec:	91 e0       	ldi	r25, 0x01	; 1
    25ee:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1554
              Wire.write(GPIOA_REG);              // Select GPIOA
    25f2:	62 e1       	ldi	r22, 0x12	; 18
    25f4:	70 e0       	ldi	r23, 0x00	; 0
    25f6:	86 ee       	ldi	r24, 0xE6	; 230
    25f8:	91 e0       	ldi	r25, 0x01	; 1
    25fa:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1555
              Wire.write(tempByte);               // Set STROBE bit to not active (High)
    25fe:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <tempByte>
    2602:	37 ce       	rjmp	.-914    	; 0x2272 <loop+0xe6>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1540
            //  ready or not, so you have to use the GETSPP Opcode before for that.
            // If the SPP mode is disabled (or the GPE is not installed) this Opcode is ignored.
            //
            // NOTE: to use WRSPP the SETSPP Opcode should be called first to activate the SPP mode of the GPIO port.
            
            if (SPPmode)                          // Only if SPP mode is active
    2604:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <SPPmode>
    2608:	88 23       	and	r24, r24
    260a:	09 f4       	brne	.+2      	; 0x260e <loop+0x482>
    260c:	0e ce       	rjmp	.-996    	; 0x222a <loop+0x9e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1543
            {
              // NOTE: The I2C protocol introduces delays greater than needed by the SPP, so no further delay is used here to generate the pulse
              Wire.beginTransmission(GPIOEXP_ADDR);
    260e:	60 e2       	ldi	r22, 0x20	; 32
    2610:	70 e0       	ldi	r23, 0x00	; 0
    2612:	86 ee       	ldi	r24, 0xE6	; 230
    2614:	91 e0       	ldi	r25, 0x01	; 1
    2616:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1544
              Wire.write(GPIOB_REG);              // Select GPIOB
    261a:	63 e1       	ldi	r22, 0x13	; 19
    261c:	70 e0       	ldi	r23, 0x00	; 0
    261e:	86 ee       	ldi	r24, 0xE6	; 230
    2620:	91 e0       	ldi	r25, 0x01	; 1
    2622:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1545
              Wire.write(ioData);                 // Data on GPIOB
    2626:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <ioData>
    262a:	86 ee       	ldi	r24, 0xE6	; 230
    262c:	91 e0       	ldi	r25, 0x01	; 1
    262e:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <TwoWire::write(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1546
              Wire.endTransmission();
    2632:	86 ee       	ldi	r24, 0xE6	; 230
    2634:	91 e0       	ldi	r25, 0x01	; 1
    2636:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <TwoWire::endTransmission()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1547
              tempByte = 0b11111100 | (byte) (SPPautofd << 1);  // Change STROBE bit to active (Low)
    263a:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <SPPautofd>
    263e:	88 0f       	add	r24, r24
    2640:	8c 6f       	ori	r24, 0xFC	; 252
    2642:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <tempByte>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1548
              Wire.beginTransmission(GPIOEXP_ADDR);
    2646:	60 e2       	ldi	r22, 0x20	; 32
    2648:	70 e0       	ldi	r23, 0x00	; 0
    264a:	86 ee       	ldi	r24, 0xE6	; 230
    264c:	91 e0       	ldi	r25, 0x01	; 1
    264e:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1549
              Wire.write(GPIOA_REG);              // Select GPIOA
    2652:	62 e1       	ldi	r22, 0x12	; 18
    2654:	70 e0       	ldi	r23, 0x00	; 0
    2656:	86 ee       	ldi	r24, 0xE6	; 230
    2658:	91 e0       	ldi	r25, 0x01	; 1
    265a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1550
              Wire.write(tempByte);               // Set STROBE bit to active (Low)
    265e:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <tempByte>
    2662:	86 ee       	ldi	r24, 0xE6	; 230
    2664:	91 e0       	ldi	r25, 0x01	; 1
    2666:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <TwoWire::write(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1551
              Wire.endTransmission();
    266a:	86 ee       	ldi	r24, 0xE6	; 230
    266c:	91 e0       	ldi	r25, 0x01	; 1
    266e:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <TwoWire::endTransmission()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1552
              tempByte = tempByte | 0b00000001;   // Change STROBE bit to not active (High)
    2672:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <tempByte>
    2676:	81 60       	ori	r24, 0x01	; 1
    2678:	b4 cf       	rjmp	.-152    	; 0x25e2 <loop+0x456>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1571
      digitalWrite(WAIT_RES_, LOW);               // Reset WAIT FF exiting from WAIT state
      digitalWrite(WAIT_RES_, HIGH);              // Now Z80 is in DMA, so it's safe set WAIT_RES_ HIGH again
      digitalWrite(BUSREQ_, HIGH);                // Resume Z80 from DMA
    }
    else 
      if (!digitalRead(RD_))
    267a:	84 e1       	ldi	r24, 0x14	; 20
    267c:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <digitalRead>
    2680:	89 2b       	or	r24, r25
    2682:	09 f0       	breq	.+2      	; 0x2686 <loop+0x4fa>
    2684:	fe c1       	rjmp	.+1020   	; 0x2a82 <loop+0x8f6>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1579
      // ----------------------------------------
      // VIRTUAL I/O READ OPERATIONS ENGINE
      // ----------------------------------------
      
      {
        ioAddress = digitalRead(AD0);             // Read Z80 address bus line AD0 (PC2)
    2686:	82 e1       	ldi	r24, 0x12	; 18
    2688:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <digitalRead>
    268c:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <ioAddress>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1580
        ioData = 0;                               // Clear input data buffer
    2690:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <ioData>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1581
        if (ioAddress)                            // Check the I/O address (only AD0 is checked!)
    2694:	88 23       	and	r24, r24
    2696:	09 f4       	brne	.+2      	; 0x269a <loop+0x50e>
    2698:	7c c0       	rjmp	.+248    	; 0x2792 <loop+0x606>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1614
            Serial.println(irqStatus);
          }
          // DEBUG END ------------------------------
          //
        
          ioData = 0xFF;
    269a:	8f ef       	ldi	r24, 0xFF	; 255
    269c:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <ioData>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1615
          if (Serial.available() > 0)
    26a0:	8c e8       	ldi	r24, 0x8C	; 140
    26a2:	92 e0       	ldi	r25, 0x02	; 2
    26a4:	0e 94 98 21 	call	0x4330	; 0x4330 <HardwareSerial::available()>
    26a8:	18 16       	cp	r1, r24
    26aa:	19 06       	cpc	r1, r25
    26ac:	0c f0       	brlt	.+2      	; 0x26b0 <loop+0x524>
    26ae:	6d c0       	rjmp	.+218    	; 0x278a <loop+0x5fe>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1617
          {
            ioData = Serial.read();
    26b0:	8c e8       	ldi	r24, 0x8C	; 140
    26b2:	92 e0       	ldi	r25, 0x02	; 2
    26b4:	0e 94 b2 21 	call	0x4364	; 0x4364 <HardwareSerial::read()>
    26b8:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <ioData>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1618
            LastRxIsEmpty = 0;                    // Reset the "Last Rx char was empty" flag
    26bc:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <LastRxIsEmpty>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1621
          }
          else LastRxIsEmpty = 1;                 // Set the "Last Rx char was empty" flag
          digitalWrite(INT_, HIGH);               // Reset the INT_ signal (if used)
    26c0:	61 e0       	ldi	r22, 0x01	; 1
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1622
          irqStatus = irqStatus & B11111110;      // Reset the serial Rx IRQ status bit (see SYSIRQ Opcode) 
    26c8:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <irqStatus>
    26cc:	8e 7f       	andi	r24, 0xFE	; 254
    26ce:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <irqStatus>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1623
          RxDoneFlag = 1;
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <RxDoneFlag>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1978
            break;
          }
          if ((ioOpcode != 0x84) && (ioOpcode != 0x86)) ioOpcode = 0xFF;  // All done for the single byte Opcodes. 
                                                                          //  Set ioOpcode = "No operation"
        }
        DDRA = 0xFF;                              // Configure Z80 data bus D0-D7 (PA0-PA7) as output
    26d8:	cf ef       	ldi	r28, 0xFF	; 255
    26da:	ca bb       	out	0x1a, r28	; 26
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1979
        PORTA = ioData;                           // Current output on data bus
    26dc:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <ioData>
    26e0:	8b bb       	out	0x1b, r24	; 27
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1982

        // Control bus sequence to exit from a wait state (M I/O read cycle)
        digitalWrite(BUSREQ_, LOW);               // Request for a DMA
    26e2:	60 e0       	ldi	r22, 0x00	; 0
    26e4:	8e e0       	ldi	r24, 0x0E	; 14
    26e6:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1983
        digitalWrite(WAIT_RES_, LOW);             // Now is safe reset WAIT FF (exiting from WAIT state)
    26ea:	60 e0       	ldi	r22, 0x00	; 0
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1984
        delayMicroseconds(2);                     // Wait 2us just to be sure that Z80 read the data and go HiZ
    26f2:	82 e0       	ldi	r24, 0x02	; 2
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <delayMicroseconds>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1985
        DDRA = 0x00;                              // Configure Z80 data bus D0-D7 (PA0-PA7) as input with pull-up
    26fa:	1a ba       	out	0x1a, r1	; 26
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1986
        PORTA = 0xFF;
    26fc:	cb bb       	out	0x1b, r28	; 27
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2015
        //
        
        // Control bus sequence to exit from a wait state (M interrupt cycle)
        digitalWrite(BUSREQ_, LOW);               // Request for a DMA
        digitalWrite(WAIT_RES_, LOW);             // Reset WAIT FF exiting from WAIT state
        digitalWrite(WAIT_RES_, HIGH);            // Now Z80 is in DMA, so it's safe set WAIT_RES_ HIGH again
    26fe:	61 e0       	ldi	r22, 0x01	; 1
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2016
        digitalWrite(BUSREQ_, HIGH);              // Resume Z80 from DMA
    2706:	61 e0       	ldi	r22, 0x01	; 1
    2708:	8e e0       	ldi	r24, 0x0E	; 14
    270a:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2020
      }
  }

  if (Z80IntSysTick)
    270e:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <Z80IntSysTick>
    2712:	88 23       	and	r24, r24
    2714:	89 f1       	breq	.+98     	; 0x2778 <loop+0x5ec>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2023
  // Systick interrupt generation is enabled. Check if the INT_ signal must be activated
  {
    if ((micros() - timeStamp) > ((long unsigned) (sysTickTime) * 1000))
    2716:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <micros>
    271a:	c0 90 c0 01 	lds	r12, 0x01C0	; 0x8001c0 <timeStamp>
    271e:	d0 90 c1 01 	lds	r13, 0x01C1	; 0x8001c1 <timeStamp+0x1>
    2722:	e0 90 c2 01 	lds	r14, 0x01C2	; 0x8001c2 <timeStamp+0x2>
    2726:	f0 90 c3 01 	lds	r15, 0x01C3	; 0x8001c3 <timeStamp+0x3>
    272a:	9b 01       	movw	r18, r22
    272c:	ac 01       	movw	r20, r24
    272e:	2c 19       	sub	r18, r12
    2730:	3d 09       	sbc	r19, r13
    2732:	4e 09       	sbc	r20, r14
    2734:	5f 09       	sbc	r21, r15
    2736:	69 01       	movw	r12, r18
    2738:	7a 01       	movw	r14, r20
    273a:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <sysTickTime>
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	a8 ee       	ldi	r26, 0xE8	; 232
    2742:	b3 e0       	ldi	r27, 0x03	; 3
    2744:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__umulhisi3>
    2748:	6c 15       	cp	r22, r12
    274a:	7d 05       	cpc	r23, r13
    274c:	8e 05       	cpc	r24, r14
    274e:	9f 05       	cpc	r25, r15
    2750:	98 f4       	brcc	.+38     	; 0x2778 <loop+0x5ec>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2026
    // <sysTickTime> milliseconds are elapsed, so a Systick interrupt is required
    {
      digitalWrite(INT_, LOW);
    2752:	60 e0       	ldi	r22, 0x00	; 0
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2027
      irqStatus = irqStatus | B00000010;          // Set the Systick IRQ status bit (see SYSIRQ Opcode)
    275a:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <irqStatus>
    275e:	82 60       	ori	r24, 0x02	; 2
    2760:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <irqStatus>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2028
      timeStamp = micros();
    2764:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <micros>
    2768:	60 93 c0 01 	sts	0x01C0, r22	; 0x8001c0 <timeStamp>
    276c:	70 93 c1 01 	sts	0x01C1, r23	; 0x8001c1 <timeStamp+0x1>
    2770:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <timeStamp+0x2>
    2774:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <timeStamp+0x3>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2031
    }
  }
}
    2778:	df 91       	pop	r29
    277a:	cf 91       	pop	r28
    277c:	1f 91       	pop	r17
    277e:	0f 91       	pop	r16
    2780:	ff 90       	pop	r15
    2782:	ef 90       	pop	r14
    2784:	df 90       	pop	r13
    2786:	cf 90       	pop	r12
    2788:	08 95       	ret
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1620
          if (Serial.available() > 0)
          {
            ioData = Serial.read();
            LastRxIsEmpty = 0;                    // Reset the "Last Rx char was empty" flag
          }
          else LastRxIsEmpty = 1;                 // Set the "Last Rx char was empty" flag
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <LastRxIsEmpty>
    2790:	97 cf       	rjmp	.-210    	; 0x26c0 <loop+0x534>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1638
        // NOTE: For multi-byte read Opcode (as DATETIME) read sequentially all the data bytes without to send
        //       a STORE Opcode operation before each data byte after the first one.
        // .........................................................................................................
        //
        {
          switch (ioOpcode)
    2792:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <ioOpcode>
    2796:	e0 58       	subi	r30, 0x80	; 128
    2798:	eb 30       	cpi	r30, 0x0B	; 11
    279a:	58 f5       	brcc	.+86     	; 0x27f2 <loop+0x666>
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	ed 52       	subi	r30, 0x2D	; 45
    27a0:	fc 4e       	sbci	r31, 0xEC	; 236
    27a2:	0c 94 7f 27 	jmp	0x4efe	; 0x4efe <__tablejump2__>
    27a6:	de 13       	cpse	r29, r30
    27a8:	03 14       	cp	r0, r3
    27aa:	2c 14       	cp	r2, r12
    27ac:	39 14       	cp	r3, r9
    27ae:	5c 14       	cp	r5, r12
    27b0:	b0 14       	cp	r11, r0
    27b2:	b3 14       	cp	r11, r3
    27b4:	06 15       	cp	r16, r6
    27b6:	0b 15       	cp	r16, r11
    27b8:	10 15       	cp	r17, r0
    27ba:	17 15       	cp	r17, r7
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1648
              //                I/O DATA:    D7 D6 D5 D4 D3 D2 D1 D0
              //                            ---------------------------------------------------------
              //                              0  0  0  0  0  0  0  0    USER Key not pressed
              //                              0  0  0  0  0  0  0  1    USER Key pressed
              
              tempByte = digitalRead(USER);       // Save USER led status
    27bc:	8d e0       	ldi	r24, 0x0D	; 13
    27be:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <digitalRead>
    27c2:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <tempByte>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1649
              pinMode(USER, INPUT_PULLUP);        // Read USER Key
    27c6:	62 e0       	ldi	r22, 0x02	; 2
    27c8:	8d e0       	ldi	r24, 0x0D	; 13
    27ca:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1650
              ioData = !digitalRead(USER);
    27ce:	8d e0       	ldi	r24, 0x0D	; 13
    27d0:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <digitalRead>
    27d4:	21 e0       	ldi	r18, 0x01	; 1
    27d6:	89 2b       	or	r24, r25
    27d8:	09 f0       	breq	.+2      	; 0x27dc <loop+0x650>
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	20 93 d3 01 	sts	0x01D3, r18	; 0x8001d3 <ioData>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1651
              pinMode(USER, OUTPUT); 
    27e0:	61 e0       	ldi	r22, 0x01	; 1
    27e2:	8d e0       	ldi	r24, 0x0D	; 13
    27e4:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1652
              digitalWrite(USER, tempByte);       // Restore USER led status
    27e8:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <tempByte>
    27ec:	8d e0       	ldi	r24, 0x0D	; 13
    27ee:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1975
                ioData = Wire.read();
                ioData = (ioData & 0b11111000) | 0b00000001;      // Set D0 = 1, D1 = D2 = 0
              }
            break;
          }
          if ((ioOpcode != 0x84) && (ioOpcode != 0x86)) ioOpcode = 0xFF;  // All done for the single byte Opcodes. 
    27f2:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <ioOpcode>
    27f6:	8d 7f       	andi	r24, 0xFD	; 253
    27f8:	84 38       	cpi	r24, 0x84	; 132
    27fa:	09 f4       	brne	.+2      	; 0x27fe <loop+0x672>
    27fc:	6d cf       	rjmp	.-294    	; 0x26d8 <loop+0x54c>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1975 (discriminator 2)
    27fe:	8f ef       	ldi	r24, 0xFF	; 255
    2800:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <ioOpcode>
    2804:	69 cf       	rjmp	.-302    	; 0x26d8 <loop+0x54c>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1664
              //                            ---------------------------------------------------------
              //                             D7 D6 D5 D4 D3 D2 D1 D0    GPIOA value (see MCP23017 datasheet)
              //
              // NOTE: a value 0x00 is forced if the GPE Option is not present
              
              if (moduleGPIO) 
    2806:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <moduleGPIO>
    280a:	88 23       	and	r24, r24
    280c:	91 f3       	breq	.-28     	; 0x27f2 <loop+0x666>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1667
              {
                // Set MCP23017 pointer to GPIOA
                Wire.beginTransmission(GPIOEXP_ADDR);
    280e:	60 e2       	ldi	r22, 0x20	; 32
    2810:	70 e0       	ldi	r23, 0x00	; 0
    2812:	86 ee       	ldi	r24, 0xE6	; 230
    2814:	91 e0       	ldi	r25, 0x01	; 1
    2816:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1668
                Wire.write(GPIOA_REG);
    281a:	62 e1       	ldi	r22, 0x12	; 18
    281c:	70 e0       	ldi	r23, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1690
              
              if (moduleGPIO) 
              {
                // Set MCP23017 pointer to GPIOB
                Wire.beginTransmission(GPIOEXP_ADDR);
                Wire.write(GPIOB_REG);
    281e:	86 ee       	ldi	r24, 0xE6	; 230
    2820:	91 e0       	ldi	r25, 0x01	; 1
    2822:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1691
                Wire.endTransmission();
    2826:	86 ee       	ldi	r24, 0xE6	; 230
    2828:	91 e0       	ldi	r25, 0x01	; 1
    282a:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <TwoWire::endTransmission()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1693
                // Read GPIOB
                Wire.beginTransmission(GPIOEXP_ADDR);
    282e:	60 e2       	ldi	r22, 0x20	; 32
    2830:	70 e0       	ldi	r23, 0x00	; 0
    2832:	86 ee       	ldi	r24, 0xE6	; 230
    2834:	91 e0       	ldi	r25, 0x01	; 1
    2836:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1694
                Wire.requestFrom(GPIOEXP_ADDR, 1);
    283a:	41 e0       	ldi	r20, 0x01	; 1
    283c:	50 e0       	ldi	r21, 0x00	; 0
    283e:	60 e2       	ldi	r22, 0x20	; 32
    2840:	70 e0       	ldi	r23, 0x00	; 0
    2842:	86 ee       	ldi	r24, 0xE6	; 230
    2844:	91 e0       	ldi	r25, 0x01	; 1
    2846:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <TwoWire::requestFrom(int, int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1695
                ioData = Wire.read();
    284a:	86 ee       	ldi	r24, 0xE6	; 230
    284c:	91 e0       	ldi	r25, 0x01	; 1
    284e:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <TwoWire::read()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1971
                
                // Read GPIOA (SPP Status Lines)
                Wire.beginTransmission(GPIOEXP_ADDR);
                Wire.requestFrom(GPIOEXP_ADDR, 1);
                ioData = Wire.read();
                ioData = (ioData & 0b11111000) | 0b00000001;      // Set D0 = 1, D1 = D2 = 0
    2852:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <ioData>
    2856:	cd cf       	rjmp	.-102    	; 0x27f2 <loop+0x666>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1686
              //                            ---------------------------------------------------------
              //                             D7 D6 D5 D4 D3 D2 D1 D0    GPIOB value (see MCP23017 datasheet)
              //
              // NOTE: a value 0x00 is forced if the GPE Option is not present
              
              if (moduleGPIO) 
    2858:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <moduleGPIO>
    285c:	88 23       	and	r24, r24
    285e:	49 f2       	breq	.-110    	; 0x27f2 <loop+0x666>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1689
              {
                // Set MCP23017 pointer to GPIOB
                Wire.beginTransmission(GPIOEXP_ADDR);
    2860:	60 e2       	ldi	r22, 0x20	; 32
    2862:	70 e0       	ldi	r23, 0x00	; 0
    2864:	86 ee       	ldi	r24, 0xE6	; 230
    2866:	91 e0       	ldi	r25, 0x01	; 1
    2868:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1690
                Wire.write(GPIOB_REG);
    286c:	63 e1       	ldi	r22, 0x13	; 19
    286e:	70 e0       	ldi	r23, 0x00	; 0
    2870:	d6 cf       	rjmp	.-84     	; 0x281e <loop+0x692>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1717
              //                              X  X  X  1  X  X  X  X    CP/M warm boot message enabled              
              //
              // NOTE 1: Currently only D0-D4 are used
              // NOTE 2: The D4 flag is set/reset using the D0 bit of the SETOPT Opcode (see SETOPT for more info)
  
              ioData = autoexecFlag | (foundRTC << 1) | ((Serial.available() > 0) << 2) | ((LastRxIsEmpty > 0) << 3) 
    2872:	c0 91 b9 01 	lds	r28, 0x01B9	; 0x8001b9 <foundRTC>
    2876:	d0 e0       	ldi	r29, 0x00	; 0
    2878:	cc 0f       	add	r28, r28
    287a:	dd 1f       	adc	r29, r29
    287c:	f0 90 65 01 	lds	r15, 0x0165	; 0x800165 <autoexecFlag>
    2880:	8c e8       	ldi	r24, 0x8C	; 140
    2882:	92 e0       	ldi	r25, 0x02	; 2
    2884:	0e 94 98 21 	call	0x4330	; 0x4330 <HardwareSerial::available()>
    2888:	34 e0       	ldi	r19, 0x04	; 4
    288a:	18 16       	cp	r1, r24
    288c:	19 06       	cpc	r1, r25
    288e:	0c f0       	brlt	.+2      	; 0x2892 <loop+0x706>
    2890:	30 e0       	ldi	r19, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1717 (discriminator 4)
    2892:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <LastRxIsEmpty>
    2896:	28 e0       	ldi	r18, 0x08	; 8
    2898:	81 11       	cpse	r24, r1
    289a:	01 c0       	rjmp	.+2      	; 0x289e <loop+0x712>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1717
    289c:	20 e0       	ldi	r18, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1718 (discriminator 8)
                       | (cpmWarmBootFlg << 4);
    289e:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <cpmWarmBootFlg>
    28a2:	40 e1       	ldi	r20, 0x10	; 16
    28a4:	84 9f       	mul	r24, r20
    28a6:	c0 01       	movw	r24, r0
    28a8:	11 24       	eor	r1, r1
    28aa:	c8 2b       	or	r28, r24
    28ac:	cf 29       	or	r28, r15
    28ae:	c3 2b       	or	r28, r19
    28b0:	c2 2b       	or	r28, r18
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1717 (discriminator 8)
              //                              X  X  X  1  X  X  X  X    CP/M warm boot message enabled              
              //
              // NOTE 1: Currently only D0-D4 are used
              // NOTE 2: The D4 flag is set/reset using the D0 bit of the SETOPT Opcode (see SETOPT for more info)
  
              ioData = autoexecFlag | (foundRTC << 1) | ((Serial.available() > 0) << 2) | ((LastRxIsEmpty > 0) << 3) 
    28b2:	c0 93 d3 01 	sts	0x01D3, r28	; 0x8001d3 <ioData>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1719 (discriminator 8)
                       | (cpmWarmBootFlg << 4);
            break;
    28b6:	9d cf       	rjmp	.-198    	; 0x27f2 <loop+0x666>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1737
              //
              // NOTE 1: If RTC is not found all read values wil be = 0
              // NOTE 2: Overread data (more then 7 bytes read) will be = 0
              // NOTE 3: The temperature (Celsius) is a byte with two complement binary format [-128..127]
  
              if (foundRTC)
    28b8:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <foundRTC>
    28bc:	88 23       	and	r24, r24
    28be:	09 f4       	brne	.+2      	; 0x28c2 <loop+0x736>
    28c0:	4b c0       	rjmp	.+150    	; 0x2958 <loop+0x7cc>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1739
              {
                 if (ioByteCnt == 0) readRTC(&seconds, &minutes, &hours, &day, &month, &year, &tempC); // Read from RTC
    28c2:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <ioByteCnt>
    28c6:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <ioByteCnt+0x1>
    28ca:	89 2b       	or	r24, r25
    28cc:	a1 f4       	brne	.+40     	; 0x28f6 <loop+0x76a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1739 (discriminator 1)
    28ce:	42 eb       	ldi	r20, 0xB2	; 178
    28d0:	c4 2e       	mov	r12, r20
    28d2:	41 e0       	ldi	r20, 0x01	; 1
    28d4:	d4 2e       	mov	r13, r20
    28d6:	53 eb       	ldi	r21, 0xB3	; 179
    28d8:	e5 2e       	mov	r14, r21
    28da:	51 e0       	ldi	r21, 0x01	; 1
    28dc:	f5 2e       	mov	r15, r21
    28de:	04 eb       	ldi	r16, 0xB4	; 180
    28e0:	11 e0       	ldi	r17, 0x01	; 1
    28e2:	25 eb       	ldi	r18, 0xB5	; 181
    28e4:	31 e0       	ldi	r19, 0x01	; 1
    28e6:	46 eb       	ldi	r20, 0xB6	; 182
    28e8:	51 e0       	ldi	r21, 0x01	; 1
    28ea:	67 eb       	ldi	r22, 0xB7	; 183
    28ec:	71 e0       	ldi	r23, 0x01	; 1
    28ee:	88 eb       	ldi	r24, 0xB8	; 184
    28f0:	91 e0       	ldi	r25, 0x01	; 1
    28f2:	0e 94 83 07 	call	0xf06	; 0xf06 <readRTC(unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1740
                 if (ioByteCnt < 7)
    28f6:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <ioByteCnt>
    28fa:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <ioByteCnt+0x1>
    28fe:	87 30       	cpi	r24, 0x07	; 7
    2900:	91 05       	cpc	r25, r1
    2902:	50 f5       	brcc	.+84     	; 0x2958 <loop+0x7cc>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1748
                    switch (ioByteCnt)
                    {
                      case 0: ioData = seconds; break;
                      case 1: ioData = minutes; break;
                      case 2: ioData = hours; break;
                      case 3: ioData = day; break;
    2904:	20 91 b5 01 	lds	r18, 0x01B5	; 0x8001b5 <day>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1743
              {
                 if (ioByteCnt == 0) readRTC(&seconds, &minutes, &hours, &day, &month, &year, &tempC); // Read from RTC
                 if (ioByteCnt < 7)
                 // Send date/time (binary values) to Z80 bus
                 {
                    switch (ioByteCnt)
    2908:	83 30       	cpi	r24, 0x03	; 3
    290a:	91 05       	cpc	r25, r1
    290c:	e9 f0       	breq	.+58     	; 0x2948 <loop+0x7bc>
    290e:	68 f4       	brcc	.+26     	; 0x292a <loop+0x79e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1746
                    {
                      case 0: ioData = seconds; break;
                      case 1: ioData = minutes; break;
    2910:	20 91 b7 01 	lds	r18, 0x01B7	; 0x8001b7 <minutes>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1743
              {
                 if (ioByteCnt == 0) readRTC(&seconds, &minutes, &hours, &day, &month, &year, &tempC); // Read from RTC
                 if (ioByteCnt < 7)
                 // Send date/time (binary values) to Z80 bus
                 {
                    switch (ioByteCnt)
    2914:	81 30       	cpi	r24, 0x01	; 1
    2916:	91 05       	cpc	r25, r1
    2918:	b9 f0       	breq	.+46     	; 0x2948 <loop+0x7bc>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1747
                    {
                      case 0: ioData = seconds; break;
                      case 1: ioData = minutes; break;
                      case 2: ioData = hours; break;
    291a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <hours>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1743
              {
                 if (ioByteCnt == 0) readRTC(&seconds, &minutes, &hours, &day, &month, &year, &tempC); // Read from RTC
                 if (ioByteCnt < 7)
                 // Send date/time (binary values) to Z80 bus
                 {
                    switch (ioByteCnt)
    291e:	82 30       	cpi	r24, 0x02	; 2
    2920:	91 05       	cpc	r25, r1
    2922:	91 f0       	breq	.+36     	; 0x2948 <loop+0x7bc>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1745
                    {
                      case 0: ioData = seconds; break;
    2924:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <seconds>
    2928:	0f c0       	rjmp	.+30     	; 0x2948 <loop+0x7bc>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1750
                      case 1: ioData = minutes; break;
                      case 2: ioData = hours; break;
                      case 3: ioData = day; break;
                      case 4: ioData = month; break;
                      case 5: ioData = year; break;
    292a:	20 91 b3 01 	lds	r18, 0x01B3	; 0x8001b3 <year>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1743
              {
                 if (ioByteCnt == 0) readRTC(&seconds, &minutes, &hours, &day, &month, &year, &tempC); // Read from RTC
                 if (ioByteCnt < 7)
                 // Send date/time (binary values) to Z80 bus
                 {
                    switch (ioByteCnt)
    292e:	85 30       	cpi	r24, 0x05	; 5
    2930:	91 05       	cpc	r25, r1
    2932:	51 f0       	breq	.+20     	; 0x2948 <loop+0x7bc>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1749
                    {
                      case 0: ioData = seconds; break;
                      case 1: ioData = minutes; break;
                      case 2: ioData = hours; break;
                      case 3: ioData = day; break;
                      case 4: ioData = month; break;
    2934:	20 91 b4 01 	lds	r18, 0x01B4	; 0x8001b4 <month>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1743
              {
                 if (ioByteCnt == 0) readRTC(&seconds, &minutes, &hours, &day, &month, &year, &tempC); // Read from RTC
                 if (ioByteCnt < 7)
                 // Send date/time (binary values) to Z80 bus
                 {
                    switch (ioByteCnt)
    2938:	85 30       	cpi	r24, 0x05	; 5
    293a:	91 05       	cpc	r25, r1
    293c:	28 f0       	brcs	.+10     	; 0x2948 <loop+0x7bc>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1751
                      case 1: ioData = minutes; break;
                      case 2: ioData = hours; break;
                      case 3: ioData = day; break;
                      case 4: ioData = month; break;
                      case 5: ioData = year; break;
                      case 6: ioData = tempC; break;
    293e:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <tempC>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1743
              {
                 if (ioByteCnt == 0) readRTC(&seconds, &minutes, &hours, &day, &month, &year, &tempC); // Read from RTC
                 if (ioByteCnt < 7)
                 // Send date/time (binary values) to Z80 bus
                 {
                    switch (ioByteCnt)
    2942:	86 30       	cpi	r24, 0x06	; 6
    2944:	91 05       	cpc	r25, r1
    2946:	71 f7       	brne	.-36     	; 0x2924 <loop+0x798>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1751
                      case 1: ioData = minutes; break;
                      case 2: ioData = hours; break;
                      case 3: ioData = day; break;
                      case 4: ioData = month; break;
                      case 5: ioData = year; break;
                      case 6: ioData = tempC; break;
    2948:	20 93 d3 01 	sts	0x01D3, r18	; 0x8001d3 <ioData>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1855
              }
              if (ioByteCnt >= 511) 
              {
                ioOpcode = 0xFF;                  // All done. Set ioOpcode = "No operation"
              }
              ioByteCnt++;                        // Increment the counter of the exchanged data bytes
    294c:	01 96       	adiw	r24, 0x01	; 1
    294e:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <ioByteCnt+0x1>
    2952:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <ioByteCnt>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1856
            break;
    2956:	4d cf       	rjmp	.-358    	; 0x27f2 <loop+0x666>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1755
                      case 5: ioData = year; break;
                      case 6: ioData = tempC; break;
                    }
                    ioByteCnt++;
                 }
                 else ioOpcode = 0xFF;            // All done. Set ioOpcode = "No operation"
    2958:	8f ef       	ldi	r24, 0xFF	; 255
    295a:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <ioOpcode>
    295e:	49 cf       	rjmp	.-366    	; 0x27f2 <loop+0x666>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1797
              //         operation
              // NOTE 2: Error codes from 0 to 6 come from the PetitFS library implementation
              // NOTE 3: ERRDISK must not be used to read the resulting error code after a SDMOUNT operation 
              //         (see the SDMOUNT Opcode)
               
              ioData = diskErr;
    2960:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <diskErr>
    2964:	76 cf       	rjmp	.-276    	; 0x2852 <loop+0x6c6>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1828
              // Errors are stored into "diskErr" (see ERRDISK Opcode).
              //
              // NOTE 1: Before a READSECT operation at least a SELTRACK or a SELSECT must be always performed
              // NOTE 2: Remember to open the right "disk file" at first using the SELDISK Opcode
  
              if (!ioByteCnt)
    2966:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <ioByteCnt>
    296a:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <ioByteCnt+0x1>
    296e:	89 2b       	or	r24, r25
    2970:	d1 f4       	brne	.+52     	; 0x29a6 <loop+0x81a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1831
              // First byte of 512, so set the right file pointer to the current emulated track/sector first
              {
                if ((trackSel < 512) && (sectSel < 32) && (!diskErr))
    2972:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <trackSel>
    2976:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <trackSel+0x1>
    297a:	81 15       	cp	r24, r1
    297c:	52 e0       	ldi	r21, 0x02	; 2
    297e:	95 07       	cpc	r25, r21
    2980:	90 f4       	brcc	.+36     	; 0x29a6 <loop+0x81a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1831 (discriminator 1)
    2982:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <sectSel>
    2986:	20 32       	cpi	r18, 0x20	; 32
    2988:	70 f4       	brcc	.+28     	; 0x29a6 <loop+0x81a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1831 (discriminator 2)
    298a:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <diskErr>
    298e:	31 11       	cpse	r19, r1
    2990:	0a c0       	rjmp	.+20     	; 0x29a6 <loop+0x81a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1834
                // Sector and track numbers valid and no previous error; set the LBA-like logical sector
                {
                diskErr = seekSD((trackSel << 5) | sectSel);  // Set the starting point inside the "disk file"
    2992:	35 e0       	ldi	r19, 0x05	; 5
    2994:	88 0f       	add	r24, r24
    2996:	99 1f       	adc	r25, r25
    2998:	3a 95       	dec	r19
    299a:	e1 f7       	brne	.-8      	; 0x2994 <loop+0x808>
    299c:	82 2b       	or	r24, r18
    299e:	0e 94 6d 05 	call	0xada	; 0xada <seekSD(unsigned int)>
    29a2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <diskErr>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1839
                                                              //  generating a 14 bit "disk file" LBA-like 
                                                              //  logical sector address created as TTTTTTTTTSSSSS
                }
              }
              if (!diskErr)
    29a6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <diskErr>
    29aa:	81 11       	cpse	r24, r1
    29ac:	22 c0       	rjmp	.+68     	; 0x29f2 <loop+0x866>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1842
              // No previous error (e.g. selecting disk, track or sector)
              {
                tempByte = ioByteCnt % 32;        // [0..31]
    29ae:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <ioByteCnt>
    29b2:	8f 71       	andi	r24, 0x1F	; 31
    29b4:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <tempByte>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1843
                if (!tempByte)
    29b8:	81 11       	cpse	r24, r1
    29ba:	13 c0       	rjmp	.+38     	; 0x29e2 <loop+0x856>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1846
                // Read 32 bytes of the current sector on SD in the buffer (every 32 calls, starting with the first)
                {
                  diskErr = readSD(bufferSD, &numReadBytes); 
    29bc:	63 e6       	ldi	r22, 0x63	; 99
    29be:	71 e0       	ldi	r23, 0x01	; 1
    29c0:	88 e6       	ldi	r24, 0x68	; 104
    29c2:	91 e0       	ldi	r25, 0x01	; 1
    29c4:	0e 94 35 05 	call	0xa6a	; 0xa6a <readSD(void*, unsigned char*)>
    29c8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <diskErr>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1847
                  if (numReadBytes < 32) diskErr = 19;    // Reached an unexpected EOF
    29cc:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <numReadBytes>
    29d0:	80 32       	cpi	r24, 0x20	; 32
    29d2:	18 f4       	brcc	.+6      	; 0x29da <loop+0x84e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1847 (discriminator 1)
    29d4:	83 e1       	ldi	r24, 0x13	; 19
    29d6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <diskErr>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1849
                }
                if (!diskErr) ioData = bufferSD[tempByte];// If no errors, exchange current data byte with the CPU
    29da:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <diskErr>
    29de:	81 11       	cpse	r24, r1
    29e0:	08 c0       	rjmp	.+16     	; 0x29f2 <loop+0x866>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1849 (discriminator 1)
    29e2:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <tempByte>
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	e8 59       	subi	r30, 0x98	; 152
    29ea:	fe 4f       	sbci	r31, 0xFE	; 254
    29ec:	80 81       	ld	r24, Z
    29ee:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <ioData>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1851
              }
              if (ioByteCnt >= 511) 
    29f2:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <ioByteCnt>
    29f6:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <ioByteCnt+0x1>
    29fa:	8f 3f       	cpi	r24, 0xFF	; 255
    29fc:	21 e0       	ldi	r18, 0x01	; 1
    29fe:	92 07       	cpc	r25, r18
    2a00:	08 f4       	brcc	.+2      	; 0x2a04 <loop+0x878>
    2a02:	a4 cf       	rjmp	.-184    	; 0x294c <loop+0x7c0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1853
              {
                ioOpcode = 0xFF;                  // All done. Set ioOpcode = "No operation"
    2a04:	2f ef       	ldi	r18, 0xFF	; 255
    2a06:	20 93 7f 00 	sts	0x007F, r18	; 0x80007f <ioOpcode>
    2a0a:	a0 cf       	rjmp	.-192    	; 0x294c <loop+0x7c0>
_Z7mountSDP5FATFS():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:2600
byte mountSD(FATFS* fatFs)
// Mount a volume on SD: 
// *  "fatFs" is a pointer to a FATFS object (PetitFS library)
// The returned value is the resulting status (0 = ok, otherwise see printErrSD())
{
  return pf_mount(fatFs);
    2a0c:	88 e8       	ldi	r24, 0x88	; 136
    2a0e:	91 e0       	ldi	r25, 0x01	; 1
    2a10:	0e 94 92 18 	call	0x3124	; 0x3124 <pf_mount>
    2a14:	1e cf       	rjmp	.-452    	; 0x2852 <loop+0x6c6>
loop():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1887
              //                             D7 D6 D5 D4 D3 D2 D1 D0    free space in bytes (binary)
              //
              // NOTE: This Opcode is intended to avoid delays in serial Tx operations, as the IOS holds the Z80
              //       in a wait status if the TX buffer is full. This is no good in multitasking enviroments.
              
              ioData = Serial.availableForWrite() ;
    2a16:	8c e8       	ldi	r24, 0x8C	; 140
    2a18:	92 e0       	ldi	r25, 0x02	; 2
    2a1a:	0e 94 c6 21 	call	0x438c	; 0x438c <HardwareSerial::availableForWrite()>
    2a1e:	19 cf       	rjmp	.-462    	; 0x2852 <loop+0x6c6>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1918
              // NOTE 1: Only D0 and D1 "interrupt status bit" are currently used.
              // NOTE 2: After the SYSIRQ call all the "interrupt status bits" are cleared.
              // NOTE 3: If more than one IRQ trigger is enabled, you have to call SYSIRQ always from inside the 
              //         ISR (on the Z80 side) to know the triggered IRQs.
              
              ioData = irqStatus;
    2a20:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <irqStatus>
    2a24:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <ioData>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1919
              irqStatus = 0;                      // Reset all the "interrupt status bits"
    2a28:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <irqStatus>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1933
                Serial.println(ioData);
              }
              // DEBUG END ------------------------------
              //
        
            break;
    2a2c:	e2 ce       	rjmp	.-572    	; 0x27f2 <loop+0x666>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1960
              // If the SPP mode is enabled read the SPP Status Lines.
              // If the SPP mode is disabled (or the GPE is not installed) a byte of all 0s will be retrivied.
              //
              // NOTE: to use GETSPP the SETSPP Opcode should be called first to activate the SPP mode of the GPIO port.
             
              if (SPPmode)
    2a2e:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <SPPmode>
    2a32:	88 23       	and	r24, r24
    2a34:	09 f4       	brne	.+2      	; 0x2a38 <loop+0x8ac>
    2a36:	dd ce       	rjmp	.-582    	; 0x27f2 <loop+0x666>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1963
              {
                // Set MCP23017 pointer to GPIOA
                Wire.beginTransmission(GPIOEXP_ADDR);
    2a38:	60 e2       	ldi	r22, 0x20	; 32
    2a3a:	70 e0       	ldi	r23, 0x00	; 0
    2a3c:	86 ee       	ldi	r24, 0xE6	; 230
    2a3e:	91 e0       	ldi	r25, 0x01	; 1
    2a40:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1964
                Wire.write(GPIOA_REG);
    2a44:	62 e1       	ldi	r22, 0x12	; 18
    2a46:	70 e0       	ldi	r23, 0x00	; 0
    2a48:	86 ee       	ldi	r24, 0xE6	; 230
    2a4a:	91 e0       	ldi	r25, 0x01	; 1
    2a4c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <TwoWire::write(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1965
                Wire.endTransmission();
    2a50:	86 ee       	ldi	r24, 0xE6	; 230
    2a52:	91 e0       	ldi	r25, 0x01	; 1
    2a54:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <TwoWire::endTransmission()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1968
                
                // Read GPIOA (SPP Status Lines)
                Wire.beginTransmission(GPIOEXP_ADDR);
    2a58:	60 e2       	ldi	r22, 0x20	; 32
    2a5a:	70 e0       	ldi	r23, 0x00	; 0
    2a5c:	86 ee       	ldi	r24, 0xE6	; 230
    2a5e:	91 e0       	ldi	r25, 0x01	; 1
    2a60:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <TwoWire::beginTransmission(int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1969
                Wire.requestFrom(GPIOEXP_ADDR, 1);
    2a64:	41 e0       	ldi	r20, 0x01	; 1
    2a66:	50 e0       	ldi	r21, 0x00	; 0
    2a68:	60 e2       	ldi	r22, 0x20	; 32
    2a6a:	70 e0       	ldi	r23, 0x00	; 0
    2a6c:	86 ee       	ldi	r24, 0xE6	; 230
    2a6e:	91 e0       	ldi	r25, 0x01	; 1
    2a70:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <TwoWire::requestFrom(int, int)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1970
                ioData = Wire.read();
    2a74:	86 ee       	ldi	r24, 0xE6	; 230
    2a76:	91 e0       	ldi	r25, 0x01	; 1
    2a78:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <TwoWire::read()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1971
                ioData = (ioData & 0b11111000) | 0b00000001;      // Set D0 = 1, D1 = D2 = 0
    2a7c:	88 7f       	andi	r24, 0xF8	; 248
    2a7e:	81 60       	ori	r24, 0x01	; 1
    2a80:	e8 ce       	rjmp	.-560    	; 0x2852 <loop+0x6c6>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/S220718-R290823_IOS-Z80-MBC2.ino:1998
      // ----------------------------------------
      // VIRTUAL INTERRUPT
      // ----------------------------------------

      {
        digitalWrite(INT_, HIGH);                 // Reset the INT_ signal
    2a82:	61 e0       	ldi	r22, 0x01	; 1
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
    2a8a:	a4 cb       	rjmp	.-2232   	; 0x21d4 <loop+0x48>

00002a8c <xmit_spi(unsigned char)>:
_Z8xmit_spih():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pffArduino.h:29
    SPSR = SPI_FCPU_DIV_2 ? 1 << SPI2X : 0;
  }
}
//------------------------------------------------------------------------------
/** Send a byte to the card */
inline void xmit_spi(BYTE d) {SPDR = d; while(!(SPSR & (1 << SPIF)));}
    2a8c:	8f b9       	out	0x0f, r24	; 15
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pffArduino.h:29 (discriminator 1)
    2a8e:	77 9b       	sbis	0x0e, 7	; 14
    2a90:	fe cf       	rjmp	.-4      	; 0x2a8e <xmit_spi(unsigned char)+0x2>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pffArduino.h:29
    2a92:	08 95       	ret

00002a94 <rcv_spi()>:
_Z7rcv_spiv():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pffArduino.h:32
//------------------------------------------------------------------------------
/** Receive a byte from the card */
inline BYTE rcv_spi (void) {xmit_spi(0XFF); return SPDR;}
    2a94:	8f ef       	ldi	r24, 0xFF	; 255
    2a96:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <xmit_spi(unsigned char)>
    2a9a:	8f b1       	in	r24, 0x0f	; 15
    2a9c:	08 95       	ret

00002a9e <send_cmd(unsigned char, unsigned long)>:
_ZL8send_cmdhm():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:66
static
BYTE send_cmd (
	BYTE cmd,		/* 1st byte (Start + Index) */
	DWORD arg		/* Argument (32 bits) */
)
{
    2a9e:	ff 92       	push	r15
    2aa0:	0f 93       	push	r16
    2aa2:	1f 93       	push	r17
    2aa4:	cf 93       	push	r28
    2aa6:	df 93       	push	r29
    2aa8:	c8 2f       	mov	r28, r24
    2aaa:	d4 2f       	mov	r29, r20
    2aac:	15 2f       	mov	r17, r21
    2aae:	06 2f       	mov	r16, r22
    2ab0:	f7 2e       	mov	r15, r23
spi_set_divisor():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pffArduino.h:17
//------------------------------------------------------------------------------
#define	FORWARD(d)	xmit(d)				/* Data forwarding function (console out) */
static void xmit(char d) {}  // Dummy write console
//------------------------------------------------------------------------------
static void spi_set_divisor(BYTE cardType) {
  if (!cardType) {
    2ab2:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <CardType>
    2ab6:	81 11       	cpse	r24, r1
    2ab8:	3f c0       	rjmp	.+126    	; 0x2b38 <send_cmd(unsigned char, unsigned long)+0x9a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pffArduino.h:19
    // Set slow speed for initialization.
    SPCR = (1 << SPE) | (1 << MSTR) | 3;
    2aba:	83 e5       	ldi	r24, 0x53	; 83
    2abc:	8d b9       	out	0x0d, r24	; 13
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pffArduino.h:20
    SPSR = 0;
    2abe:	1e b8       	out	0x0e, r1	; 14
_ZL8send_cmdhm():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:70
	BYTE n, res;

  spi_set_divisor(CardType);  // whg
	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    2ac0:	c7 ff       	sbrs	r28, 7
    2ac2:	09 c0       	rjmp	.+18     	; 0x2ad6 <send_cmd(unsigned char, unsigned long)+0x38>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:72
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    2ac4:	40 e0       	ldi	r20, 0x00	; 0
    2ac6:	50 e0       	ldi	r21, 0x00	; 0
    2ac8:	ba 01       	movw	r22, r20
    2aca:	87 e7       	ldi	r24, 0x77	; 119
    2acc:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <send_cmd(unsigned char, unsigned long)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:73
		if (res > 1) return res;
    2ad0:	82 30       	cpi	r24, 0x02	; 2
    2ad2:	60 f5       	brcc	.+88     	; 0x2b2c <send_cmd(unsigned char, unsigned long)+0x8e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:71
{
	BYTE n, res;

  spi_set_divisor(CardType);  // whg
	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    2ad4:	cf 77       	andi	r28, 0x7F	; 127
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:77
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	DESELECT();
    2ad6:	61 e0       	ldi	r22, 0x01	; 1
    2ad8:	84 e0       	ldi	r24, 0x04	; 4
    2ada:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:78
	rcv_spi();
    2ade:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <rcv_spi()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:79
	SELECT();
    2ae2:	60 e0       	ldi	r22, 0x00	; 0
    2ae4:	84 e0       	ldi	r24, 0x04	; 4
    2ae6:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:80
	rcv_spi();
    2aea:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <rcv_spi()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:83

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
    2aee:	8c 2f       	mov	r24, r28
    2af0:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <xmit_spi(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:84
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    2af4:	8f 2d       	mov	r24, r15
    2af6:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <xmit_spi(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:85
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    2afa:	80 2f       	mov	r24, r16
    2afc:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <xmit_spi(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:86
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    2b00:	81 2f       	mov	r24, r17
    2b02:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <xmit_spi(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:87
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    2b06:	8d 2f       	mov	r24, r29
    2b08:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <xmit_spi(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:89
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    2b0c:	85 e9       	ldi	r24, 0x95	; 149
    2b0e:	c0 34       	cpi	r28, 0x40	; 64
    2b10:	21 f0       	breq	.+8      	; 0x2b1a <send_cmd(unsigned char, unsigned long)+0x7c>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:90
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    2b12:	87 e8       	ldi	r24, 0x87	; 135
    2b14:	c8 34       	cpi	r28, 0x48	; 72
    2b16:	09 f0       	breq	.+2      	; 0x2b1a <send_cmd(unsigned char, unsigned long)+0x7c>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:88
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    2b18:	81 e0       	ldi	r24, 0x01	; 1
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:91
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	xmit_spi(n);
    2b1a:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <xmit_spi(unsigned char)>
    2b1e:	ca e0       	ldi	r28, 0x0A	; 10
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:96

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
    2b20:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <rcv_spi()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:97
	} while ((res & 0x80) && --n);
    2b24:	87 ff       	sbrs	r24, 7
    2b26:	02 c0       	rjmp	.+4      	; 0x2b2c <send_cmd(unsigned char, unsigned long)+0x8e>
    2b28:	c1 50       	subi	r28, 0x01	; 1
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:97 (discriminator 1)
    2b2a:	d1 f7       	brne	.-12     	; 0x2b20 <send_cmd(unsigned char, unsigned long)+0x82>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:100

	return res;			/* Return with the response value */
}
    2b2c:	df 91       	pop	r29
    2b2e:	cf 91       	pop	r28
    2b30:	1f 91       	pop	r17
    2b32:	0f 91       	pop	r16
    2b34:	ff 90       	pop	r15
    2b36:	08 95       	ret
spi_set_divisor():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pffArduino.h:23
  }  else {
    // Set high speed.
    SPCR = (1 << SPE) | (1 << MSTR);
    2b38:	80 e5       	ldi	r24, 0x50	; 80
    2b3a:	8d b9       	out	0x0d, r24	; 13
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pffArduino.h:24
    SPSR = SPI_FCPU_DIV_2 ? 1 << SPI2X : 0;
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	8e b9       	out	0x0e, r24	; 14
    2b40:	bf cf       	rjmp	.-130    	; 0x2ac0 <send_cmd(unsigned char, unsigned long)+0x22>

00002b42 <disk_writep.part.1>:
disk_writep.part.1():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:222
/*-----------------------------------------------------------------------*/
/* Write partial sector                                                  */
/*-----------------------------------------------------------------------*/

#if _USE_WRITE
DRESULT disk_writep (
    2b42:	0f 93       	push	r16
    2b44:	1f 93       	push	r17
    2b46:	cf 93       	push	r28
    2b48:	df 93       	push	r29
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:249
				xmit_spi(0xFF); xmit_spi(0xFE);		/* Data block header */
				wc = 512;							/* Set byte counter */
				res = RES_OK;
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
    2b4a:	c0 91 e1 01 	lds	r28, 0x01E1	; 0x8001e1 <disk_writep::wc>
    2b4e:	d0 91 e2 01 	lds	r29, 0x01E2	; 0x8001e2 <disk_writep::wc+0x1>
    2b52:	21 97       	sbiw	r28, 0x01	; 1
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:250
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
    2b54:	cd 3f       	cpi	r28, 0xFD	; 253
    2b56:	8f ef       	ldi	r24, 0xFF	; 255
    2b58:	d8 07       	cpc	r29, r24
    2b5a:	21 f0       	breq	.+8      	; 0x2b64 <disk_writep.part.1+0x22>
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <xmit_spi(unsigned char)>
    2b62:	f7 cf       	rjmp	.-18     	; 0x2b52 <disk_writep.part.1+0x10>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:251
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 500ms */
    2b64:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <rcv_spi()>
    2b68:	8f 71       	andi	r24, 0x1F	; 31
    2b6a:	85 30       	cpi	r24, 0x05	; 5
    2b6c:	79 f0       	breq	.+30     	; 0x2b8c <disk_writep.part.1+0x4a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:231
{
	DRESULT res;
	UINT bc;
	static UINT wc;	/* Sector write counter */

	res = RES_ERROR;
    2b6e:	d1 e0       	ldi	r29, 0x01	; 1
    2b70:	c0 e0       	ldi	r28, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:256
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 500ms */
				for (bc = 5000; rcv_spi() != 0xFF && bc; bc--)	/* Wait for ready */
					dly_100us();
				if (bc) res = RES_OK;
			}
			DESELECT();
    2b72:	61 e0       	ldi	r22, 0x01	; 1
    2b74:	84 e0       	ldi	r24, 0x04	; 4
    2b76:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:257
			rcv_spi();
    2b7a:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <rcv_spi()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:262
		}
	}

	return res;
}
    2b7e:	8d 2f       	mov	r24, r29
    2b80:	9c 2f       	mov	r25, r28
    2b82:	df 91       	pop	r29
    2b84:	cf 91       	pop	r28
    2b86:	1f 91       	pop	r17
    2b88:	0f 91       	pop	r16
    2b8a:	08 95       	ret
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:252
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 500ms */
				for (bc = 5000; rcv_spi() != 0xFF && bc; bc--)	/* Wait for ready */
    2b8c:	08 e8       	ldi	r16, 0x88	; 136
    2b8e:	13 e1       	ldi	r17, 0x13	; 19
_delay_loop_2():
/home/horo/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:110
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    2b90:	c0 e9       	ldi	r28, 0x90	; 144
    2b92:	d1 e0       	ldi	r29, 0x01	; 1
disk_writep.part.1():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:252
    2b94:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <rcv_spi()>
    2b98:	8f 3f       	cpi	r24, 0xFF	; 255
    2b9a:	49 f0       	breq	.+18     	; 0x2bae <disk_writep.part.1+0x6c>
    2b9c:	01 15       	cp	r16, r1
    2b9e:	11 05       	cpc	r17, r1
    2ba0:	31 f3       	breq	.-52     	; 0x2b6e <disk_writep.part.1+0x2c>
_delay_loop_2():
/home/horo/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:110
    2ba2:	ce 01       	movw	r24, r28
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	f1 f7       	brne	.-4      	; 0x2ba4 <disk_writep.part.1+0x62>
disk_writep.part.1():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:252
    2ba8:	01 50       	subi	r16, 0x01	; 1
    2baa:	11 09       	sbc	r17, r1
    2bac:	f3 cf       	rjmp	.-26     	; 0x2b94 <disk_writep.part.1+0x52>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:254
					dly_100us();
				if (bc) res = RES_OK;
    2bae:	d1 e0       	ldi	r29, 0x01	; 1
    2bb0:	c0 e0       	ldi	r28, 0x00	; 0
    2bb2:	01 2b       	or	r16, r17
    2bb4:	f1 f2       	breq	.-68     	; 0x2b72 <disk_writep.part.1+0x30>
    2bb6:	d0 e0       	ldi	r29, 0x00	; 0
    2bb8:	dc cf       	rjmp	.-72     	; 0x2b72 <disk_writep.part.1+0x30>

00002bba <disk_initialize>:
disk_initialize():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:116
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
    2bba:	af 92       	push	r10
    2bbc:	bf 92       	push	r11
    2bbe:	cf 92       	push	r12
    2bc0:	df 92       	push	r13
    2bc2:	ef 92       	push	r14
    2bc4:	ff 92       	push	r15
    2bc6:	0f 93       	push	r16
    2bc8:	1f 93       	push	r17
    2bca:	cf 93       	push	r28
    2bcc:	df 93       	push	r29
    2bce:	00 d0       	rcall	.+0      	; 0x2bd0 <disk_initialize+0x16>
    2bd0:	00 d0       	rcall	.+0      	; 0x2bd2 <disk_initialize+0x18>
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:121
	BYTE n, cmd, ty, ocr[4];
	UINT tmr;

#if _USE_WRITE
	if (CardType && SELECTING) disk_writep(0, 0);	/* Finalize write process if it is in progress */
    2bd6:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <CardType>
    2bda:	88 23       	and	r24, r24
    2bdc:	39 f0       	breq	.+14     	; 0x2bec <disk_initialize+0x32>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:121 (discriminator 1)
    2bde:	84 e0       	ldi	r24, 0x04	; 4
    2be0:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <digitalRead>
    2be4:	89 2b       	or	r24, r25
    2be6:	11 f4       	brne	.+4      	; 0x2bec <disk_initialize+0x32>
disk_writep():
    2be8:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <disk_writep.part.1>
init_spi():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pffArduino.h:76
#define SELECT() digitalWrite(SD_CS_PIN, LOW)
#define DESELECT() digitalWrite(SD_CS_PIN, HIGH)
#define SELECTING !digitalRead(SD_CS_PIN)

static void init_spi (void) {
  digitalWrite(SS, HIGH);
    2bec:	61 e0       	ldi	r22, 0x01	; 1
    2bee:	84 e0       	ldi	r24, 0x04	; 4
    2bf0:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pffArduino.h:77
  pinMode(SS, OUTPUT);
    2bf4:	61 e0       	ldi	r22, 0x01	; 1
    2bf6:	84 e0       	ldi	r24, 0x04	; 4
    2bf8:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pffArduino.h:78
  pinMode(MOSI, OUTPUT);
    2bfc:	61 e0       	ldi	r22, 0x01	; 1
    2bfe:	85 e0       	ldi	r24, 0x05	; 5
    2c00:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pffArduino.h:79
  pinMode(SCK, OUTPUT);
    2c04:	61 e0       	ldi	r22, 0x01	; 1
    2c06:	87 e0       	ldi	r24, 0x07	; 7
    2c08:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pffArduino.h:80
  pinMode(SD_CS_PIN, OUTPUT);
    2c0c:	61 e0       	ldi	r22, 0x01	; 1
    2c0e:	84 e0       	ldi	r24, 0x04	; 4
    2c10:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <pinMode>
spi_set_divisor():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pffArduino.h:19
static void xmit(char d) {}  // Dummy write console
//------------------------------------------------------------------------------
static void spi_set_divisor(BYTE cardType) {
  if (!cardType) {
    // Set slow speed for initialization.
    SPCR = (1 << SPE) | (1 << MSTR) | 3;
    2c14:	83 e5       	ldi	r24, 0x53	; 83
    2c16:	8d b9       	out	0x0d, r24	; 13
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pffArduino.h:20
    SPSR = 0;
    2c18:	1e b8       	out	0x0e, r1	; 14
disk_initialize():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:124
#endif
	init_spi();		/* Initialize ports to control MMC */
	DESELECT();
    2c1a:	61 e0       	ldi	r22, 0x01	; 1
    2c1c:	84 e0       	ldi	r24, 0x04	; 4
    2c1e:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
    2c22:	1a e0       	ldi	r17, 0x0A	; 10
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:125 (discriminator 2)
	for (n = 10; n; n--) rcv_spi();	/* 80 dummy clocks with CS=H */
    2c24:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <rcv_spi()>
    2c28:	11 50       	subi	r17, 0x01	; 1
    2c2a:	e1 f7       	brne	.-8      	; 0x2c24 <disk_initialize+0x6a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:128

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* GO_IDLE_STATE */
    2c2c:	40 e0       	ldi	r20, 0x00	; 0
    2c2e:	50 e0       	ldi	r21, 0x00	; 0
    2c30:	ba 01       	movw	r22, r20
    2c32:	80 e4       	ldi	r24, 0x40	; 64
    2c34:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <send_cmd(unsigned char, unsigned long)>
    2c38:	18 2f       	mov	r17, r24
    2c3a:	81 30       	cpi	r24, 0x01	; 1
    2c3c:	d9 f0       	breq	.+54     	; 0x2c74 <disk_initialize+0xba>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:127
#endif
	init_spi();		/* Initialize ports to control MMC */
	DESELECT();
	for (n = 10; n; n--) rcv_spi();	/* 80 dummy clocks with CS=H */

	ty = 0;
    2c3e:	10 e0       	ldi	r17, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:149
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    2c40:	10 93 e3 01 	sts	0x01E3, r17	; 0x8001e3 <CardType>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:150
	DESELECT();
    2c44:	61 e0       	ldi	r22, 0x01	; 1
    2c46:	84 e0       	ldi	r24, 0x04	; 4
    2c48:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:151
	rcv_spi();
    2c4c:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <rcv_spi()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:153

	return ty ? 0 : STA_NOINIT;
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	11 11       	cpse	r17, r1
    2c54:	80 e0       	ldi	r24, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:154
}
    2c56:	0f 90       	pop	r0
    2c58:	0f 90       	pop	r0
    2c5a:	0f 90       	pop	r0
    2c5c:	0f 90       	pop	r0
    2c5e:	df 91       	pop	r29
    2c60:	cf 91       	pop	r28
    2c62:	1f 91       	pop	r17
    2c64:	0f 91       	pop	r16
    2c66:	ff 90       	pop	r15
    2c68:	ef 90       	pop	r14
    2c6a:	df 90       	pop	r13
    2c6c:	cf 90       	pop	r12
    2c6e:	bf 90       	pop	r11
    2c70:	af 90       	pop	r10
    2c72:	08 95       	ret
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:129
	DESELECT();
	for (n = 10; n; n--) rcv_spi();	/* 80 dummy clocks with CS=H */

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* GO_IDLE_STATE */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
    2c74:	4a ea       	ldi	r20, 0xAA	; 170
    2c76:	51 e0       	ldi	r21, 0x01	; 1
    2c78:	60 e0       	ldi	r22, 0x00	; 0
    2c7a:	70 e0       	ldi	r23, 0x00	; 0
    2c7c:	88 e4       	ldi	r24, 0x48	; 72
    2c7e:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <send_cmd(unsigned char, unsigned long)>
    2c82:	81 30       	cpi	r24, 0x01	; 1
    2c84:	79 f5       	brne	.+94     	; 0x2ce4 <disk_initialize+0x12a>
    2c86:	ce 01       	movw	r24, r28
    2c88:	01 96       	adiw	r24, 0x01	; 1
    2c8a:	7c 01       	movw	r14, r24
    2c8c:	6e 01       	movw	r12, r28
    2c8e:	95 e0       	ldi	r25, 0x05	; 5
    2c90:	c9 0e       	add	r12, r25
    2c92:	d1 1c       	adc	r13, r1
    2c94:	87 01       	movw	r16, r14
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:130 (discriminator 2)
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
    2c96:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <rcv_spi()>
    2c9a:	f8 01       	movw	r30, r16
    2c9c:	81 93       	st	Z+, r24
    2c9e:	8f 01       	movw	r16, r30
    2ca0:	ce 16       	cp	r12, r30
    2ca2:	df 06       	cpc	r13, r31
    2ca4:	c1 f7       	brne	.-16     	; 0x2c96 <disk_initialize+0xdc>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:131
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
    2ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca8:	81 30       	cpi	r24, 0x01	; 1
    2caa:	49 f6       	brne	.-110    	; 0x2c3e <disk_initialize+0x84>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:131 (discriminator 1)
    2cac:	8c 81       	ldd	r24, Y+4	; 0x04
    2cae:	8a 3a       	cpi	r24, 0xAA	; 170
    2cb0:	31 f6       	brne	.-116    	; 0x2c3e <disk_initialize+0x84>
    2cb2:	20 e1       	ldi	r18, 0x10	; 16
    2cb4:	c2 2e       	mov	r12, r18
    2cb6:	27 e2       	ldi	r18, 0x27	; 39
    2cb8:	d2 2e       	mov	r13, r18
_delay_loop_2():
/home/horo/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:110
    2cba:	30 e9       	ldi	r19, 0x90	; 144
    2cbc:	a3 2e       	mov	r10, r19
    2cbe:	bb 24       	eor	r11, r11
    2cc0:	b3 94       	inc	r11
disk_initialize():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:132 (discriminator 2)
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    2cc2:	40 e0       	ldi	r20, 0x00	; 0
    2cc4:	50 e0       	ldi	r21, 0x00	; 0
    2cc6:	60 e0       	ldi	r22, 0x00	; 0
    2cc8:	70 e4       	ldi	r23, 0x40	; 64
    2cca:	89 ee       	ldi	r24, 0xE9	; 233
    2ccc:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <send_cmd(unsigned char, unsigned long)>
    2cd0:	88 23       	and	r24, r24
    2cd2:	59 f1       	breq	.+86     	; 0x2d2a <disk_initialize+0x170>
_delay_loop_2():
/home/horo/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:110
    2cd4:	c5 01       	movw	r24, r10
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	f1 f7       	brne	.-4      	; 0x2cd6 <disk_initialize+0x11c>
    2cda:	f1 e0       	ldi	r31, 0x01	; 1
    2cdc:	cf 1a       	sub	r12, r31
    2cde:	d1 08       	sbc	r13, r1
disk_initialize():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:132
    2ce0:	81 f7       	brne	.-32     	; 0x2cc2 <disk_initialize+0x108>
    2ce2:	ad cf       	rjmp	.-166    	; 0x2c3e <disk_initialize+0x84>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:139
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    2ce4:	40 e0       	ldi	r20, 0x00	; 0
    2ce6:	50 e0       	ldi	r21, 0x00	; 0
    2ce8:	ba 01       	movw	r22, r20
    2cea:	89 ee       	ldi	r24, 0xE9	; 233
    2cec:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <send_cmd(unsigned char, unsigned long)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:142
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    2cf0:	01 e4       	ldi	r16, 0x41	; 65
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:139
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    2cf2:	82 30       	cpi	r24, 0x02	; 2
    2cf4:	10 f4       	brcc	.+4      	; 0x2cfa <disk_initialize+0x140>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:140
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    2cf6:	12 e0       	ldi	r17, 0x02	; 2
    2cf8:	09 ee       	ldi	r16, 0xE9	; 233
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:142
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    2cfa:	80 e1       	ldi	r24, 0x10	; 16
    2cfc:	e8 2e       	mov	r14, r24
    2cfe:	87 e2       	ldi	r24, 0x27	; 39
    2d00:	f8 2e       	mov	r15, r24
_delay_loop_2():
/home/horo/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:110
    2d02:	90 e9       	ldi	r25, 0x90	; 144
    2d04:	c9 2e       	mov	r12, r25
    2d06:	dd 24       	eor	r13, r13
    2d08:	d3 94       	inc	r13
disk_initialize():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:144 (discriminator 2)
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
    2d0a:	40 e0       	ldi	r20, 0x00	; 0
    2d0c:	50 e0       	ldi	r21, 0x00	; 0
    2d0e:	ba 01       	movw	r22, r20
    2d10:	80 2f       	mov	r24, r16
    2d12:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <send_cmd(unsigned char, unsigned long)>
    2d16:	88 23       	and	r24, r24
    2d18:	f1 f0       	breq	.+60     	; 0x2d56 <disk_initialize+0x19c>
_delay_loop_2():
/home/horo/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:110
    2d1a:	c6 01       	movw	r24, r12
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	f1 f7       	brne	.-4      	; 0x2d1c <disk_initialize+0x162>
    2d20:	f1 e0       	ldi	r31, 0x01	; 1
    2d22:	ef 1a       	sub	r14, r31
    2d24:	f1 08       	sbc	r15, r1
disk_initialize():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:144
    2d26:	89 f7       	brne	.-30     	; 0x2d0a <disk_initialize+0x150>
    2d28:	8a cf       	rjmp	.-236    	; 0x2c3e <disk_initialize+0x84>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:133
	if (send_cmd(CMD0, 0) == 1) {			/* GO_IDLE_STATE */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {			/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 10000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) dly_100us();	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    2d2a:	40 e0       	ldi	r20, 0x00	; 0
    2d2c:	50 e0       	ldi	r21, 0x00	; 0
    2d2e:	ba 01       	movw	r22, r20
    2d30:	8a e7       	ldi	r24, 0x7A	; 122
    2d32:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <send_cmd(unsigned char, unsigned long)>
    2d36:	81 11       	cpse	r24, r1
    2d38:	82 cf       	rjmp	.-252    	; 0x2c3e <disk_initialize+0x84>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:134 (discriminator 2)
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
    2d3a:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <rcv_spi()>
    2d3e:	f7 01       	movw	r30, r14
    2d40:	81 93       	st	Z+, r24
    2d42:	7f 01       	movw	r14, r30
    2d44:	0e 17       	cp	r16, r30
    2d46:	1f 07       	cpc	r17, r31
    2d48:	c1 f7       	brne	.-16     	; 0x2d3a <disk_initialize+0x180>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:135
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	1c e0       	ldi	r17, 0x0C	; 12
    2d4e:	86 fd       	sbrc	r24, 6
    2d50:	77 cf       	rjmp	.-274    	; 0x2c40 <disk_initialize+0x86>
    2d52:	14 e0       	ldi	r17, 0x04	; 4
    2d54:	75 cf       	rjmp	.-278    	; 0x2c40 <disk_initialize+0x86>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:145
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 10000; tmr && send_cmd(cmd, 0); tmr--) dly_100us();	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
    2d56:	40 e0       	ldi	r20, 0x00	; 0
    2d58:	52 e0       	ldi	r21, 0x02	; 2
    2d5a:	60 e0       	ldi	r22, 0x00	; 0
    2d5c:	70 e0       	ldi	r23, 0x00	; 0
    2d5e:	80 e5       	ldi	r24, 0x50	; 80
    2d60:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <send_cmd(unsigned char, unsigned long)>
    2d64:	88 23       	and	r24, r24
    2d66:	09 f4       	brne	.+2      	; 0x2d6a <disk_initialize+0x1b0>
    2d68:	6b cf       	rjmp	.-298    	; 0x2c40 <disk_initialize+0x86>
    2d6a:	69 cf       	rjmp	.-302    	; 0x2c3e <disk_initialize+0x84>

00002d6c <disk_readp>:
disk_readp():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:168
	BYTE *buff,		/* Pointer to the read buffer (NULL:Forward to the stream) */
	DWORD sector,	/* Sector number (LBA) */
	UINT offset,	/* Byte offset to read from (0..511) */
	UINT count		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
    2d6c:	cf 92       	push	r12
    2d6e:	df 92       	push	r13
    2d70:	ef 92       	push	r14
    2d72:	ff 92       	push	r15
    2d74:	0f 93       	push	r16
    2d76:	1f 93       	push	r17
    2d78:	cf 93       	push	r28
    2d7a:	df 93       	push	r29
    2d7c:	7c 01       	movw	r14, r24
    2d7e:	69 01       	movw	r12, r18
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:174
	DRESULT res;
	BYTE rc;
	UINT bc;


	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    2d80:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <CardType>
    2d84:	83 fd       	sbrc	r24, 3
    2d86:	07 c0       	rjmp	.+14     	; 0x2d96 <disk_readp+0x2a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:174 (discriminator 1)
    2d88:	89 e0       	ldi	r24, 0x09	; 9
    2d8a:	44 0f       	add	r20, r20
    2d8c:	55 1f       	adc	r21, r21
    2d8e:	66 1f       	adc	r22, r22
    2d90:	77 1f       	adc	r23, r23
    2d92:	8a 95       	dec	r24
    2d94:	d1 f7       	brne	.-12     	; 0x2d8a <disk_readp+0x1e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:177

	res = RES_ERROR;
	if (send_cmd(CMD17, sector) == 0) {	/* READ_SINGLE_BLOCK */
    2d96:	81 e5       	ldi	r24, 0x51	; 81
    2d98:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <send_cmd(unsigned char, unsigned long)>
    2d9c:	81 11       	cpse	r24, r1
    2d9e:	08 c0       	rjmp	.+16     	; 0x2db0 <disk_readp+0x44>
    2da0:	c0 e4       	ldi	r28, 0x40	; 64
    2da2:	dc e9       	ldi	r29, 0x9C	; 156
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:181

		bc = 40000;	/* Time counter */
		do {				/* Wait for data packet */
			rc = rcv_spi();
    2da4:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <rcv_spi()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:182
		} while (rc == 0xFF && --bc);
    2da8:	8f 3f       	cpi	r24, 0xFF	; 255
    2daa:	29 f4       	brne	.+10     	; 0x2db6 <disk_readp+0x4a>
    2dac:	21 97       	sbiw	r28, 0x01	; 1
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:182 (discriminator 1)
    2dae:	d1 f7       	brne	.-12     	; 0x2da4 <disk_readp+0x38>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:176
	UINT bc;


	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	res = RES_ERROR;
    2db0:	c1 e0       	ldi	r28, 0x01	; 1
    2db2:	d0 e0       	ldi	r29, 0x00	; 0
    2db4:	22 c0       	rjmp	.+68     	; 0x2dfa <disk_readp+0x8e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:184 (discriminator 4)
		bc = 40000;	/* Time counter */
		do {				/* Wait for data packet */
			rc = rcv_spi();
		} while (rc == 0xFF && --bc);

		if (rc == 0xFE) {	/* A data packet arrived */
    2db6:	8e 3f       	cpi	r24, 0xFE	; 254
    2db8:	d9 f7       	brne	.-10     	; 0x2db0 <disk_readp+0x44>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:186

			bc = 512 + 2 - offset - count;	/* Number of trailing bytes to skip */
    2dba:	c2 e0       	ldi	r28, 0x02	; 2
    2dbc:	d2 e0       	ldi	r29, 0x02	; 2
    2dbe:	c0 1b       	sub	r28, r16
    2dc0:	d1 0b       	sbc	r29, r17
    2dc2:	cc 19       	sub	r28, r12
    2dc4:	dd 09       	sbc	r29, r13
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:189 (discriminator 2)

			/* Skip leading bytes */
			while (offset--) rcv_spi();
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	c8 1a       	sub	r12, r24
    2dca:	d1 08       	sbc	r13, r1
    2dcc:	18 f0       	brcs	.+6      	; 0x2dd4 <disk_readp+0x68>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:189 (discriminator 1)
    2dce:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <rcv_spi()>
    2dd2:	f9 cf       	rjmp	.-14     	; 0x2dc6 <disk_readp+0x5a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:192

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
    2dd4:	e1 14       	cp	r14, r1
    2dd6:	f1 04       	cpc	r15, r1
    2dd8:	01 f1       	breq	.+64     	; 0x2e1a <disk_readp+0xae>
    2dda:	0e 0d       	add	r16, r14
    2ddc:	1f 1d       	adc	r17, r15
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:194
				do {
					*buff++ = rcv_spi();
    2dde:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <rcv_spi()>
    2de2:	f7 01       	movw	r30, r14
    2de4:	81 93       	st	Z+, r24
    2de6:	7f 01       	movw	r14, r30
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:195
				} while (--count);
    2de8:	0e 17       	cp	r16, r30
    2dea:	1f 07       	cpc	r17, r31
    2dec:	c1 f7       	brne	.-16     	; 0x2dde <disk_readp+0x72>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:203
					FORWARD(rcv_spi());
				} while (--count);
			}

			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
    2dee:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <rcv_spi()>
    2df2:	21 97       	sbiw	r28, 0x01	; 1
    2df4:	e1 f7       	brne	.-8      	; 0x2dee <disk_readp+0x82>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:205

			res = RES_OK;
    2df6:	d0 e0       	ldi	r29, 0x00	; 0
    2df8:	c0 e0       	ldi	r28, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:209
		}
	}

	DESELECT();
    2dfa:	61 e0       	ldi	r22, 0x01	; 1
    2dfc:	84 e0       	ldi	r24, 0x04	; 4
    2dfe:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:210
	rcv_spi();
    2e02:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <rcv_spi()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:213

	return res;
}
    2e06:	ce 01       	movw	r24, r28
    2e08:	df 91       	pop	r29
    2e0a:	cf 91       	pop	r28
    2e0c:	1f 91       	pop	r17
    2e0e:	0f 91       	pop	r16
    2e10:	ff 90       	pop	r15
    2e12:	ef 90       	pop	r14
    2e14:	df 90       	pop	r13
    2e16:	cf 90       	pop	r12
    2e18:	08 95       	ret
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:198
				do {
					*buff++ = rcv_spi();
				} while (--count);
			} else {	/* Forward data to the outgoing stream */
				do {
					FORWARD(rcv_spi());
    2e1a:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <rcv_spi()>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:199
				} while (--count);
    2e1e:	01 50       	subi	r16, 0x01	; 1
    2e20:	11 09       	sbc	r17, r1
    2e22:	d9 f7       	brne	.-10     	; 0x2e1a <disk_readp+0xae>
    2e24:	e4 cf       	rjmp	.-56     	; 0x2dee <disk_readp+0x82>

00002e26 <disk_writep>:
disk_writep():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:226
#if _USE_WRITE
DRESULT disk_writep (
	const BYTE *buff,	/* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
	DWORD sc			/* Number of bytes to send, Sector number (LBA) or zero */
)
{
    2e26:	ef 92       	push	r14
    2e28:	ff 92       	push	r15
    2e2a:	0f 93       	push	r16
    2e2c:	1f 93       	push	r17
    2e2e:	cf 93       	push	r28
    2e30:	df 93       	push	r29
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:233
	UINT bc;
	static UINT wc;	/* Sector write counter */

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
    2e32:	00 97       	sbiw	r24, 0x00	; 0
    2e34:	c9 f0       	breq	.+50     	; 0x2e68 <disk_writep+0x42>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:234
		bc = sc;
    2e36:	ea 01       	movw	r28, r20
    2e38:	8c 01       	movw	r16, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:235
		while (bc && wc) {		/* Send data bytes to the card */
    2e3a:	20 97       	sbiw	r28, 0x00	; 0
    2e3c:	b1 f1       	breq	.+108    	; 0x2eaa <disk_writep+0x84>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:235 (discriminator 1)
    2e3e:	e0 90 e1 01 	lds	r14, 0x01E1	; 0x8001e1 <disk_writep::wc>
    2e42:	f0 90 e2 01 	lds	r15, 0x01E2	; 0x8001e2 <disk_writep::wc+0x1>
    2e46:	e1 14       	cp	r14, r1
    2e48:	f1 04       	cpc	r15, r1
    2e4a:	79 f1       	breq	.+94     	; 0x2eaa <disk_writep+0x84>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:236
			xmit_spi(*buff++);
    2e4c:	f8 01       	movw	r30, r16
    2e4e:	81 91       	ld	r24, Z+
    2e50:	8f 01       	movw	r16, r30
    2e52:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <xmit_spi(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:237
			wc--; bc--;
    2e56:	f1 e0       	ldi	r31, 0x01	; 1
    2e58:	ef 1a       	sub	r14, r31
    2e5a:	f1 08       	sbc	r15, r1
    2e5c:	f0 92 e2 01 	sts	0x01E2, r15	; 0x8001e2 <disk_writep::wc+0x1>
    2e60:	e0 92 e1 01 	sts	0x01E1, r14	; 0x8001e1 <disk_writep::wc>
    2e64:	21 97       	sbiw	r28, 0x01	; 1
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:235

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = sc;
		while (bc && wc) {		/* Send data bytes to the card */
    2e66:	e9 cf       	rjmp	.-46     	; 0x2e3a <disk_writep+0x14>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:241
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
	} else {
		if (sc) {	/* Initiate sector write process */
    2e68:	41 15       	cp	r20, r1
    2e6a:	51 05       	cpc	r21, r1
    2e6c:	61 05       	cpc	r22, r1
    2e6e:	71 05       	cpc	r23, r1
    2e70:	29 f1       	breq	.+74     	; 0x2ebc <disk_writep+0x96>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:242
			if (!(CardType & CT_BLOCK)) sc *= 512;	/* Convert to byte address if needed */
    2e72:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <CardType>
    2e76:	83 fd       	sbrc	r24, 3
    2e78:	07 c0       	rjmp	.+14     	; 0x2e88 <disk_writep+0x62>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:242 (discriminator 1)
    2e7a:	89 e0       	ldi	r24, 0x09	; 9
    2e7c:	44 0f       	add	r20, r20
    2e7e:	55 1f       	adc	r21, r21
    2e80:	66 1f       	adc	r22, r22
    2e82:	77 1f       	adc	r23, r23
    2e84:	8a 95       	dec	r24
    2e86:	d1 f7       	brne	.-12     	; 0x2e7c <disk_writep+0x56>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:243
			if (send_cmd(CMD24, sc) == 0) {			/* WRITE_SINGLE_BLOCK */
    2e88:	88 e5       	ldi	r24, 0x58	; 88
    2e8a:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <send_cmd(unsigned char, unsigned long)>
    2e8e:	81 11       	cpse	r24, r1
    2e90:	1d c0       	rjmp	.+58     	; 0x2ecc <disk_writep+0xa6>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:244
				xmit_spi(0xFF); xmit_spi(0xFE);		/* Data block header */
    2e92:	8f ef       	ldi	r24, 0xFF	; 255
    2e94:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <xmit_spi(unsigned char)>
    2e98:	8e ef       	ldi	r24, 0xFE	; 254
    2e9a:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <xmit_spi(unsigned char)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:245
				wc = 512;							/* Set byte counter */
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	92 e0       	ldi	r25, 0x02	; 2
    2ea2:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <disk_writep::wc+0x1>
    2ea6:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <disk_writep::wc>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:239
		bc = sc;
		while (bc && wc) {		/* Send data bytes to the card */
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	80 e0       	ldi	r24, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:262
			rcv_spi();
		}
	}

	return res;
}
    2eae:	df 91       	pop	r29
    2eb0:	cf 91       	pop	r28
    2eb2:	1f 91       	pop	r17
    2eb4:	0f 91       	pop	r16
    2eb6:	ff 90       	pop	r15
    2eb8:	ef 90       	pop	r14
    2eba:	08 95       	ret
    2ebc:	df 91       	pop	r29
    2ebe:	cf 91       	pop	r28
    2ec0:	1f 91       	pop	r17
    2ec2:	0f 91       	pop	r16
    2ec4:	ff 90       	pop	r15
    2ec6:	ef 90       	pop	r14
    2ec8:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <disk_writep.part.1>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:231
{
	DRESULT res;
	UINT bc;
	static UINT wc;	/* Sector write counter */

	res = RES_ERROR;
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	90 e0       	ldi	r25, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/avr_mmcp.cpp:261
			DESELECT();
			rcv_spi();
		}
	}

	return res;
    2ed0:	ee cf       	rjmp	.-36     	; 0x2eae <disk_writep+0x88>

00002ed2 <clust2sect(unsigned long)>:
_ZL10clust2sectm():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:402

static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
    2ed2:	0f 93       	push	r16
    2ed4:	1f 93       	push	r17
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:403
	FATFS *fs = FatFs;
    2ed6:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <FatFs>
    2eda:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <FatFs+0x1>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:406


	clst -= 2;
    2ede:	9b 01       	movw	r18, r22
    2ee0:	ac 01       	movw	r20, r24
    2ee2:	22 50       	subi	r18, 0x02	; 2
    2ee4:	31 09       	sbc	r19, r1
    2ee6:	41 09       	sbc	r20, r1
    2ee8:	51 09       	sbc	r21, r1
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:407
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    2eea:	86 81       	ldd	r24, Z+6	; 0x06
    2eec:	97 81       	ldd	r25, Z+7	; 0x07
    2eee:	a0 85       	ldd	r26, Z+8	; 0x08
    2ef0:	b1 85       	ldd	r27, Z+9	; 0x09
    2ef2:	02 97       	sbiw	r24, 0x02	; 2
    2ef4:	a1 09       	sbc	r26, r1
    2ef6:	b1 09       	sbc	r27, r1
    2ef8:	28 17       	cp	r18, r24
    2efa:	39 07       	cpc	r19, r25
    2efc:	4a 07       	cpc	r20, r26
    2efe:	5b 07       	cpc	r21, r27
    2f00:	78 f4       	brcc	.+30     	; 0x2f20 <clust2sect(unsigned long)+0x4e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:408
	return (DWORD)clst * fs->csize + fs->database;
    2f02:	a2 81       	ldd	r26, Z+2	; 0x02
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	0e 94 94 27 	call	0x4f28	; 0x4f28 <__muluhisi3>
    2f0a:	02 89       	ldd	r16, Z+18	; 0x12
    2f0c:	13 89       	ldd	r17, Z+19	; 0x13
    2f0e:	24 89       	ldd	r18, Z+20	; 0x14
    2f10:	35 89       	ldd	r19, Z+21	; 0x15
    2f12:	60 0f       	add	r22, r16
    2f14:	71 1f       	adc	r23, r17
    2f16:	82 1f       	adc	r24, r18
    2f18:	93 1f       	adc	r25, r19
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:409
}
    2f1a:	1f 91       	pop	r17
    2f1c:	0f 91       	pop	r16
    2f1e:	08 95       	ret
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:407
{
	FATFS *fs = FatFs;


	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    2f20:	60 e0       	ldi	r22, 0x00	; 0
    2f22:	70 e0       	ldi	r23, 0x00	; 0
    2f24:	cb 01       	movw	r24, r22
    2f26:	f9 cf       	rjmp	.-14     	; 0x2f1a <clust2sect(unsigned long)+0x48>

00002f28 <dir_rewind(DIR*)>:
_ZL10dir_rewindP3DIR():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:439

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
    2f28:	0f 93       	push	r16
    2f2a:	1f 93       	push	r17
    2f2c:	cf 93       	push	r28
    2f2e:	df 93       	push	r29
    2f30:	ec 01       	movw	r28, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:441
	CLUST clst;
	FATFS *fs = FatFs;
    2f32:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <FatFs>
    2f36:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <FatFs+0x1>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:444


	dj->index = 0;
    2f3a:	19 82       	std	Y+1, r1	; 0x01
    2f3c:	18 82       	st	Y, r1
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:445
	clst = dj->sclust;
    2f3e:	6c 81       	ldd	r22, Y+4	; 0x04
    2f40:	7d 81       	ldd	r23, Y+5	; 0x05
    2f42:	8e 81       	ldd	r24, Y+6	; 0x06
    2f44:	9f 81       	ldd	r25, Y+7	; 0x07
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:446
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
    2f46:	61 30       	cpi	r22, 0x01	; 1
    2f48:	71 05       	cpc	r23, r1
    2f4a:	81 05       	cpc	r24, r1
    2f4c:	91 05       	cpc	r25, r1
    2f4e:	81 f1       	breq	.+96     	; 0x2fb0 <dir_rewind(DIR*)+0x88>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:446 (discriminator 1)
    2f50:	06 81       	ldd	r16, Z+6	; 0x06
    2f52:	17 81       	ldd	r17, Z+7	; 0x07
    2f54:	20 85       	ldd	r18, Z+8	; 0x08
    2f56:	31 85       	ldd	r19, Z+9	; 0x09
    2f58:	60 17       	cp	r22, r16
    2f5a:	71 07       	cpc	r23, r17
    2f5c:	82 07       	cpc	r24, r18
    2f5e:	93 07       	cpc	r25, r19
    2f60:	38 f5       	brcc	.+78     	; 0x2fb0 <dir_rewind(DIR*)+0x88>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:448
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && (_FS_32ONLY || fs->fs_type == FS_FAT32))	/* Replace cluster# 0 with root cluster# if in FAT32 */
    2f62:	61 15       	cp	r22, r1
    2f64:	71 05       	cpc	r23, r1
    2f66:	81 05       	cpc	r24, r1
    2f68:	91 05       	cpc	r25, r1
    2f6a:	39 f4       	brne	.+14     	; 0x2f7a <dir_rewind(DIR*)+0x52>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:448 (discriminator 1)
    2f6c:	20 81       	ld	r18, Z
    2f6e:	23 30       	cpi	r18, 0x03	; 3
    2f70:	21 f4       	brne	.+8      	; 0x2f7a <dir_rewind(DIR*)+0x52>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:449
		clst = (CLUST)fs->dirbase;
    2f72:	66 85       	ldd	r22, Z+14	; 0x0e
    2f74:	77 85       	ldd	r23, Z+15	; 0x0f
    2f76:	80 89       	ldd	r24, Z+16	; 0x10
    2f78:	91 89       	ldd	r25, Z+17	; 0x11
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:450
	dj->clust = clst;						/* Current cluster */
    2f7a:	68 87       	std	Y+8, r22	; 0x08
    2f7c:	79 87       	std	Y+9, r23	; 0x09
    2f7e:	8a 87       	std	Y+10, r24	; 0x0a
    2f80:	9b 87       	std	Y+11, r25	; 0x0b
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:451
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */
    2f82:	61 15       	cp	r22, r1
    2f84:	71 05       	cpc	r23, r1
    2f86:	81 05       	cpc	r24, r1
    2f88:	91 05       	cpc	r25, r1
    2f8a:	69 f0       	breq	.+26     	; 0x2fa6 <dir_rewind(DIR*)+0x7e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:451 (discriminator 1)
    2f8c:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <clust2sect(unsigned long)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:451 (discriminator 4)
    2f90:	6c 87       	std	Y+12, r22	; 0x0c
    2f92:	7d 87       	std	Y+13, r23	; 0x0d
    2f94:	8e 87       	std	Y+14, r24	; 0x0e
    2f96:	9f 87       	std	Y+15, r25	; 0x0f
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:453 (discriminator 4)

	return FR_OK;	/* Seek succeeded */
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:454
}
    2f9c:	df 91       	pop	r29
    2f9e:	cf 91       	pop	r28
    2fa0:	1f 91       	pop	r17
    2fa2:	0f 91       	pop	r16
    2fa4:	08 95       	ret
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:451 (discriminator 2)
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && (_FS_32ONLY || fs->fs_type == FS_FAT32))	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
	dj->sect = (_FS_32ONLY || clst) ? clust2sect(clst) : fs->dirbase;	/* Current sector */
    2fa6:	66 85       	ldd	r22, Z+14	; 0x0e
    2fa8:	77 85       	ldd	r23, Z+15	; 0x0f
    2faa:	80 89       	ldd	r24, Z+16	; 0x10
    2fac:	91 89       	ldd	r25, Z+17	; 0x11
    2fae:	f0 cf       	rjmp	.-32     	; 0x2f90 <dir_rewind(DIR*)+0x68>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:447


	dj->index = 0;
	clst = dj->sclust;
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
    2fb0:	81 e0       	ldi	r24, 0x01	; 1
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	f3 cf       	rjmp	.-26     	; 0x2f9c <dir_rewind(DIR*)+0x74>

00002fb6 <get_fat(unsigned long)>:
_ZL7get_fatm():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:352

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
    2fb6:	0f 93       	push	r16
    2fb8:	1f 93       	push	r17
    2fba:	cf 93       	push	r28
    2fbc:	df 93       	push	r29
    2fbe:	00 d0       	rcall	.+0      	; 0x2fc0 <get_fat(unsigned long)+0xa>
    2fc0:	00 d0       	rcall	.+0      	; 0x2fc2 <get_fat(unsigned long)+0xc>
    2fc2:	cd b7       	in	r28, 0x3d	; 61
    2fc4:	de b7       	in	r29, 0x3e	; 62
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:356
	BYTE buf[4];
	FATFS *fs = FatFs;

	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
    2fc6:	62 30       	cpi	r22, 0x02	; 2
    2fc8:	71 05       	cpc	r23, r1
    2fca:	81 05       	cpc	r24, r1
    2fcc:	91 05       	cpc	r25, r1
    2fce:	28 f4       	brcc	.+10     	; 0x2fda <get_fat(unsigned long)+0x24>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:388
		if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) break;
		return LD_DWORD(buf) & 0x0FFFFFFF;
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
    2fd0:	61 e0       	ldi	r22, 0x01	; 1
    2fd2:	70 e0       	ldi	r23, 0x00	; 0
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	55 c0       	rjmp	.+170    	; 0x3084 <get_fat(unsigned long)+0xce>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:354 (discriminator 1)
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
	BYTE buf[4];
	FATFS *fs = FatFs;
    2fda:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <FatFs>
    2fde:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <FatFs+0x1>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:356 (discriminator 1)

	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
    2fe2:	06 81       	ldd	r16, Z+6	; 0x06
    2fe4:	17 81       	ldd	r17, Z+7	; 0x07
    2fe6:	20 85       	ldd	r18, Z+8	; 0x08
    2fe8:	31 85       	ldd	r19, Z+9	; 0x09
    2fea:	60 17       	cp	r22, r16
    2fec:	71 07       	cpc	r23, r17
    2fee:	82 07       	cpc	r24, r18
    2ff0:	93 07       	cpc	r25, r19
    2ff2:	70 f7       	brcc	.-36     	; 0x2fd0 <get_fat(unsigned long)+0x1a>
    2ff4:	ab 01       	movw	r20, r22
    2ff6:	bc 01       	movw	r22, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:359
		return 1;

	switch (fs->fs_type) {
    2ff8:	80 81       	ld	r24, Z
    2ffa:	82 30       	cpi	r24, 0x02	; 2
    2ffc:	31 f1       	breq	.+76     	; 0x304a <get_fat(unsigned long)+0x94>
    2ffe:	83 30       	cpi	r24, 0x03	; 3
    3000:	39 f7       	brne	.-50     	; 0x2fd0 <get_fat(unsigned long)+0x1a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:383
		if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) break;
		return LD_WORD(buf);
#endif
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) break;
    3002:	9a 01       	movw	r18, r20
    3004:	2f 77       	andi	r18, 0x7F	; 127
    3006:	33 27       	eor	r19, r19
    3008:	22 0f       	add	r18, r18
    300a:	33 1f       	adc	r19, r19
    300c:	22 0f       	add	r18, r18
    300e:	33 1f       	adc	r19, r19
    3010:	97 e0       	ldi	r25, 0x07	; 7
    3012:	76 95       	lsr	r23
    3014:	67 95       	ror	r22
    3016:	57 95       	ror	r21
    3018:	47 95       	ror	r20
    301a:	9a 95       	dec	r25
    301c:	d1 f7       	brne	.-12     	; 0x3012 <get_fat(unsigned long)+0x5c>
    301e:	82 85       	ldd	r24, Z+10	; 0x0a
    3020:	93 85       	ldd	r25, Z+11	; 0x0b
    3022:	a4 85       	ldd	r26, Z+12	; 0x0c
    3024:	b5 85       	ldd	r27, Z+13	; 0x0d
    3026:	48 0f       	add	r20, r24
    3028:	59 1f       	adc	r21, r25
    302a:	6a 1f       	adc	r22, r26
    302c:	7b 1f       	adc	r23, r27
    302e:	04 e0       	ldi	r16, 0x04	; 4
    3030:	10 e0       	ldi	r17, 0x00	; 0
    3032:	ce 01       	movw	r24, r28
    3034:	01 96       	adiw	r24, 0x01	; 1
    3036:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <disk_readp>
    303a:	89 2b       	or	r24, r25
    303c:	49 f6       	brne	.-110    	; 0x2fd0 <get_fat(unsigned long)+0x1a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:384
		return LD_DWORD(buf) & 0x0FFFFFFF;
    303e:	69 81       	ldd	r22, Y+1	; 0x01
    3040:	7a 81       	ldd	r23, Y+2	; 0x02
    3042:	8b 81       	ldd	r24, Y+3	; 0x03
    3044:	9c 81       	ldd	r25, Y+4	; 0x04
    3046:	9f 70       	andi	r25, 0x0F	; 15
    3048:	1d c0       	rjmp	.+58     	; 0x3084 <get_fat(unsigned long)+0xce>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:378
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
	}
#endif
#if _FS_FAT16
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) break;
    304a:	9a 01       	movw	r18, r20
    304c:	33 27       	eor	r19, r19
    304e:	22 0f       	add	r18, r18
    3050:	33 1f       	adc	r19, r19
    3052:	45 2f       	mov	r20, r21
    3054:	56 2f       	mov	r21, r22
    3056:	67 2f       	mov	r22, r23
    3058:	77 27       	eor	r23, r23
    305a:	82 85       	ldd	r24, Z+10	; 0x0a
    305c:	93 85       	ldd	r25, Z+11	; 0x0b
    305e:	a4 85       	ldd	r26, Z+12	; 0x0c
    3060:	b5 85       	ldd	r27, Z+13	; 0x0d
    3062:	48 0f       	add	r20, r24
    3064:	59 1f       	adc	r21, r25
    3066:	6a 1f       	adc	r22, r26
    3068:	7b 1f       	adc	r23, r27
    306a:	02 e0       	ldi	r16, 0x02	; 2
    306c:	10 e0       	ldi	r17, 0x00	; 0
    306e:	ce 01       	movw	r24, r28
    3070:	01 96       	adiw	r24, 0x01	; 1
    3072:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <disk_readp>
    3076:	89 2b       	or	r24, r25
    3078:	09 f0       	breq	.+2      	; 0x307c <get_fat(unsigned long)+0xc6>
    307a:	aa cf       	rjmp	.-172    	; 0x2fd0 <get_fat(unsigned long)+0x1a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:379
		return LD_WORD(buf);
    307c:	69 81       	ldd	r22, Y+1	; 0x01
    307e:	7a 81       	ldd	r23, Y+2	; 0x02
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	80 e0       	ldi	r24, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:389
		return LD_DWORD(buf) & 0x0FFFFFFF;
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
}
    3084:	0f 90       	pop	r0
    3086:	0f 90       	pop	r0
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
    308c:	df 91       	pop	r29
    308e:	cf 91       	pop	r28
    3090:	1f 91       	pop	r17
    3092:	0f 91       	pop	r16
    3094:	08 95       	ret

00003096 <check_fs(unsigned char*, unsigned long)>:
_ZL8check_fsPhm():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:725
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    3096:	cf 92       	push	r12
    3098:	df 92       	push	r13
    309a:	ef 92       	push	r14
    309c:	ff 92       	push	r15
    309e:	0f 93       	push	r16
    30a0:	1f 93       	push	r17
    30a2:	cf 93       	push	r28
    30a4:	df 93       	push	r29
    30a6:	ec 01       	movw	r28, r24
    30a8:	6a 01       	movw	r12, r20
    30aa:	7b 01       	movw	r14, r22
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:726
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot record */
    30ac:	02 e0       	ldi	r16, 0x02	; 2
    30ae:	10 e0       	ldi	r17, 0x00	; 0
    30b0:	2e ef       	ldi	r18, 0xFE	; 254
    30b2:	31 e0       	ldi	r19, 0x01	; 1
    30b4:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <disk_readp>
    30b8:	89 2b       	or	r24, r25
    30ba:	31 f5       	brne	.+76     	; 0x3108 <check_fs(unsigned char*, unsigned long)+0x72>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:728
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
    30bc:	88 81       	ld	r24, Y
    30be:	99 81       	ldd	r25, Y+1	; 0x01
    30c0:	85 35       	cpi	r24, 0x55	; 85
    30c2:	9a 4a       	sbci	r25, 0xAA	; 170
    30c4:	59 f5       	brne	.+86     	; 0x311c <check_fs(unsigned char*, unsigned long)+0x86>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:731
		return 2;

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
    30c6:	26 e3       	ldi	r18, 0x36	; 54
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	b7 01       	movw	r22, r14
    30cc:	a6 01       	movw	r20, r12
    30ce:	ce 01       	movw	r24, r28
    30d0:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <disk_readp>
    30d4:	89 2b       	or	r24, r25
    30d6:	29 f4       	brne	.+10     	; 0x30e2 <check_fs(unsigned char*, unsigned long)+0x4c>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:731 (discriminator 1)
    30d8:	88 81       	ld	r24, Y
    30da:	99 81       	ldd	r25, Y+1	; 0x01
    30dc:	86 34       	cpi	r24, 0x46	; 70
    30de:	91 44       	sbci	r25, 0x41	; 65
    30e0:	89 f0       	breq	.+34     	; 0x3104 <check_fs(unsigned char*, unsigned long)+0x6e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:733
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
    30e2:	02 e0       	ldi	r16, 0x02	; 2
    30e4:	10 e0       	ldi	r17, 0x00	; 0
    30e6:	22 e5       	ldi	r18, 0x52	; 82
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	b7 01       	movw	r22, r14
    30ec:	a6 01       	movw	r20, r12
    30ee:	ce 01       	movw	r24, r28
    30f0:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <disk_readp>
    30f4:	89 2b       	or	r24, r25
    30f6:	a1 f4       	brne	.+40     	; 0x3120 <check_fs(unsigned char*, unsigned long)+0x8a>
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	28 81       	ld	r18, Y
    30fc:	39 81       	ldd	r19, Y+1	; 0x01
    30fe:	26 34       	cpi	r18, 0x46	; 70
    3100:	31 44       	sbci	r19, 0x41	; 65
    3102:	19 f4       	brne	.+6      	; 0x310a <check_fs(unsigned char*, unsigned long)+0x74>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:732
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
		return 2;

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
		return 0;
    3104:	80 e0       	ldi	r24, 0x00	; 0
    3106:	01 c0       	rjmp	.+2      	; 0x310a <check_fs(unsigned char*, unsigned long)+0x74>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:727
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot record */
		return 3;
    3108:	83 e0       	ldi	r24, 0x03	; 3
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:736
	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
		return 0;
	return 1;
}
    310a:	df 91       	pop	r29
    310c:	cf 91       	pop	r28
    310e:	1f 91       	pop	r17
    3110:	0f 91       	pop	r16
    3112:	ff 90       	pop	r15
    3114:	ef 90       	pop	r14
    3116:	df 90       	pop	r13
    3118:	cf 90       	pop	r12
    311a:	08 95       	ret
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:729
)
{
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot record */
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
		return 2;
    311c:	82 e0       	ldi	r24, 0x02	; 2
    311e:	f5 cf       	rjmp	.-22     	; 0x310a <check_fs(unsigned char*, unsigned long)+0x74>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:735

	if (!_FS_32ONLY && !disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
		return 0;
	return 1;
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	f3 cf       	rjmp	.-26     	; 0x310a <check_fs(unsigned char*, unsigned long)+0x74>

00003124 <pf_mount>:
pf_mount():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:756
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object */
)
{
    3124:	2f 92       	push	r2
    3126:	3f 92       	push	r3
    3128:	4f 92       	push	r4
    312a:	5f 92       	push	r5
    312c:	6f 92       	push	r6
    312e:	7f 92       	push	r7
    3130:	8f 92       	push	r8
    3132:	9f 92       	push	r9
    3134:	af 92       	push	r10
    3136:	bf 92       	push	r11
    3138:	cf 92       	push	r12
    313a:	df 92       	push	r13
    313c:	ef 92       	push	r14
    313e:	ff 92       	push	r15
    3140:	0f 93       	push	r16
    3142:	1f 93       	push	r17
    3144:	cf 93       	push	r28
    3146:	df 93       	push	r29
    3148:	cd b7       	in	r28, 0x3d	; 61
    314a:	de b7       	in	r29, 0x3e	; 62
    314c:	a4 97       	sbiw	r28, 0x24	; 36
    314e:	0f b6       	in	r0, 0x3f	; 63
    3150:	f8 94       	cli
    3152:	de bf       	out	0x3e, r29	; 62
    3154:	0f be       	out	0x3f, r0	; 63
    3156:	cd bf       	out	0x3d, r28	; 61
    3158:	1c 01       	movw	r2, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:761
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    315a:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <FatFs+0x1>
    315e:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <FatFs>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:763

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
    3162:	0e 94 dd 15 	call	0x2bba	; 0x2bba <disk_initialize>
    3166:	80 fd       	sbrc	r24, 0
    3168:	c3 c0       	rjmp	.+390    	; 0x32f0 <pf_mount+0x1cc>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:768
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    316a:	40 e0       	ldi	r20, 0x00	; 0
    316c:	50 e0       	ldi	r21, 0x00	; 0
    316e:	ba 01       	movw	r22, r20
    3170:	ce 01       	movw	r24, r28
    3172:	01 96       	adiw	r24, 0x01	; 1
    3174:	0e 94 4b 18 	call	0x3096	; 0x3096 <check_fs(unsigned char*, unsigned long)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:767

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
    3178:	41 2c       	mov	r4, r1
    317a:	51 2c       	mov	r5, r1
    317c:	32 01       	movw	r6, r4
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:769
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    317e:	81 30       	cpi	r24, 0x01	; 1
    3180:	c1 f5       	brne	.+112    	; 0x31f2 <pf_mount+0xce>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:771
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    3182:	00 e1       	ldi	r16, 0x10	; 16
    3184:	10 e0       	ldi	r17, 0x00	; 0
    3186:	2e eb       	ldi	r18, 0xBE	; 190
    3188:	31 e0       	ldi	r19, 0x01	; 1
    318a:	40 e0       	ldi	r20, 0x00	; 0
    318c:	50 e0       	ldi	r21, 0x00	; 0
    318e:	ba 01       	movw	r22, r20
    3190:	ce 01       	movw	r24, r28
    3192:	01 96       	adiw	r24, 0x01	; 1
    3194:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <disk_readp>
    3198:	89 2b       	or	r24, r25
    319a:	d9 f0       	breq	.+54     	; 0x31d2 <pf_mount+0xae>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:780
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	90 e0       	ldi	r25, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:820

	fs->flag = 0;
	FatFs = fs;

	return FR_OK;
}
    31a0:	a4 96       	adiw	r28, 0x24	; 36
    31a2:	0f b6       	in	r0, 0x3f	; 63
    31a4:	f8 94       	cli
    31a6:	de bf       	out	0x3e, r29	; 62
    31a8:	0f be       	out	0x3f, r0	; 63
    31aa:	cd bf       	out	0x3d, r28	; 61
    31ac:	df 91       	pop	r29
    31ae:	cf 91       	pop	r28
    31b0:	1f 91       	pop	r17
    31b2:	0f 91       	pop	r16
    31b4:	ff 90       	pop	r15
    31b6:	ef 90       	pop	r14
    31b8:	df 90       	pop	r13
    31ba:	cf 90       	pop	r12
    31bc:	bf 90       	pop	r11
    31be:	af 90       	pop	r10
    31c0:	9f 90       	pop	r9
    31c2:	8f 90       	pop	r8
    31c4:	7f 90       	pop	r7
    31c6:	6f 90       	pop	r6
    31c8:	5f 90       	pop	r5
    31ca:	4f 90       	pop	r4
    31cc:	3f 90       	pop	r3
    31ce:	2f 90       	pop	r2
    31d0:	08 95       	ret
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:774
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    31d2:	8d 81       	ldd	r24, Y+5	; 0x05
    31d4:	81 11       	cpse	r24, r1
    31d6:	03 c0       	rjmp	.+6      	; 0x31de <pf_mount+0xba>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:781
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    31d8:	86 e0       	ldi	r24, 0x06	; 6
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	e1 cf       	rjmp	.-62     	; 0x31a0 <pf_mount+0x7c>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:775
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
    31de:	49 84       	ldd	r4, Y+9	; 0x09
    31e0:	5a 84       	ldd	r5, Y+10	; 0x0a
    31e2:	6b 84       	ldd	r6, Y+11	; 0x0b
    31e4:	7c 84       	ldd	r7, Y+12	; 0x0c
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:776
				fmt = check_fs(buf, bsect);	/* Check the partition */
    31e6:	b3 01       	movw	r22, r6
    31e8:	a2 01       	movw	r20, r4
    31ea:	ce 01       	movw	r24, r28
    31ec:	01 96       	adiw	r24, 0x01	; 1
    31ee:	0e 94 4b 18 	call	0x3096	; 0x3096 <check_fs(unsigned char*, unsigned long)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:780
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    31f2:	83 30       	cpi	r24, 0x03	; 3
    31f4:	99 f2       	breq	.-90     	; 0x319c <pf_mount+0x78>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:781
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    31f6:	81 11       	cpse	r24, r1
    31f8:	ef cf       	rjmp	.-34     	; 0x31d8 <pf_mount+0xb4>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:784

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
    31fa:	04 e2       	ldi	r16, 0x24	; 36
    31fc:	10 e0       	ldi	r17, 0x00	; 0
    31fe:	2d e0       	ldi	r18, 0x0D	; 13
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	b3 01       	movw	r22, r6
    3204:	a2 01       	movw	r20, r4
    3206:	ce 01       	movw	r24, r28
    3208:	01 96       	adiw	r24, 0x01	; 1
    320a:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <disk_readp>
    320e:	89 2b       	or	r24, r25
    3210:	29 f6       	brne	.-118    	; 0x319c <pf_mount+0x78>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:786

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    3212:	2a 85       	ldd	r18, Y+10	; 0x0a
    3214:	3b 85       	ldd	r19, Y+11	; 0x0b
    3216:	50 e0       	ldi	r21, 0x00	; 0
    3218:	40 e0       	ldi	r20, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:787
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
    321a:	21 15       	cp	r18, r1
    321c:	31 05       	cpc	r19, r1
    321e:	41 05       	cpc	r20, r1
    3220:	51 05       	cpc	r21, r1
    3222:	21 f4       	brne	.+8      	; 0x322c <pf_mount+0x108>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:787 (discriminator 1)
    3224:	28 8d       	ldd	r18, Y+24	; 0x18
    3226:	39 8d       	ldd	r19, Y+25	; 0x19
    3228:	4a 8d       	ldd	r20, Y+26	; 0x1a
    322a:	5b 8d       	ldd	r21, Y+27	; 0x1b
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:789

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    322c:	ac 81       	ldd	r26, Y+4	; 0x04
    322e:	b0 e0       	ldi	r27, 0x00	; 0
    3230:	0e 94 94 27 	call	0x4f28	; 0x4f28 <__muluhisi3>
    3234:	4b 01       	movw	r8, r22
    3236:	5c 01       	movw	r10, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:790
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    3238:	4a 81       	ldd	r20, Y+2	; 0x02
    323a:	5b 81       	ldd	r21, Y+3	; 0x03
    323c:	70 e0       	ldi	r23, 0x00	; 0
    323e:	60 e0       	ldi	r22, 0x00	; 0
    3240:	44 0e       	add	r4, r20
    3242:	55 1e       	adc	r5, r21
    3244:	66 1e       	adc	r6, r22
    3246:	77 1e       	adc	r7, r23
    3248:	f1 01       	movw	r30, r2
    324a:	42 86       	std	Z+10, r4	; 0x0a
    324c:	53 86       	std	Z+11, r5	; 0x0b
    324e:	64 86       	std	Z+12, r6	; 0x0c
    3250:	75 86       	std	Z+13, r7	; 0x0d
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:791
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    3252:	29 81       	ldd	r18, Y+1	; 0x01
    3254:	22 83       	std	Z+2, r18	; 0x02
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:792
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    3256:	cd 80       	ldd	r12, Y+5	; 0x05
    3258:	de 80       	ldd	r13, Y+6	; 0x06
    325a:	d5 82       	std	Z+5, r13	; 0x05
    325c:	c4 82       	std	Z+4, r12	; 0x04
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:793
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    325e:	8f 81       	ldd	r24, Y+7	; 0x07
    3260:	98 85       	ldd	r25, Y+8	; 0x08
    3262:	b0 e0       	ldi	r27, 0x00	; 0
    3264:	a0 e0       	ldi	r26, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:794
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
    3266:	00 97       	sbiw	r24, 0x00	; 0
    3268:	a1 05       	cpc	r26, r1
    326a:	b1 05       	cpc	r27, r1
    326c:	21 f4       	brne	.+8      	; 0x3276 <pf_mount+0x152>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:794 (discriminator 1)
    326e:	8c 89       	ldd	r24, Y+20	; 0x14
    3270:	9d 89       	ldd	r25, Y+21	; 0x15
    3272:	ae 89       	ldd	r26, Y+22	; 0x16
    3274:	bf 89       	ldd	r27, Y+23	; 0x17
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:796
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
    3276:	34 e0       	ldi	r19, 0x04	; 4
    3278:	d6 94       	lsr	r13
    327a:	c7 94       	ror	r12
    327c:	3a 95       	dec	r19
    327e:	e1 f7       	brne	.-8      	; 0x3278 <pf_mount+0x154>
    3280:	f1 2c       	mov	r15, r1
    3282:	e1 2c       	mov	r14, r1
    3284:	84 1b       	sub	r24, r20
    3286:	95 0b       	sbc	r25, r21
    3288:	a6 0b       	sbc	r26, r22
    328a:	b7 0b       	sbc	r27, r23
    328c:	bc 01       	movw	r22, r24
    328e:	cd 01       	movw	r24, r26
    3290:	68 19       	sub	r22, r8
    3292:	79 09       	sbc	r23, r9
    3294:	8a 09       	sbc	r24, r10
    3296:	9b 09       	sbc	r25, r11
    3298:	6c 19       	sub	r22, r12
    329a:	7d 09       	sbc	r23, r13
    329c:	8e 09       	sbc	r24, r14
    329e:	9f 09       	sbc	r25, r15
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:797
		) / fs->csize + 2;
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	50 e0       	ldi	r21, 0x00	; 0
    32a4:	40 e0       	ldi	r20, 0x00	; 0
    32a6:	0e 94 5d 27 	call	0x4eba	; 0x4eba <__udivmodsi4>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:795
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
	mclst = (tsect						/* Last cluster# + 1 */
    32aa:	da 01       	movw	r26, r20
    32ac:	c9 01       	movw	r24, r18
    32ae:	02 96       	adiw	r24, 0x02	; 2
    32b0:	a1 1d       	adc	r26, r1
    32b2:	b1 1d       	adc	r27, r1
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:798
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
    32b4:	f1 01       	movw	r30, r2
    32b6:	86 83       	std	Z+6, r24	; 0x06
    32b8:	97 83       	std	Z+7, r25	; 0x07
    32ba:	a0 87       	std	Z+8, r26	; 0x08
    32bc:	b1 87       	std	Z+9, r27	; 0x09
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:803

	fmt = 0;							/* Determine the FAT sub type */
	if (_FS_FAT12 && mclst < 0xFF7)
		fmt = FS_FAT12;
	if (_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7)
    32be:	26 5f       	subi	r18, 0xF6	; 246
    32c0:	3f 40       	sbci	r19, 0x0F	; 15
    32c2:	41 09       	sbc	r20, r1
    32c4:	51 09       	sbc	r21, r1
    32c6:	2f 3f       	cpi	r18, 0xFF	; 255
    32c8:	3f 4e       	sbci	r19, 0xEF	; 239
    32ca:	41 05       	cpc	r20, r1
    32cc:	51 05       	cpc	r21, r1
    32ce:	98 f0       	brcs	.+38     	; 0x32f6 <pf_mount+0x1d2>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:805
		fmt = FS_FAT16;
	if (_FS_FAT32 && mclst >= 0xFFF7)
    32d0:	87 3f       	cpi	r24, 0xF7	; 247
    32d2:	9f 4f       	sbci	r25, 0xFF	; 255
    32d4:	a1 05       	cpc	r26, r1
    32d6:	b1 05       	cpc	r27, r1
    32d8:	98 f4       	brcc	.+38     	; 0x3300 <pf_mount+0x1dc>
    32da:	7e cf       	rjmp	.-260    	; 0x31d8 <pf_mount+0xb4>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:808
		fmt = FS_FAT32;
	if (!fmt) return FR_NO_FILESYSTEM;
	fs->fs_type = fmt;
    32dc:	82 e0       	ldi	r24, 0x02	; 2
    32de:	f1 01       	movw	r30, r2
    32e0:	80 83       	st	Z, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:813

	if (_FS_32ONLY || (_FS_FAT32 && fmt == FS_FAT32))
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    32e2:	d3 01       	movw	r26, r6
    32e4:	c2 01       	movw	r24, r4
    32e6:	88 0d       	add	r24, r8
    32e8:	99 1d       	adc	r25, r9
    32ea:	aa 1d       	adc	r26, r10
    32ec:	bb 1d       	adc	r27, r11
    32ee:	0f c0       	rjmp	.+30     	; 0x330e <pf_mount+0x1ea>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:764


	FatFs = 0;

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;
    32f0:	82 e0       	ldi	r24, 0x02	; 2
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	55 cf       	rjmp	.-342    	; 0x31a0 <pf_mount+0x7c>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:805
	fmt = 0;							/* Determine the FAT sub type */
	if (_FS_FAT12 && mclst < 0xFF7)
		fmt = FS_FAT12;
	if (_FS_FAT16 && mclst >= 0xFF8 && mclst < 0xFFF7)
		fmt = FS_FAT16;
	if (_FS_FAT32 && mclst >= 0xFFF7)
    32f6:	87 3f       	cpi	r24, 0xF7	; 247
    32f8:	9f 4f       	sbci	r25, 0xFF	; 255
    32fa:	a1 05       	cpc	r26, r1
    32fc:	b1 05       	cpc	r27, r1
    32fe:	70 f3       	brcs	.-36     	; 0x32dc <pf_mount+0x1b8>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:808
		fmt = FS_FAT32;
	if (!fmt) return FR_NO_FILESYSTEM;
	fs->fs_type = fmt;
    3300:	83 e0       	ldi	r24, 0x03	; 3
    3302:	f1 01       	movw	r30, r2
    3304:	80 83       	st	Z, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:811

	if (_FS_32ONLY || (_FS_FAT32 && fmt == FS_FAT32))
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    3306:	88 a1       	ldd	r24, Y+32	; 0x20
    3308:	99 a1       	ldd	r25, Y+33	; 0x21
    330a:	aa a1       	ldd	r26, Y+34	; 0x22
    330c:	bb a1       	ldd	r27, Y+35	; 0x23
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:813
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    330e:	86 87       	std	Z+14, r24	; 0x0e
    3310:	97 87       	std	Z+15, r25	; 0x0f
    3312:	a0 8b       	std	Z+16, r26	; 0x10
    3314:	b1 8b       	std	Z+17, r27	; 0x11
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:814
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    3316:	c4 0c       	add	r12, r4
    3318:	d5 1c       	adc	r13, r5
    331a:	e6 1c       	adc	r14, r6
    331c:	f7 1c       	adc	r15, r7
    331e:	c8 0c       	add	r12, r8
    3320:	d9 1c       	adc	r13, r9
    3322:	ea 1c       	adc	r14, r10
    3324:	fb 1c       	adc	r15, r11
    3326:	f1 01       	movw	r30, r2
    3328:	c2 8a       	std	Z+18, r12	; 0x12
    332a:	d3 8a       	std	Z+19, r13	; 0x13
    332c:	e4 8a       	std	Z+20, r14	; 0x14
    332e:	f5 8a       	std	Z+21, r15	; 0x15
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:816

	fs->flag = 0;
    3330:	11 82       	std	Z+1, r1	; 0x01
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:817
	FatFs = fs;
    3332:	30 92 e5 01 	sts	0x01E5, r3	; 0x8001e5 <FatFs+0x1>
    3336:	20 92 e4 01 	sts	0x01E4, r2	; 0x8001e4 <FatFs>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:819

	return FR_OK;
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	80 e0       	ldi	r24, 0x00	; 0
    333e:	30 cf       	rjmp	.-416    	; 0x31a0 <pf_mount+0x7c>

00003340 <pf_open>:
pf_open():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:832
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
    3340:	4f 92       	push	r4
    3342:	5f 92       	push	r5
    3344:	6f 92       	push	r6
    3346:	7f 92       	push	r7
    3348:	8f 92       	push	r8
    334a:	9f 92       	push	r9
    334c:	bf 92       	push	r11
    334e:	cf 92       	push	r12
    3350:	df 92       	push	r13
    3352:	ef 92       	push	r14
    3354:	ff 92       	push	r15
    3356:	0f 93       	push	r16
    3358:	1f 93       	push	r17
    335a:	cf 93       	push	r28
    335c:	df 93       	push	r29
    335e:	cd b7       	in	r28, 0x3d	; 61
    3360:	de b7       	in	r29, 0x3e	; 62
    3362:	ec 97       	sbiw	r28, 0x3c	; 60
    3364:	0f b6       	in	r0, 0x3f	; 63
    3366:	f8 94       	cli
    3368:	de bf       	out	0x3e, r29	; 62
    336a:	0f be       	out	0x3f, r0	; 63
    336c:	cd bf       	out	0x3d, r28	; 61
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:836
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    336e:	c0 90 e4 01 	lds	r12, 0x01E4	; 0x8001e4 <FatFs>
    3372:	d0 90 e5 01 	lds	r13, 0x01E5	; 0x8001e5 <FatFs+0x1>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:839


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    3376:	c1 14       	cp	r12, r1
    3378:	d1 04       	cpc	r13, r1
    337a:	09 f4       	brne	.+2      	; 0x337e <pf_open+0x3e>
    337c:	0d c1       	rjmp	.+538    	; 0x3598 <pf_open+0x258>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:841

	fs->flag = 0;
    337e:	f6 01       	movw	r30, r12
    3380:	11 82       	std	Z+1, r1	; 0x01
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:842
	dj.fn = sp;
    3382:	9e 01       	movw	r18, r28
    3384:	2f 5c       	subi	r18, 0xCF	; 207
    3386:	3f 4f       	sbci	r19, 0xFF	; 255
    3388:	3c a3       	std	Y+36, r19	; 0x24
    338a:	2b a3       	std	Y+35, r18	; 0x23
    338c:	9c 01       	movw	r18, r24
    338e:	79 01       	movw	r14, r18
follow_path():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:688
)
{
	FRESULT res;


	while (*path == ' ') path++;		/* Strip leading spaces */
    3390:	f9 01       	movw	r30, r18
    3392:	80 81       	ld	r24, Z
    3394:	2f 5f       	subi	r18, 0xFF	; 255
    3396:	3f 4f       	sbci	r19, 0xFF	; 255
    3398:	80 32       	cpi	r24, 0x20	; 32
    339a:	c9 f3       	breq	.-14     	; 0x338e <pf_open+0x4e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:689
	if (*path == '/') path++;			/* Strip heading separator if exist */
    339c:	8f 32       	cpi	r24, 0x2F	; 47
    339e:	09 f4       	brne	.+2      	; 0x33a2 <pf_open+0x62>
    33a0:	79 01       	movw	r14, r18
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:690
	dj->sclust = 0;						/* Set start directory (always root dir) */
    33a2:	1d a2       	std	Y+37, r1	; 0x25
    33a4:	1e a2       	std	Y+38, r1	; 0x26
    33a6:	1f a2       	std	Y+39, r1	; 0x27
    33a8:	18 a6       	std	Y+40, r1	; 0x28
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:692

	if ((BYTE)*path < ' ') {			/* Null path means the root directory */
    33aa:	f7 01       	movw	r30, r14
    33ac:	80 81       	ld	r24, Z
mem_set():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:330

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    33ae:	a0 e2       	ldi	r26, 0x20	; 32
    33b0:	ba 2e       	mov	r11, r26
follow_path():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:692

	while (*path == ' ') path++;		/* Strip leading spaces */
	if (*path == '/') path++;			/* Strip heading separator if exist */
	dj->sclust = 0;						/* Set start directory (always root dir) */

	if ((BYTE)*path < ' ') {			/* Null path means the root directory */
    33b2:	80 32       	cpi	r24, 0x20	; 32
    33b4:	08 f0       	brcs	.+2      	; 0x33b8 <pf_open+0x78>
    33b6:	dd c0       	rjmp	.+442    	; 0x3572 <pf_open+0x232>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:693
		res = dir_rewind(dj);
    33b8:	ce 01       	movw	r24, r28
    33ba:	81 96       	adiw	r24, 0x21	; 33
    33bc:	0e 94 94 17 	call	0x2f28	; 0x2f28 <dir_rewind(DIR*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:694
		dir[0] = 0;
    33c0:	19 82       	std	Y+1, r1	; 0x01
pf_open():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:844
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */

	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
    33c2:	00 97       	sbiw	r24, 0x00	; 0
    33c4:	09 f4       	brne	.+2      	; 0x33c8 <pf_open+0x88>
    33c6:	10 c1       	rjmp	.+544    	; 0x35e8 <pf_open+0x2a8>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:854
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
	fs->fptr = 0;						/* File pointer */
	fs->flag = FA_OPENED;

	return FR_OK;
}
    33c8:	ec 96       	adiw	r28, 0x3c	; 60
    33ca:	0f b6       	in	r0, 0x3f	; 63
    33cc:	f8 94       	cli
    33ce:	de bf       	out	0x3e, r29	; 62
    33d0:	0f be       	out	0x3f, r0	; 63
    33d2:	cd bf       	out	0x3d, r28	; 61
    33d4:	df 91       	pop	r29
    33d6:	cf 91       	pop	r28
    33d8:	1f 91       	pop	r17
    33da:	0f 91       	pop	r16
    33dc:	ff 90       	pop	r15
    33de:	ef 90       	pop	r14
    33e0:	df 90       	pop	r13
    33e2:	cf 90       	pop	r12
    33e4:	bf 90       	pop	r11
    33e6:	9f 90       	pop	r9
    33e8:	8f 90       	pop	r8
    33ea:	7f 90       	pop	r7
    33ec:	6f 90       	pop	r6
    33ee:	5f 90       	pop	r5
    33f0:	4f 90       	pop	r4
    33f2:	08 95       	ret
create_name():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:596
#endif

	/* Create file name in directory form */
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
    33f4:	20 e0       	ldi	r18, 0x00	; 0
    33f6:	e0 e0       	ldi	r30, 0x00	; 0
    33f8:	88 e0       	ldi	r24, 0x08	; 8
    33fa:	d8 c0       	rjmp	.+432    	; 0x35ac <pf_open+0x26c>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:622
		{						/* Single byte code */
			if (_USE_LCC && IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    33fc:	e3 0e       	add	r14, r19
    33fe:	f1 1c       	adc	r15, r1
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:624

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    3400:	81 e0       	ldi	r24, 0x01	; 1
    3402:	91 32       	cpi	r25, 0x21	; 33
    3404:	08 f0       	brcs	.+2      	; 0x3408 <pf_open+0xc8>
    3406:	80 e0       	ldi	r24, 0x00	; 0
    3408:	1b 96       	adiw	r26, 0x0b	; 11
    340a:	8c 93       	st	X, r24
dir_find():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:518
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
    340c:	ce 01       	movw	r24, r28
    340e:	81 96       	adiw	r24, 0x21	; 33
    3410:	0e 94 94 17 	call	0x2f28	; 0x2f28 <dir_rewind(DIR*)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:519
	if (res != FR_OK) return res;
    3414:	00 97       	sbiw	r24, 0x00	; 0
    3416:	c1 f6       	brne	.-80     	; 0x33c8 <pf_open+0x88>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:522

	do {
		res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)	/* Read an entry */
    3418:	29 a1       	ldd	r18, Y+33	; 0x21
    341a:	3a a1       	ldd	r19, Y+34	; 0x22
    341c:	2f 70       	andi	r18, 0x0F	; 15
    341e:	33 27       	eor	r19, r19
    3420:	f5 e0       	ldi	r31, 0x05	; 5
    3422:	22 0f       	add	r18, r18
    3424:	33 1f       	adc	r19, r19
    3426:	fa 95       	dec	r31
    3428:	e1 f7       	brne	.-8      	; 0x3422 <pf_open+0xe2>
    342a:	4d a5       	ldd	r20, Y+45	; 0x2d
    342c:	5e a5       	ldd	r21, Y+46	; 0x2e
    342e:	6f a5       	ldd	r22, Y+47	; 0x2f
    3430:	78 a9       	ldd	r23, Y+48	; 0x30
    3432:	00 e2       	ldi	r16, 0x20	; 32
    3434:	10 e0       	ldi	r17, 0x00	; 0
    3436:	ce 01       	movw	r24, r28
    3438:	01 96       	adiw	r24, 0x01	; 1
    343a:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <disk_readp>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:523
			? FR_DISK_ERR : FR_OK;
    343e:	89 2b       	or	r24, r25
    3440:	19 f0       	breq	.+6      	; 0x3448 <pf_open+0x108>
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	c0 cf       	rjmp	.-128    	; 0x33c8 <pf_open+0x88>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:526
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    3448:	89 81       	ldd	r24, Y+1	; 0x01
    344a:	81 11       	cpse	r24, r1
    344c:	03 c0       	rjmp	.+6      	; 0x3454 <pf_open+0x114>
    344e:	83 e0       	ldi	r24, 0x03	; 3
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	ba cf       	rjmp	.-140    	; 0x33c8 <pf_open+0x88>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:527
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    3454:	8c 85       	ldd	r24, Y+12	; 0x0c
    3456:	83 fd       	sbrc	r24, 3
    3458:	13 c0       	rjmp	.+38     	; 0x3480 <pf_open+0x140>
    345a:	0b a1       	ldd	r16, Y+35	; 0x23
    345c:	1c a1       	ldd	r17, Y+36	; 0x24
    345e:	9e 01       	movw	r18, r28
    3460:	2f 5f       	subi	r18, 0xFF	; 255
    3462:	3f 4f       	sbci	r19, 0xFF	; 255
    3464:	d8 01       	movw	r26, r16
    3466:	b8 01       	movw	r22, r16
    3468:	65 5f       	subi	r22, 0xF5	; 245
    346a:	7f 4f       	sbci	r23, 0xFF	; 255
mem_cmp():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:338
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    346c:	6a 17       	cp	r22, r26
    346e:	7b 07       	cpc	r23, r27
    3470:	09 f4       	brne	.+2      	; 0x3474 <pf_open+0x134>
    3472:	b5 c0       	rjmp	.+362    	; 0x35de <pf_open+0x29e>
    3474:	f9 01       	movw	r30, r18
    3476:	41 91       	ld	r20, Z+
    3478:	9f 01       	movw	r18, r30
    347a:	9d 91       	ld	r25, X+
    347c:	49 17       	cp	r20, r25
    347e:	b1 f3       	breq	.-20     	; 0x346c <pf_open+0x12c>
dir_next():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:473
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;


	i = dj->index + 1;
    3480:	09 a1       	ldd	r16, Y+33	; 0x21
    3482:	1a a1       	ldd	r17, Y+34	; 0x22
    3484:	0f 5f       	subi	r16, 0xFF	; 255
    3486:	1f 4f       	sbci	r17, 0xFF	; 255
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:474
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    3488:	11 f3       	breq	.-60     	; 0x344e <pf_open+0x10e>
    348a:	8d a5       	ldd	r24, Y+45	; 0x2d
    348c:	9e a5       	ldd	r25, Y+46	; 0x2e
    348e:	af a5       	ldd	r26, Y+47	; 0x2f
    3490:	b8 a9       	ldd	r27, Y+48	; 0x30
    3492:	00 97       	sbiw	r24, 0x00	; 0
    3494:	a1 05       	cpc	r26, r1
    3496:	b1 05       	cpc	r27, r1
    3498:	d1 f2       	breq	.-76     	; 0x344e <pf_open+0x10e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:477
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
    349a:	98 01       	movw	r18, r16
    349c:	2f 70       	andi	r18, 0x0F	; 15
    349e:	33 27       	eor	r19, r19
    34a0:	23 2b       	or	r18, r19
    34a2:	d9 f4       	brne	.+54     	; 0x34da <pf_open+0x19a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:470
	DIR *dj			/* Pointer to directory object */
)
{
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
    34a4:	80 90 e4 01 	lds	r8, 0x01E4	; 0x8001e4 <FatFs>
    34a8:	90 90 e5 01 	lds	r9, 0x01E5	; 0x8001e5 <FatFs+0x1>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:478
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
		dj->sect++;			/* Next sector */
    34ac:	01 96       	adiw	r24, 0x01	; 1
    34ae:	a1 1d       	adc	r26, r1
    34b0:	b1 1d       	adc	r27, r1
    34b2:	8d a7       	std	Y+45, r24	; 0x2d
    34b4:	9e a7       	std	Y+46, r25	; 0x2e
    34b6:	af a7       	std	Y+47, r26	; 0x2f
    34b8:	b8 ab       	std	Y+48, r27	; 0x30
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:480

		if (dj->clust == 0) {	/* Static table */
    34ba:	69 a5       	ldd	r22, Y+41	; 0x29
    34bc:	7a a5       	ldd	r23, Y+42	; 0x2a
    34be:	8b a5       	ldd	r24, Y+43	; 0x2b
    34c0:	9c a5       	ldd	r25, Y+44	; 0x2c
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:481
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
    34c2:	f4 01       	movw	r30, r8
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:480
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
		dj->sect++;			/* Next sector */

		if (dj->clust == 0) {	/* Static table */
    34c4:	61 15       	cp	r22, r1
    34c6:	71 05       	cpc	r23, r1
    34c8:	81 05       	cpc	r24, r1
    34ca:	91 05       	cpc	r25, r1
    34cc:	49 f4       	brne	.+18     	; 0x34e0 <pf_open+0x1a0>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:481
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
    34ce:	84 81       	ldd	r24, Z+4	; 0x04
    34d0:	95 81       	ldd	r25, Z+5	; 0x05
    34d2:	08 17       	cp	r16, r24
    34d4:	19 07       	cpc	r17, r25
    34d6:	08 f0       	brcs	.+2      	; 0x34da <pf_open+0x19a>
    34d8:	ba cf       	rjmp	.-140    	; 0x344e <pf_open+0x10e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:496
				dj->sect = clust2sect(clst);
			}
		}
	}

	dj->index = i;
    34da:	1a a3       	std	Y+34, r17	; 0x22
    34dc:	09 a3       	std	Y+33, r16	; 0x21
    34de:	9c cf       	rjmp	.-200    	; 0x3418 <pf_open+0xd8>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:485
		if (dj->clust == 0) {	/* Static table */
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
    34e0:	22 81       	ldd	r18, Z+2	; 0x02
    34e2:	e2 2f       	mov	r30, r18
    34e4:	e1 50       	subi	r30, 0x01	; 1
    34e6:	ff 0b       	sbc	r31, r31
    34e8:	af 01       	movw	r20, r30
    34ea:	98 01       	movw	r18, r16
    34ec:	e4 e0       	ldi	r30, 0x04	; 4
    34ee:	36 95       	lsr	r19
    34f0:	27 95       	ror	r18
    34f2:	ea 95       	dec	r30
    34f4:	e1 f7       	brne	.-8      	; 0x34ee <pf_open+0x1ae>
    34f6:	24 23       	and	r18, r20
    34f8:	35 23       	and	r19, r21
    34fa:	23 2b       	or	r18, r19
    34fc:	71 f7       	brne	.-36     	; 0x34da <pf_open+0x19a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:486
				clst = get_fat(dj->clust);		/* Get next cluster */
    34fe:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <get_fat(unsigned long)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:487
				if (clst <= 1) return FR_DISK_ERR;
    3502:	62 30       	cpi	r22, 0x02	; 2
    3504:	71 05       	cpc	r23, r1
    3506:	81 05       	cpc	r24, r1
    3508:	91 05       	cpc	r25, r1
    350a:	08 f4       	brcc	.+2      	; 0x350e <pf_open+0x1ce>
    350c:	9a cf       	rjmp	.-204    	; 0x3442 <pf_open+0x102>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:488
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
    350e:	f4 01       	movw	r30, r8
    3510:	46 80       	ldd	r4, Z+6	; 0x06
    3512:	57 80       	ldd	r5, Z+7	; 0x07
    3514:	60 84       	ldd	r6, Z+8	; 0x08
    3516:	71 84       	ldd	r7, Z+9	; 0x09
    3518:	64 15       	cp	r22, r4
    351a:	75 05       	cpc	r23, r5
    351c:	86 05       	cpc	r24, r6
    351e:	97 05       	cpc	r25, r7
    3520:	08 f0       	brcs	.+2      	; 0x3524 <pf_open+0x1e4>
    3522:	95 cf       	rjmp	.-214    	; 0x344e <pf_open+0x10e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:490
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
    3524:	69 a7       	std	Y+41, r22	; 0x29
    3526:	7a a7       	std	Y+42, r23	; 0x2a
    3528:	8b a7       	std	Y+43, r24	; 0x2b
    352a:	9c a7       	std	Y+44, r25	; 0x2c
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:491
				dj->sect = clust2sect(clst);
    352c:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <clust2sect(unsigned long)>
    3530:	6d a7       	std	Y+45, r22	; 0x2d
    3532:	7e a7       	std	Y+46, r23	; 0x2e
    3534:	8f a7       	std	Y+47, r24	; 0x2f
    3536:	98 ab       	std	Y+48, r25	; 0x30
    3538:	d0 cf       	rjmp	.-96     	; 0x34da <pf_open+0x19a>
follow_path():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:703
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
    353a:	84 ff       	sbrs	r24, 4
    353c:	88 cf       	rjmp	.-240    	; 0x344e <pf_open+0x10e>
get_clust():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:421
{
	FATFS *fs = FatFs;
	CLUST clst = 0;


	if (_FS_32ONLY || (_FS_FAT32 && fs->fs_type == FS_FAT32)) {
    353e:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <FatFs>
    3542:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <FatFs+0x1>
    3546:	80 81       	ld	r24, Z
    3548:	83 30       	cpi	r24, 0x03	; 3
    354a:	f1 f4       	brne	.+60     	; 0x3588 <pf_open+0x248>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:422
		clst = LD_WORD(dir+DIR_FstClusHI);
    354c:	8d 89       	ldd	r24, Y+21	; 0x15
    354e:	9e 89       	ldd	r25, Y+22	; 0x16
    3550:	b0 e0       	ldi	r27, 0x00	; 0
    3552:	a0 e0       	ldi	r26, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:423
		clst <<= 16;
    3554:	dc 01       	movw	r26, r24
    3556:	99 27       	eor	r25, r25
    3558:	88 27       	eor	r24, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:425
	}
	clst |= LD_WORD(dir+DIR_FstClusLO);
    355a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    355c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    355e:	70 e0       	ldi	r23, 0x00	; 0
    3560:	60 e0       	ldi	r22, 0x00	; 0
    3562:	84 2b       	or	r24, r20
    3564:	95 2b       	or	r25, r21
    3566:	a6 2b       	or	r26, r22
    3568:	b7 2b       	or	r27, r23
follow_path():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:706
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow path because it is a file */
				res = FR_NO_FILE; break;
			}
			dj->sclust = get_clust(dir);	/* Follow next */
    356a:	8d a3       	std	Y+37, r24	; 0x25
    356c:	9e a3       	std	Y+38, r25	; 0x26
    356e:	af a3       	std	Y+39, r26	; 0x27
    3570:	b8 a7       	std	Y+40, r27	; 0x28
    3572:	ab a1       	ldd	r26, Y+35	; 0x23
    3574:	bc a1       	ldd	r27, Y+36	; 0x24
    3576:	fd 01       	movw	r30, r26
    3578:	cd 01       	movw	r24, r26
    357a:	0b 96       	adiw	r24, 0x0b	; 11
mem_set():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:330

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    357c:	8e 17       	cp	r24, r30
    357e:	9f 07       	cpc	r25, r31
    3580:	09 f4       	brne	.+2      	; 0x3584 <pf_open+0x244>
    3582:	38 cf       	rjmp	.-400    	; 0x33f4 <pf_open+0xb4>
    3584:	b1 92       	st	Z+, r11
    3586:	fa cf       	rjmp	.-12     	; 0x357c <pf_open+0x23c>
get_clust():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:418
CLUST get_clust (
	BYTE* dir		/* Pointer to directory entry */
)
{
	FATFS *fs = FatFs;
	CLUST clst = 0;
    3588:	80 e0       	ldi	r24, 0x00	; 0
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	dc 01       	movw	r26, r24
    358e:	e5 cf       	rjmp	.-54     	; 0x355a <pf_open+0x21a>
    3590:	80 e0       	ldi	r24, 0x00	; 0
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	dc 01       	movw	r26, r24
    3596:	3d c0       	rjmp	.+122    	; 0x3612 <pf_open+0x2d2>
pf_open():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:839
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    3598:	85 e0       	ldi	r24, 0x05	; 5
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	15 cf       	rjmp	.-470    	; 0x33c8 <pf_open+0x88>
create_name():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:602
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
    359e:	88 30       	cpi	r24, 0x08	; 8
    35a0:	09 f0       	breq	.+2      	; 0x35a4 <pf_open+0x264>
    35a2:	2c cf       	rjmp	.-424    	; 0x33fc <pf_open+0xbc>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:603
			i = 8; ni = 11;
    35a4:	9b e0       	ldi	r25, 0x0B	; 11
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:599
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
    35a6:	28 2f       	mov	r18, r24
    35a8:	e3 2f       	mov	r30, r19
    35aa:	89 2f       	mov	r24, r25
    35ac:	31 e0       	ldi	r19, 0x01	; 1
    35ae:	3e 0f       	add	r19, r30
    35b0:	ee 0d       	add	r30, r14
    35b2:	ff 2d       	mov	r31, r15
    35b4:	f1 1d       	adc	r31, r1
    35b6:	90 81       	ld	r25, Z
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:600
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
    35b8:	91 32       	cpi	r25, 0x21	; 33
    35ba:	08 f4       	brcc	.+2      	; 0x35be <pf_open+0x27e>
    35bc:	1f cf       	rjmp	.-450    	; 0x33fc <pf_open+0xbc>
    35be:	9f 32       	cpi	r25, 0x2F	; 47
    35c0:	09 f4       	brne	.+2      	; 0x35c4 <pf_open+0x284>
    35c2:	1c cf       	rjmp	.-456    	; 0x33fc <pf_open+0xbc>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:601
		if (c == '.' || i >= ni) {
    35c4:	9e 32       	cpi	r25, 0x2E	; 46
    35c6:	59 f3       	breq	.-42     	; 0x359e <pf_open+0x25e>
    35c8:	28 17       	cp	r18, r24
    35ca:	08 f0       	brcs	.+2      	; 0x35ce <pf_open+0x28e>
    35cc:	17 cf       	rjmp	.-466    	; 0x33fc <pf_open+0xbc>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:619
			sfn[i++] = d;
		} else
#endif
		{						/* Single byte code */
			if (_USE_LCC && IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
    35ce:	fd 01       	movw	r30, r26
    35d0:	e2 0f       	add	r30, r18
    35d2:	f1 1d       	adc	r31, r1
    35d4:	90 83       	st	Z, r25
    35d6:	98 2f       	mov	r25, r24
    35d8:	81 e0       	ldi	r24, 0x01	; 1
    35da:	82 0f       	add	r24, r18
    35dc:	e4 cf       	rjmp	.-56     	; 0x35a6 <pf_open+0x266>
follow_path():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:702
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) break;		/* Could not find the object */
			if (dj->fn[11]) break;			/* Last segment match. Function completed. */
    35de:	f8 01       	movw	r30, r16
    35e0:	93 85       	ldd	r25, Z+11	; 0x0b
    35e2:	99 23       	and	r25, r25
    35e4:	09 f4       	brne	.+2      	; 0x35e8 <pf_open+0x2a8>
    35e6:	a9 cf       	rjmp	.-174    	; 0x353a <pf_open+0x1fa>
pf_open():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:845

	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    35e8:	89 81       	ldd	r24, Y+1	; 0x01
    35ea:	88 23       	and	r24, r24
    35ec:	09 f4       	brne	.+2      	; 0x35f0 <pf_open+0x2b0>
    35ee:	2f cf       	rjmp	.-418    	; 0x344e <pf_open+0x10e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:845 (discriminator 1)
    35f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    35f2:	84 fd       	sbrc	r24, 4
    35f4:	2c cf       	rjmp	.-424    	; 0x344e <pf_open+0x10e>
get_clust():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:421
{
	FATFS *fs = FatFs;
	CLUST clst = 0;


	if (_FS_32ONLY || (_FS_FAT32 && fs->fs_type == FS_FAT32)) {
    35f6:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <FatFs>
    35fa:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <FatFs+0x1>
    35fe:	80 81       	ld	r24, Z
    3600:	83 30       	cpi	r24, 0x03	; 3
    3602:	31 f6       	brne	.-116    	; 0x3590 <pf_open+0x250>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:422
		clst = LD_WORD(dir+DIR_FstClusHI);
    3604:	8d 89       	ldd	r24, Y+21	; 0x15
    3606:	9e 89       	ldd	r25, Y+22	; 0x16
    3608:	b0 e0       	ldi	r27, 0x00	; 0
    360a:	a0 e0       	ldi	r26, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:423
		clst <<= 16;
    360c:	dc 01       	movw	r26, r24
    360e:	99 27       	eor	r25, r25
    3610:	88 27       	eor	r24, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:425
	}
	clst |= LD_WORD(dir+DIR_FstClusLO);
    3612:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3614:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3616:	70 e0       	ldi	r23, 0x00	; 0
    3618:	60 e0       	ldi	r22, 0x00	; 0
    361a:	84 2b       	or	r24, r20
    361c:	95 2b       	or	r25, r21
    361e:	a6 2b       	or	r26, r22
    3620:	b7 2b       	or	r27, r23
pf_open():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:848
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
		return FR_NO_FILE;

	fs->org_clust = get_clust(dir);		/* File start cluster */
    3622:	f6 01       	movw	r30, r12
    3624:	86 8f       	std	Z+30, r24	; 0x1e
    3626:	97 8f       	std	Z+31, r25	; 0x1f
    3628:	a0 a3       	std	Z+32, r26	; 0x20
    362a:	b1 a3       	std	Z+33, r27	; 0x21
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:849
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    362c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    362e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3630:	af 8d       	ldd	r26, Y+31	; 0x1f
    3632:	b8 a1       	ldd	r27, Y+32	; 0x20
    3634:	82 8f       	std	Z+26, r24	; 0x1a
    3636:	93 8f       	std	Z+27, r25	; 0x1b
    3638:	a4 8f       	std	Z+28, r26	; 0x1c
    363a:	b5 8f       	std	Z+29, r27	; 0x1d
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:850
	fs->fptr = 0;						/* File pointer */
    363c:	16 8a       	std	Z+22, r1	; 0x16
    363e:	17 8a       	std	Z+23, r1	; 0x17
    3640:	10 8e       	std	Z+24, r1	; 0x18
    3642:	11 8e       	std	Z+25, r1	; 0x19
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:851
	fs->flag = FA_OPENED;
    3644:	81 e0       	ldi	r24, 0x01	; 1
    3646:	81 83       	std	Z+1, r24	; 0x01
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:853

	return FR_OK;
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	80 e0       	ldi	r24, 0x00	; 0
    364c:	bd ce       	rjmp	.-646    	; 0x33c8 <pf_open+0x88>

0000364e <pf_read>:
pf_read():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:869
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
    364e:	4f 92       	push	r4
    3650:	5f 92       	push	r5
    3652:	6f 92       	push	r6
    3654:	7f 92       	push	r7
    3656:	8f 92       	push	r8
    3658:	9f 92       	push	r9
    365a:	af 92       	push	r10
    365c:	bf 92       	push	r11
    365e:	cf 92       	push	r12
    3660:	df 92       	push	r13
    3662:	ef 92       	push	r14
    3664:	ff 92       	push	r15
    3666:	0f 93       	push	r16
    3668:	1f 93       	push	r17
    366a:	cf 93       	push	r28
    366c:	df 93       	push	r29
    366e:	4c 01       	movw	r8, r24
    3670:	7b 01       	movw	r14, r22
    3672:	3a 01       	movw	r6, r20
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:875
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	UINT rcnt;
	BYTE cs, *rbuff = (BYTE*)buff;  // whg
	FATFS *fs = FatFs;
    3674:	c0 91 e4 01 	lds	r28, 0x01E4	; 0x8001e4 <FatFs>
    3678:	d0 91 e5 01 	lds	r29, 0x01E5	; 0x8001e5 <FatFs+0x1>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:878


	*br = 0;
    367c:	fa 01       	movw	r30, r20
    367e:	11 82       	std	Z+1, r1	; 0x01
    3680:	10 82       	st	Z, r1
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:879
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    3682:	85 e0       	ldi	r24, 0x05	; 5
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	20 97       	sbiw	r28, 0x00	; 0
    3688:	09 f4       	brne	.+2      	; 0x368c <pf_read+0x3e>
    368a:	4b c0       	rjmp	.+150    	; 0x3722 <pf_read+0xd4>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:880
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    368c:	89 81       	ldd	r24, Y+1	; 0x01
    368e:	80 ff       	sbrs	r24, 0
    3690:	aa c0       	rjmp	.+340    	; 0x37e6 <pf_read+0x198>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:883
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
    3692:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3694:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3696:	ac 8d       	ldd	r26, Y+28	; 0x1c
    3698:	bd 8d       	ldd	r27, Y+29	; 0x1d
    369a:	4e 89       	ldd	r20, Y+22	; 0x16
    369c:	5f 89       	ldd	r21, Y+23	; 0x17
    369e:	68 8d       	ldd	r22, Y+24	; 0x18
    36a0:	79 8d       	ldd	r23, Y+25	; 0x19
    36a2:	84 1b       	sub	r24, r20
    36a4:	95 0b       	sbc	r25, r21
    36a6:	a6 0b       	sbc	r26, r22
    36a8:	b7 0b       	sbc	r27, r23
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:884
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
    36aa:	a7 01       	movw	r20, r14
    36ac:	70 e0       	ldi	r23, 0x00	; 0
    36ae:	60 e0       	ldi	r22, 0x00	; 0
    36b0:	84 17       	cp	r24, r20
    36b2:	95 07       	cpc	r25, r21
    36b4:	a6 07       	cpc	r26, r22
    36b6:	b7 07       	cpc	r27, r23
    36b8:	08 f4       	brcc	.+2      	; 0x36bc <pf_read+0x6e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:884 (discriminator 1)
    36ba:	7c 01       	movw	r14, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:869
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
    36bc:	54 01       	movw	r10, r8
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:901
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) ABORT(FR_DISK_ERR);
			fs->dsect = sect + cs;
		}
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
    36be:	41 2c       	mov	r4, r1
    36c0:	32 e0       	ldi	r19, 0x02	; 2
    36c2:	53 2e       	mov	r5, r19
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:886
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    36c4:	e1 14       	cp	r14, r1
    36c6:	f1 04       	cpc	r15, r1
    36c8:	09 f4       	brne	.+2      	; 0x36cc <pf_read+0x7e>
    36ca:	90 c0       	rjmp	.+288    	; 0x37ec <pf_read+0x19e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:887
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    36cc:	8e 89       	ldd	r24, Y+22	; 0x16
    36ce:	9f 89       	ldd	r25, Y+23	; 0x17
    36d0:	a8 8d       	ldd	r26, Y+24	; 0x18
    36d2:	b9 8d       	ldd	r27, Y+25	; 0x19
    36d4:	ac 01       	movw	r20, r24
    36d6:	bd 01       	movw	r22, r26
    36d8:	51 70       	andi	r21, 0x01	; 1
    36da:	66 27       	eor	r22, r22
    36dc:	77 27       	eor	r23, r23
    36de:	45 2b       	or	r20, r21
    36e0:	46 2b       	or	r20, r22
    36e2:	47 2b       	or	r20, r23
    36e4:	09 f0       	breq	.+2      	; 0x36e8 <pf_read+0x9a>
    36e6:	4c c0       	rjmp	.+152    	; 0x3780 <pf_read+0x132>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:888
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    36e8:	da 80       	ldd	r13, Y+2	; 0x02
    36ea:	da 94       	dec	r13
    36ec:	ac 01       	movw	r20, r24
    36ee:	bd 01       	movw	r22, r26
    36f0:	29 e0       	ldi	r18, 0x09	; 9
    36f2:	76 95       	lsr	r23
    36f4:	67 95       	ror	r22
    36f6:	57 95       	ror	r21
    36f8:	47 95       	ror	r20
    36fa:	2a 95       	dec	r18
    36fc:	d1 f7       	brne	.-12     	; 0x36f2 <pf_read+0xa4>
    36fe:	d4 22       	and	r13, r20
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:889
			if (!cs) {								/* On the cluster boundary? */
    3700:	61 f5       	brne	.+88     	; 0x375a <pf_read+0x10c>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:890
				if (fs->fptr == 0)					/* On the top of the file? */
    3702:	89 2b       	or	r24, r25
    3704:	8a 2b       	or	r24, r26
    3706:	8b 2b       	or	r24, r27
    3708:	e9 f4       	brne	.+58     	; 0x3744 <pf_read+0xf6>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:891
					clst = fs->org_clust;
    370a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    370c:	7f 8d       	ldd	r23, Y+31	; 0x1f
    370e:	88 a1       	ldd	r24, Y+32	; 0x20
    3710:	99 a1       	ldd	r25, Y+33	; 0x21
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:894
				else
					clst = get_fat(fs->curr_clust);
				if (clst <= 1) ABORT(FR_DISK_ERR);
    3712:	62 30       	cpi	r22, 0x02	; 2
    3714:	71 05       	cpc	r23, r1
    3716:	81 05       	cpc	r24, r1
    3718:	91 05       	cpc	r25, r1
    371a:	d8 f4       	brcc	.+54     	; 0x3752 <pf_read+0x104>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:904 (discriminator 1)
			fs->dsect = sect + cs;
		}
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
		if (dr) ABORT(FR_DISK_ERR);
    371c:	19 82       	std	Y+1, r1	; 0x01
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	90 e0       	ldi	r25, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:910
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
		btr -= rcnt; *br += rcnt;
	}

	return FR_OK;
}
    3722:	df 91       	pop	r29
    3724:	cf 91       	pop	r28
    3726:	1f 91       	pop	r17
    3728:	0f 91       	pop	r16
    372a:	ff 90       	pop	r15
    372c:	ef 90       	pop	r14
    372e:	df 90       	pop	r13
    3730:	cf 90       	pop	r12
    3732:	bf 90       	pop	r11
    3734:	af 90       	pop	r10
    3736:	9f 90       	pop	r9
    3738:	8f 90       	pop	r8
    373a:	7f 90       	pop	r7
    373c:	6f 90       	pop	r6
    373e:	5f 90       	pop	r5
    3740:	4f 90       	pop	r4
    3742:	08 95       	ret
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:893
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
			if (!cs) {								/* On the cluster boundary? */
				if (fs->fptr == 0)					/* On the top of the file? */
					clst = fs->org_clust;
				else
					clst = get_fat(fs->curr_clust);
    3744:	6a a1       	ldd	r22, Y+34	; 0x22
    3746:	7b a1       	ldd	r23, Y+35	; 0x23
    3748:	8c a1       	ldd	r24, Y+36	; 0x24
    374a:	9d a1       	ldd	r25, Y+37	; 0x25
    374c:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <get_fat(unsigned long)>
    3750:	e0 cf       	rjmp	.-64     	; 0x3712 <pf_read+0xc4>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:895
				if (clst <= 1) ABORT(FR_DISK_ERR);
				fs->curr_clust = clst;				/* Update current cluster */
    3752:	6a a3       	std	Y+34, r22	; 0x22
    3754:	7b a3       	std	Y+35, r23	; 0x23
    3756:	8c a3       	std	Y+36, r24	; 0x24
    3758:	9d a3       	std	Y+37, r25	; 0x25
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:897
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
    375a:	6a a1       	ldd	r22, Y+34	; 0x22
    375c:	7b a1       	ldd	r23, Y+35	; 0x23
    375e:	8c a1       	ldd	r24, Y+36	; 0x24
    3760:	9d a1       	ldd	r25, Y+37	; 0x25
    3762:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <clust2sect(unsigned long)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:898
			if (!sect) ABORT(FR_DISK_ERR);
    3766:	61 15       	cp	r22, r1
    3768:	71 05       	cpc	r23, r1
    376a:	81 05       	cpc	r24, r1
    376c:	91 05       	cpc	r25, r1
    376e:	b1 f2       	breq	.-84     	; 0x371c <pf_read+0xce>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:899
			fs->dsect = sect + cs;
    3770:	6d 0d       	add	r22, r13
    3772:	71 1d       	adc	r23, r1
    3774:	81 1d       	adc	r24, r1
    3776:	91 1d       	adc	r25, r1
    3778:	6e a3       	std	Y+38, r22	; 0x26
    377a:	7f a3       	std	Y+39, r23	; 0x27
    377c:	88 a7       	std	Y+40, r24	; 0x28
    377e:	99 a7       	std	Y+41, r25	; 0x29
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:901
		}
		rcnt = 512 - (UINT)fs->fptr % 512;			/* Get partial sector data from sector buffer */
    3780:	2e 89       	ldd	r18, Y+22	; 0x16
    3782:	3f 89       	ldd	r19, Y+23	; 0x17
    3784:	31 70       	andi	r19, 0x01	; 1
    3786:	c2 01       	movw	r24, r4
    3788:	82 1b       	sub	r24, r18
    378a:	93 0b       	sbc	r25, r19
    378c:	67 01       	movw	r12, r14
    378e:	8e 15       	cp	r24, r14
    3790:	9f 05       	cpc	r25, r15
    3792:	08 f4       	brcc	.+2      	; 0x3796 <pf_read+0x148>
    3794:	6c 01       	movw	r12, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:903
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
    3796:	4e a1       	ldd	r20, Y+38	; 0x26
    3798:	5f a1       	ldd	r21, Y+39	; 0x27
    379a:	68 a5       	ldd	r22, Y+40	; 0x28
    379c:	79 a5       	ldd	r23, Y+41	; 0x29
    379e:	c5 01       	movw	r24, r10
    37a0:	81 14       	cp	r8, r1
    37a2:	91 04       	cpc	r9, r1
    37a4:	11 f4       	brne	.+4      	; 0x37aa <pf_read+0x15c>
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    37a8:	90 e0       	ldi	r25, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:903 (discriminator 4)
    37aa:	86 01       	movw	r16, r12
    37ac:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <disk_readp>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:904 (discriminator 4)
		if (dr) ABORT(FR_DISK_ERR);
    37b0:	89 2b       	or	r24, r25
    37b2:	09 f0       	breq	.+2      	; 0x37b6 <pf_read+0x168>
    37b4:	b3 cf       	rjmp	.-154    	; 0x371c <pf_read+0xce>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:905
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
    37b6:	8e 89       	ldd	r24, Y+22	; 0x16
    37b8:	9f 89       	ldd	r25, Y+23	; 0x17
    37ba:	a8 8d       	ldd	r26, Y+24	; 0x18
    37bc:	b9 8d       	ldd	r27, Y+25	; 0x19
    37be:	8c 0d       	add	r24, r12
    37c0:	9d 1d       	adc	r25, r13
    37c2:	a1 1d       	adc	r26, r1
    37c4:	b1 1d       	adc	r27, r1
    37c6:	8e 8b       	std	Y+22, r24	; 0x16
    37c8:	9f 8b       	std	Y+23, r25	; 0x17
    37ca:	a8 8f       	std	Y+24, r26	; 0x18
    37cc:	b9 8f       	std	Y+25, r27	; 0x19
    37ce:	ac 0c       	add	r10, r12
    37d0:	bd 1c       	adc	r11, r13
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:906
		btr -= rcnt; *br += rcnt;
    37d2:	ec 18       	sub	r14, r12
    37d4:	fd 08       	sbc	r15, r13
    37d6:	f3 01       	movw	r30, r6
    37d8:	80 81       	ld	r24, Z
    37da:	91 81       	ldd	r25, Z+1	; 0x01
    37dc:	c8 0e       	add	r12, r24
    37de:	d9 1e       	adc	r13, r25
    37e0:	d1 82       	std	Z+1, r13	; 0x01
    37e2:	c0 82       	st	Z, r12
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:886
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    37e4:	6f cf       	rjmp	.-290    	; 0x36c4 <pf_read+0x76>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:881


	*br = 0;
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
		return FR_NOT_OPENED;
    37e6:	84 e0       	ldi	r24, 0x04	; 4
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	9b cf       	rjmp	.-202    	; 0x3722 <pf_read+0xd4>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:909
		if (dr) ABORT(FR_DISK_ERR);
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
		btr -= rcnt; *br += rcnt;
	}

	return FR_OK;
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	80 e0       	ldi	r24, 0x00	; 0
    37f0:	98 cf       	rjmp	.-208    	; 0x3722 <pf_read+0xd4>

000037f2 <pf_write>:
pf_write():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:925
FRESULT pf_write (
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write (0:Finalize the current write operation) */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    37f2:	4f 92       	push	r4
    37f4:	5f 92       	push	r5
    37f6:	6f 92       	push	r6
    37f8:	7f 92       	push	r7
    37fa:	8f 92       	push	r8
    37fc:	9f 92       	push	r9
    37fe:	af 92       	push	r10
    3800:	bf 92       	push	r11
    3802:	cf 92       	push	r12
    3804:	df 92       	push	r13
    3806:	ef 92       	push	r14
    3808:	ff 92       	push	r15
    380a:	0f 93       	push	r16
    380c:	1f 93       	push	r17
    380e:	cf 93       	push	r28
    3810:	df 93       	push	r29
    3812:	6c 01       	movw	r12, r24
    3814:	8b 01       	movw	r16, r22
    3816:	5a 01       	movw	r10, r20
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:931
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = (BYTE*)buff;  // whg
	BYTE cs;
	UINT wcnt;
	FATFS *fs = FatFs;
    3818:	c0 91 e4 01 	lds	r28, 0x01E4	; 0x8001e4 <FatFs>
    381c:	d0 91 e5 01 	lds	r29, 0x01E5	; 0x8001e5 <FatFs+0x1>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:934


	*bw = 0;
    3820:	fa 01       	movw	r30, r20
    3822:	11 82       	std	Z+1, r1	; 0x01
    3824:	10 82       	st	Z, r1
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:935
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    3826:	85 e0       	ldi	r24, 0x05	; 5
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	20 97       	sbiw	r28, 0x00	; 0
    382c:	a1 f0       	breq	.+40     	; 0x3856 <pf_write+0x64>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:936
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    382e:	89 81       	ldd	r24, Y+1	; 0x01
    3830:	80 ff       	sbrs	r24, 0
    3832:	e0 c0       	rjmp	.+448    	; 0x39f4 <pf_write+0x202>
    3834:	80 74       	andi	r24, 0x40	; 64
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:939
		return FR_NOT_OPENED;

	if (!btw) {		/* Finalize request */
    3836:	67 2b       	or	r22, r23
    3838:	29 f5       	brne	.+74     	; 0x3884 <pf_write+0x92>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:940
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) ABORT(FR_DISK_ERR);
    383a:	88 23       	and	r24, r24
    383c:	e9 f0       	breq	.+58     	; 0x3878 <pf_write+0x86>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:940 (discriminator 1)
    383e:	40 e0       	ldi	r20, 0x00	; 0
    3840:	50 e0       	ldi	r21, 0x00	; 0
    3842:	ba 01       	movw	r22, r20
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	80 e0       	ldi	r24, 0x00	; 0
    3848:	0e 94 13 17 	call	0x2e26	; 0x2e26 <disk_writep>
    384c:	89 2b       	or	r24, r25
    384e:	a1 f0       	breq	.+40     	; 0x3878 <pf_write+0x86>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:973 (discriminator 1)
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) ABORT(FR_DISK_ERR);	/* Send data to the sector */
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
		btw -= wcnt; *bw += wcnt;
		if ((UINT)fs->fptr % 512 == 0) {
			if (disk_writep(0, 0)) ABORT(FR_DISK_ERR);	/* Finalize the currtent secter write operation */
    3850:	19 82       	std	Y+1, r1	; 0x01
    3852:	81 e0       	ldi	r24, 0x01	; 1
    3854:	90 e0       	ldi	r25, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:979
			fs->flag &= ~FA__WIP;
		}
	}

	return FR_OK;
}
    3856:	df 91       	pop	r29
    3858:	cf 91       	pop	r28
    385a:	1f 91       	pop	r17
    385c:	0f 91       	pop	r16
    385e:	ff 90       	pop	r15
    3860:	ef 90       	pop	r14
    3862:	df 90       	pop	r13
    3864:	cf 90       	pop	r12
    3866:	bf 90       	pop	r11
    3868:	af 90       	pop	r10
    386a:	9f 90       	pop	r9
    386c:	8f 90       	pop	r8
    386e:	7f 90       	pop	r7
    3870:	6f 90       	pop	r6
    3872:	5f 90       	pop	r5
    3874:	4f 90       	pop	r4
    3876:	08 95       	ret
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:941
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
		return FR_NOT_OPENED;

	if (!btw) {		/* Finalize request */
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) ABORT(FR_DISK_ERR);
		fs->flag &= ~FA__WIP;
    3878:	89 81       	ldd	r24, Y+1	; 0x01
    387a:	8f 7b       	andi	r24, 0xBF	; 191
    387c:	89 83       	std	Y+1, r24	; 0x01
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:978
			if (disk_writep(0, 0)) ABORT(FR_DISK_ERR);	/* Finalize the currtent secter write operation */
			fs->flag &= ~FA__WIP;
		}
	}

	return FR_OK;
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	e9 cf       	rjmp	.-46     	; 0x3856 <pf_write+0x64>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:944
	if (!btw) {		/* Finalize request */
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) ABORT(FR_DISK_ERR);
		fs->flag &= ~FA__WIP;
		return FR_OK;
	} else {		/* Write data request */
		if (!(fs->flag & FA__WIP))		/* Round-down fptr to the sector boundary */
    3884:	81 11       	cpse	r24, r1
    3886:	0a c0       	rjmp	.+20     	; 0x389c <pf_write+0xaa>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:945
			fs->fptr &= 0xFFFFFE00;
    3888:	8e 89       	ldd	r24, Y+22	; 0x16
    388a:	9f 89       	ldd	r25, Y+23	; 0x17
    388c:	a8 8d       	ldd	r26, Y+24	; 0x18
    388e:	b9 8d       	ldd	r27, Y+25	; 0x19
    3890:	88 27       	eor	r24, r24
    3892:	9e 7f       	andi	r25, 0xFE	; 254
    3894:	8e 8b       	std	Y+22, r24	; 0x16
    3896:	9f 8b       	std	Y+23, r25	; 0x17
    3898:	a8 8f       	std	Y+24, r26	; 0x18
    389a:	b9 8f       	std	Y+25, r27	; 0x19
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:947
	}
	remain = fs->fsize - fs->fptr;
    389c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    389e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    38a0:	ac 8d       	ldd	r26, Y+28	; 0x1c
    38a2:	bd 8d       	ldd	r27, Y+29	; 0x1d
    38a4:	4e 89       	ldd	r20, Y+22	; 0x16
    38a6:	5f 89       	ldd	r21, Y+23	; 0x17
    38a8:	68 8d       	ldd	r22, Y+24	; 0x18
    38aa:	79 8d       	ldd	r23, Y+25	; 0x19
    38ac:	84 1b       	sub	r24, r20
    38ae:	95 0b       	sbc	r25, r21
    38b0:	a6 0b       	sbc	r26, r22
    38b2:	b7 0b       	sbc	r27, r23
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:948
	if (btw > remain) btw = (UINT)remain;			/* Truncate btw by remaining bytes */
    38b4:	a8 01       	movw	r20, r16
    38b6:	70 e0       	ldi	r23, 0x00	; 0
    38b8:	60 e0       	ldi	r22, 0x00	; 0
    38ba:	84 17       	cp	r24, r20
    38bc:	95 07       	cpc	r25, r21
    38be:	a6 07       	cpc	r26, r22
    38c0:	b7 07       	cpc	r27, r23
    38c2:	08 f4       	brcc	.+2      	; 0x38c6 <pf_write+0xd4>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:948 (discriminator 1)
    38c4:	8c 01       	movw	r16, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:967
			if (!sect) ABORT(FR_DISK_ERR);
			fs->dsect = sect + cs;
			if (disk_writep(0, fs->dsect)) ABORT(FR_DISK_ERR);	/* Initiate a sector write operation */
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - (UINT)fs->fptr % 512;			/* Number of bytes to write to the sector */
    38c6:	81 2c       	mov	r8, r1
    38c8:	32 e0       	ldi	r19, 0x02	; 2
    38ca:	93 2e       	mov	r9, r19
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:950
			fs->fptr &= 0xFFFFFE00;
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (UINT)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
    38cc:	01 15       	cp	r16, r1
    38ce:	11 05       	cpc	r17, r1
    38d0:	b1 f2       	breq	.-84     	; 0x387e <pf_write+0x8c>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:951
		if ((UINT)fs->fptr % 512 == 0) {			/* On the sector boundary? */
    38d2:	8e 89       	ldd	r24, Y+22	; 0x16
    38d4:	9f 89       	ldd	r25, Y+23	; 0x17
    38d6:	a8 8d       	ldd	r26, Y+24	; 0x18
    38d8:	b9 8d       	ldd	r27, Y+25	; 0x19
    38da:	9c 01       	movw	r18, r24
    38dc:	31 70       	andi	r19, 0x01	; 1
    38de:	23 2b       	or	r18, r19
    38e0:	09 f0       	breq	.+2      	; 0x38e4 <pf_write+0xf2>
    38e2:	40 c0       	rjmp	.+128    	; 0x3964 <pf_write+0x172>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:952
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    38e4:	fa 80       	ldd	r15, Y+2	; 0x02
    38e6:	fa 94       	dec	r15
    38e8:	ac 01       	movw	r20, r24
    38ea:	bd 01       	movw	r22, r26
    38ec:	29 e0       	ldi	r18, 0x09	; 9
    38ee:	76 95       	lsr	r23
    38f0:	67 95       	ror	r22
    38f2:	57 95       	ror	r21
    38f4:	47 95       	ror	r20
    38f6:	2a 95       	dec	r18
    38f8:	d1 f7       	brne	.-12     	; 0x38ee <pf_write+0xfc>
    38fa:	f4 22       	and	r15, r20
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:953
			if (!cs) {								/* On the cluster boundary? */
    38fc:	99 f4       	brne	.+38     	; 0x3924 <pf_write+0x132>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:954
				if (fs->fptr == 0)					/* On the top of the file? */
    38fe:	89 2b       	or	r24, r25
    3900:	8a 2b       	or	r24, r26
    3902:	8b 2b       	or	r24, r27
    3904:	09 f0       	breq	.+2      	; 0x3908 <pf_write+0x116>
    3906:	6f c0       	rjmp	.+222    	; 0x39e6 <pf_write+0x1f4>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:955
					clst = fs->org_clust;
    3908:	6e 8d       	ldd	r22, Y+30	; 0x1e
    390a:	7f 8d       	ldd	r23, Y+31	; 0x1f
    390c:	88 a1       	ldd	r24, Y+32	; 0x20
    390e:	99 a1       	ldd	r25, Y+33	; 0x21
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:958
				else
					clst = get_fat(fs->curr_clust);
				if (clst <= 1) ABORT(FR_DISK_ERR);
    3910:	62 30       	cpi	r22, 0x02	; 2
    3912:	71 05       	cpc	r23, r1
    3914:	81 05       	cpc	r24, r1
    3916:	91 05       	cpc	r25, r1
    3918:	08 f4       	brcc	.+2      	; 0x391c <pf_write+0x12a>
    391a:	9a cf       	rjmp	.-204    	; 0x3850 <pf_write+0x5e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:959
				fs->curr_clust = clst;				/* Update current cluster */
    391c:	6a a3       	std	Y+34, r22	; 0x22
    391e:	7b a3       	std	Y+35, r23	; 0x23
    3920:	8c a3       	std	Y+36, r24	; 0x24
    3922:	9d a3       	std	Y+37, r25	; 0x25
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:961
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
    3924:	6a a1       	ldd	r22, Y+34	; 0x22
    3926:	7b a1       	ldd	r23, Y+35	; 0x23
    3928:	8c a1       	ldd	r24, Y+36	; 0x24
    392a:	9d a1       	ldd	r25, Y+37	; 0x25
    392c:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <clust2sect(unsigned long)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:962
			if (!sect) ABORT(FR_DISK_ERR);
    3930:	61 15       	cp	r22, r1
    3932:	71 05       	cpc	r23, r1
    3934:	81 05       	cpc	r24, r1
    3936:	91 05       	cpc	r25, r1
    3938:	09 f4       	brne	.+2      	; 0x393c <pf_write+0x14a>
    393a:	8a cf       	rjmp	.-236    	; 0x3850 <pf_write+0x5e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:963
			fs->dsect = sect + cs;
    393c:	ab 01       	movw	r20, r22
    393e:	bc 01       	movw	r22, r24
    3940:	4f 0d       	add	r20, r15
    3942:	51 1d       	adc	r21, r1
    3944:	61 1d       	adc	r22, r1
    3946:	71 1d       	adc	r23, r1
    3948:	4e a3       	std	Y+38, r20	; 0x26
    394a:	5f a3       	std	Y+39, r21	; 0x27
    394c:	68 a7       	std	Y+40, r22	; 0x28
    394e:	79 a7       	std	Y+41, r23	; 0x29
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:964
			if (disk_writep(0, fs->dsect)) ABORT(FR_DISK_ERR);	/* Initiate a sector write operation */
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	80 e0       	ldi	r24, 0x00	; 0
    3954:	0e 94 13 17 	call	0x2e26	; 0x2e26 <disk_writep>
    3958:	89 2b       	or	r24, r25
    395a:	09 f0       	breq	.+2      	; 0x395e <pf_write+0x16c>
    395c:	79 cf       	rjmp	.-270    	; 0x3850 <pf_write+0x5e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:965
			fs->flag |= FA__WIP;
    395e:	89 81       	ldd	r24, Y+1	; 0x01
    3960:	80 64       	ori	r24, 0x40	; 64
    3962:	89 83       	std	Y+1, r24	; 0x01
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:967
		}
		wcnt = 512 - (UINT)fs->fptr % 512;			/* Number of bytes to write to the sector */
    3964:	8e 89       	ldd	r24, Y+22	; 0x16
    3966:	9f 89       	ldd	r25, Y+23	; 0x17
    3968:	91 70       	andi	r25, 0x01	; 1
    396a:	94 01       	movw	r18, r8
    396c:	28 1b       	sub	r18, r24
    396e:	39 0b       	sbc	r19, r25
    3970:	78 01       	movw	r14, r16
    3972:	20 17       	cp	r18, r16
    3974:	31 07       	cpc	r19, r17
    3976:	08 f4       	brcc	.+2      	; 0x397a <pf_write+0x188>
    3978:	79 01       	movw	r14, r18
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:969
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) ABORT(FR_DISK_ERR);	/* Send data to the sector */
    397a:	27 01       	movw	r4, r14
    397c:	71 2c       	mov	r7, r1
    397e:	61 2c       	mov	r6, r1
    3980:	b3 01       	movw	r22, r6
    3982:	a7 01       	movw	r20, r14
    3984:	c6 01       	movw	r24, r12
    3986:	0e 94 13 17 	call	0x2e26	; 0x2e26 <disk_writep>
    398a:	89 2b       	or	r24, r25
    398c:	09 f0       	breq	.+2      	; 0x3990 <pf_write+0x19e>
    398e:	60 cf       	rjmp	.-320    	; 0x3850 <pf_write+0x5e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:970
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    3990:	8e 89       	ldd	r24, Y+22	; 0x16
    3992:	9f 89       	ldd	r25, Y+23	; 0x17
    3994:	a8 8d       	ldd	r26, Y+24	; 0x18
    3996:	b9 8d       	ldd	r27, Y+25	; 0x19
    3998:	84 0d       	add	r24, r4
    399a:	95 1d       	adc	r25, r5
    399c:	a6 1d       	adc	r26, r6
    399e:	b7 1d       	adc	r27, r7
    39a0:	8e 8b       	std	Y+22, r24	; 0x16
    39a2:	9f 8b       	std	Y+23, r25	; 0x17
    39a4:	a8 8f       	std	Y+24, r26	; 0x18
    39a6:	b9 8f       	std	Y+25, r27	; 0x19
    39a8:	ce 0c       	add	r12, r14
    39aa:	df 1c       	adc	r13, r15
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:971
		btw -= wcnt; *bw += wcnt;
    39ac:	0e 19       	sub	r16, r14
    39ae:	1f 09       	sbc	r17, r15
    39b0:	f5 01       	movw	r30, r10
    39b2:	20 81       	ld	r18, Z
    39b4:	31 81       	ldd	r19, Z+1	; 0x01
    39b6:	e2 0e       	add	r14, r18
    39b8:	f3 1e       	adc	r15, r19
    39ba:	f1 82       	std	Z+1, r15	; 0x01
    39bc:	e0 82       	st	Z, r14
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:972
		if ((UINT)fs->fptr % 512 == 0) {
    39be:	2c 01       	movw	r4, r24
    39c0:	f1 e0       	ldi	r31, 0x01	; 1
    39c2:	5f 22       	and	r5, r31
    39c4:	45 28       	or	r4, r5
    39c6:	09 f0       	breq	.+2      	; 0x39ca <pf_write+0x1d8>
    39c8:	81 cf       	rjmp	.-254    	; 0x38cc <pf_write+0xda>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:973
			if (disk_writep(0, 0)) ABORT(FR_DISK_ERR);	/* Finalize the currtent secter write operation */
    39ca:	40 e0       	ldi	r20, 0x00	; 0
    39cc:	50 e0       	ldi	r21, 0x00	; 0
    39ce:	ba 01       	movw	r22, r20
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	80 e0       	ldi	r24, 0x00	; 0
    39d4:	0e 94 13 17 	call	0x2e26	; 0x2e26 <disk_writep>
    39d8:	89 2b       	or	r24, r25
    39da:	09 f0       	breq	.+2      	; 0x39de <pf_write+0x1ec>
    39dc:	39 cf       	rjmp	.-398    	; 0x3850 <pf_write+0x5e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:974
			fs->flag &= ~FA__WIP;
    39de:	89 81       	ldd	r24, Y+1	; 0x01
    39e0:	8f 7b       	andi	r24, 0xBF	; 191
    39e2:	89 83       	std	Y+1, r24	; 0x01
    39e4:	73 cf       	rjmp	.-282    	; 0x38cc <pf_write+0xda>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:957
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
			if (!cs) {								/* On the cluster boundary? */
				if (fs->fptr == 0)					/* On the top of the file? */
					clst = fs->org_clust;
				else
					clst = get_fat(fs->curr_clust);
    39e6:	6a a1       	ldd	r22, Y+34	; 0x22
    39e8:	7b a1       	ldd	r23, Y+35	; 0x23
    39ea:	8c a1       	ldd	r24, Y+36	; 0x24
    39ec:	9d a1       	ldd	r25, Y+37	; 0x25
    39ee:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <get_fat(unsigned long)>
    39f2:	8e cf       	rjmp	.-228    	; 0x3910 <pf_write+0x11e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:937


	*bw = 0;
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
		return FR_NOT_OPENED;
    39f4:	84 e0       	ldi	r24, 0x04	; 4
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	2e cf       	rjmp	.-420    	; 0x3856 <pf_write+0x64>

000039fa <pf_lseek>:
pf_lseek():
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:992
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
    39fa:	4f 92       	push	r4
    39fc:	5f 92       	push	r5
    39fe:	6f 92       	push	r6
    3a00:	7f 92       	push	r7
    3a02:	8f 92       	push	r8
    3a04:	9f 92       	push	r9
    3a06:	af 92       	push	r10
    3a08:	bf 92       	push	r11
    3a0a:	cf 92       	push	r12
    3a0c:	df 92       	push	r13
    3a0e:	ef 92       	push	r14
    3a10:	ff 92       	push	r15
    3a12:	cf 93       	push	r28
    3a14:	df 93       	push	r29
    3a16:	00 d0       	rcall	.+0      	; 0x3a18 <pf_lseek+0x1e>
    3a18:	00 d0       	rcall	.+0      	; 0x3a1a <pf_lseek+0x20>
    3a1a:	00 d0       	rcall	.+0      	; 0x3a1c <pf_lseek+0x22>
    3a1c:	cd b7       	in	r28, 0x3d	; 61
    3a1e:	de b7       	in	r29, 0x3e	; 62
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:995
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
    3a20:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <FatFs>
    3a24:	30 91 e5 01 	lds	r19, 0x01E5	; 0x8001e5 <FatFs+0x1>
    3a28:	3e 83       	std	Y+6, r19	; 0x06
    3a2a:	2d 83       	std	Y+5, r18	; 0x05
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:998


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    3a2c:	21 15       	cp	r18, r1
    3a2e:	31 05       	cpc	r19, r1
    3a30:	09 f4       	brne	.+2      	; 0x3a34 <pf_lseek+0x3a>
    3a32:	0c c1       	rjmp	.+536    	; 0x3c4c <pf_lseek+0x252>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:999
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    3a34:	d9 01       	movw	r26, r18
    3a36:	11 96       	adiw	r26, 0x01	; 1
    3a38:	2c 91       	ld	r18, X
    3a3a:	11 97       	sbiw	r26, 0x01	; 1
    3a3c:	20 ff       	sbrs	r18, 0
    3a3e:	09 c1       	rjmp	.+530    	; 0x3c52 <pf_lseek+0x258>
    3a40:	5a 96       	adiw	r26, 0x1a	; 26
    3a42:	cd 90       	ld	r12, X+
    3a44:	dd 90       	ld	r13, X+
    3a46:	ed 90       	ld	r14, X+
    3a48:	fc 90       	ld	r15, X
    3a4a:	5d 97       	sbiw	r26, 0x1d	; 29
    3a4c:	6c 15       	cp	r22, r12
    3a4e:	7d 05       	cpc	r23, r13
    3a50:	8e 05       	cpc	r24, r14
    3a52:	9f 05       	cpc	r25, r15
    3a54:	10 f4       	brcc	.+4      	; 0x3a5a <pf_lseek+0x60>
    3a56:	6b 01       	movw	r12, r22
    3a58:	7c 01       	movw	r14, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1003
			return FR_NOT_OPENED;

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
    3a5a:	ed 81       	ldd	r30, Y+5	; 0x05
    3a5c:	fe 81       	ldd	r31, Y+6	; 0x06
    3a5e:	46 88       	ldd	r4, Z+22	; 0x16
    3a60:	57 88       	ldd	r5, Z+23	; 0x17
    3a62:	60 8c       	ldd	r6, Z+24	; 0x18
    3a64:	71 8c       	ldd	r7, Z+25	; 0x19
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1004
	fs->fptr = 0;
    3a66:	16 8a       	std	Z+22, r1	; 0x16
    3a68:	17 8a       	std	Z+23, r1	; 0x17
    3a6a:	10 8e       	std	Z+24, r1	; 0x18
    3a6c:	11 8e       	std	Z+25, r1	; 0x19
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1005
	if (ofs > 0) {
    3a6e:	c1 14       	cp	r12, r1
    3a70:	d1 04       	cpc	r13, r1
    3a72:	e1 04       	cpc	r14, r1
    3a74:	f1 04       	cpc	r15, r1
    3a76:	09 f4       	brne	.+2      	; 0x3a7a <pf_lseek+0x80>
    3a78:	e6 c0       	rjmp	.+460    	; 0x3c46 <pf_lseek+0x24c>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1006
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
    3a7a:	82 80       	ldd	r8, Z+2	; 0x02
    3a7c:	91 2c       	mov	r9, r1
    3a7e:	b1 2c       	mov	r11, r1
    3a80:	a1 2c       	mov	r10, r1
    3a82:	39 e0       	ldi	r19, 0x09	; 9
    3a84:	88 0c       	add	r8, r8
    3a86:	99 1c       	adc	r9, r9
    3a88:	aa 1c       	adc	r10, r10
    3a8a:	bb 1c       	adc	r11, r11
    3a8c:	3a 95       	dec	r19
    3a8e:	d1 f7       	brne	.-12     	; 0x3a84 <pf_lseek+0x8a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1007
		if (ifptr > 0 &&
    3a90:	41 14       	cp	r4, r1
    3a92:	51 04       	cpc	r5, r1
    3a94:	61 04       	cpc	r6, r1
    3a96:	71 04       	cpc	r7, r1
    3a98:	09 f4       	brne	.+2      	; 0x3a9c <pf_lseek+0xa2>
    3a9a:	70 c0       	rjmp	.+224    	; 0x3b7c <pf_lseek+0x182>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1008 (discriminator 1)
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    3a9c:	b1 e0       	ldi	r27, 0x01	; 1
    3a9e:	4b 1a       	sub	r4, r27
    3aa0:	51 08       	sbc	r5, r1
    3aa2:	61 08       	sbc	r6, r1
    3aa4:	71 08       	sbc	r7, r1
    3aa6:	c7 01       	movw	r24, r14
    3aa8:	b6 01       	movw	r22, r12
    3aaa:	61 50       	subi	r22, 0x01	; 1
    3aac:	71 09       	sbc	r23, r1
    3aae:	81 09       	sbc	r24, r1
    3ab0:	91 09       	sbc	r25, r1
    3ab2:	a5 01       	movw	r20, r10
    3ab4:	94 01       	movw	r18, r8
    3ab6:	0e 94 5d 27 	call	0x4eba	; 0x4eba <__udivmodsi4>
    3aba:	29 83       	std	Y+1, r18	; 0x01
    3abc:	3a 83       	std	Y+2, r19	; 0x02
    3abe:	4b 83       	std	Y+3, r20	; 0x03
    3ac0:	5c 83       	std	Y+4, r21	; 0x04
    3ac2:	c3 01       	movw	r24, r6
    3ac4:	b2 01       	movw	r22, r4
    3ac6:	a5 01       	movw	r20, r10
    3ac8:	94 01       	movw	r18, r8
    3aca:	0e 94 5d 27 	call	0x4eba	; 0x4eba <__udivmodsi4>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1007 (discriminator 1)
	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
	fs->fptr = 0;
	if (ofs > 0) {
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
		if (ifptr > 0 &&
    3ace:	89 81       	ldd	r24, Y+1	; 0x01
    3ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad2:	ab 81       	ldd	r26, Y+3	; 0x03
    3ad4:	bc 81       	ldd	r27, Y+4	; 0x04
    3ad6:	82 17       	cp	r24, r18
    3ad8:	93 07       	cpc	r25, r19
    3ada:	a4 07       	cpc	r26, r20
    3adc:	b5 07       	cpc	r27, r21
    3ade:	08 f4       	brcc	.+2      	; 0x3ae2 <pf_lseek+0xe8>
    3ae0:	4d c0       	rjmp	.+154    	; 0x3b7c <pf_lseek+0x182>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1009
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    3ae2:	88 27       	eor	r24, r24
    3ae4:	99 27       	eor	r25, r25
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	88 19       	sub	r24, r8
    3aea:	99 09       	sbc	r25, r9
    3aec:	aa 09       	sbc	r26, r10
    3aee:	bb 09       	sbc	r27, r11
    3af0:	84 21       	and	r24, r4
    3af2:	95 21       	and	r25, r5
    3af4:	a6 21       	and	r26, r6
    3af6:	b7 21       	and	r27, r7
    3af8:	ed 81       	ldd	r30, Y+5	; 0x05
    3afa:	fe 81       	ldd	r31, Y+6	; 0x06
    3afc:	86 8b       	std	Z+22, r24	; 0x16
    3afe:	97 8b       	std	Z+23, r25	; 0x17
    3b00:	a0 8f       	std	Z+24, r26	; 0x18
    3b02:	b1 8f       	std	Z+25, r27	; 0x19
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1010
			ofs -= fs->fptr;
    3b04:	c8 1a       	sub	r12, r24
    3b06:	d9 0a       	sbc	r13, r25
    3b08:	ea 0a       	sbc	r14, r26
    3b0a:	fb 0a       	sbc	r15, r27
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1011
			clst = fs->curr_clust;
    3b0c:	62 a1       	ldd	r22, Z+34	; 0x22
    3b0e:	73 a1       	ldd	r23, Z+35	; 0x23
    3b10:	84 a1       	ldd	r24, Z+36	; 0x24
    3b12:	95 a1       	ldd	r25, Z+37	; 0x25
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1016
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
    3b14:	8c 14       	cp	r8, r12
    3b16:	9d 04       	cpc	r9, r13
    3b18:	ae 04       	cpc	r10, r14
    3b1a:	bf 04       	cpc	r11, r15
    3b1c:	08 f0       	brcs	.+2      	; 0x3b20 <pf_lseek+0x126>
    3b1e:	58 c0       	rjmp	.+176    	; 0x3bd0 <pf_lseek+0x1d6>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1017
			clst = get_fat(clst);		/* Follow cluster chain */
    3b20:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <get_fat(unsigned long)>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1018
			if (clst <= 1 || clst >= fs->n_fatent) ABORT(FR_DISK_ERR);
    3b24:	62 30       	cpi	r22, 0x02	; 2
    3b26:	71 05       	cpc	r23, r1
    3b28:	81 05       	cpc	r24, r1
    3b2a:	91 05       	cpc	r25, r1
    3b2c:	68 f0       	brcs	.+26     	; 0x3b48 <pf_lseek+0x14e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1018 (discriminator 2)
    3b2e:	ad 81       	ldd	r26, Y+5	; 0x05
    3b30:	be 81       	ldd	r27, Y+6	; 0x06
    3b32:	16 96       	adiw	r26, 0x06	; 6
    3b34:	4d 90       	ld	r4, X+
    3b36:	5d 90       	ld	r5, X+
    3b38:	6d 90       	ld	r6, X+
    3b3a:	7c 90       	ld	r7, X
    3b3c:	19 97       	sbiw	r26, 0x09	; 9
    3b3e:	64 15       	cp	r22, r4
    3b40:	75 05       	cpc	r23, r5
    3b42:	86 05       	cpc	r24, r6
    3b44:	97 05       	cpc	r25, r7
    3b46:	40 f1       	brcs	.+80     	; 0x3b98 <pf_lseek+0x19e>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1018 (discriminator 3)
    3b48:	ed 81       	ldd	r30, Y+5	; 0x05
    3b4a:	fe 81       	ldd	r31, Y+6	; 0x06
    3b4c:	11 82       	std	Z+1, r1	; 0x01
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1025 (discriminator 1)
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) ABORT(FR_DISK_ERR);
    3b4e:	81 e0       	ldi	r24, 0x01	; 1
    3b50:	90 e0       	ldi	r25, 0x00	; 0
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1030
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
	}

	return FR_OK;
}
    3b52:	26 96       	adiw	r28, 0x06	; 6
    3b54:	0f b6       	in	r0, 0x3f	; 63
    3b56:	f8 94       	cli
    3b58:	de bf       	out	0x3e, r29	; 62
    3b5a:	0f be       	out	0x3f, r0	; 63
    3b5c:	cd bf       	out	0x3d, r28	; 61
    3b5e:	df 91       	pop	r29
    3b60:	cf 91       	pop	r28
    3b62:	ff 90       	pop	r15
    3b64:	ef 90       	pop	r14
    3b66:	df 90       	pop	r13
    3b68:	cf 90       	pop	r12
    3b6a:	bf 90       	pop	r11
    3b6c:	af 90       	pop	r10
    3b6e:	9f 90       	pop	r9
    3b70:	8f 90       	pop	r8
    3b72:	7f 90       	pop	r7
    3b74:	6f 90       	pop	r6
    3b76:	5f 90       	pop	r5
    3b78:	4f 90       	pop	r4
    3b7a:	08 95       	ret
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1013
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
			ofs -= fs->fptr;
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
    3b7c:	ad 81       	ldd	r26, Y+5	; 0x05
    3b7e:	be 81       	ldd	r27, Y+6	; 0x06
    3b80:	5e 96       	adiw	r26, 0x1e	; 30
    3b82:	6d 91       	ld	r22, X+
    3b84:	7d 91       	ld	r23, X+
    3b86:	8d 91       	ld	r24, X+
    3b88:	9c 91       	ld	r25, X
    3b8a:	91 97       	sbiw	r26, 0x21	; 33
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1014
			fs->curr_clust = clst;
    3b8c:	fd 01       	movw	r30, r26
    3b8e:	62 a3       	std	Z+34, r22	; 0x22
    3b90:	73 a3       	std	Z+35, r23	; 0x23
    3b92:	84 a3       	std	Z+36, r24	; 0x24
    3b94:	95 a3       	std	Z+37, r25	; 0x25
    3b96:	be cf       	rjmp	.-132    	; 0x3b14 <pf_lseek+0x11a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1019
		}
		while (ofs > bcs) {				/* Cluster following loop */
			clst = get_fat(clst);		/* Follow cluster chain */
			if (clst <= 1 || clst >= fs->n_fatent) ABORT(FR_DISK_ERR);
			fs->curr_clust = clst;
    3b98:	ad 81       	ldd	r26, Y+5	; 0x05
    3b9a:	be 81       	ldd	r27, Y+6	; 0x06
    3b9c:	92 96       	adiw	r26, 0x22	; 34
    3b9e:	6d 93       	st	X+, r22
    3ba0:	7d 93       	st	X+, r23
    3ba2:	8d 93       	st	X+, r24
    3ba4:	9c 93       	st	X, r25
    3ba6:	95 97       	sbiw	r26, 0x25	; 37
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1020
			fs->fptr += bcs;
    3ba8:	56 96       	adiw	r26, 0x16	; 22
    3baa:	4d 90       	ld	r4, X+
    3bac:	5d 90       	ld	r5, X+
    3bae:	6d 90       	ld	r6, X+
    3bb0:	7c 90       	ld	r7, X
    3bb2:	59 97       	sbiw	r26, 0x19	; 25
    3bb4:	48 0c       	add	r4, r8
    3bb6:	59 1c       	adc	r5, r9
    3bb8:	6a 1c       	adc	r6, r10
    3bba:	7b 1c       	adc	r7, r11
    3bbc:	fd 01       	movw	r30, r26
    3bbe:	46 8a       	std	Z+22, r4	; 0x16
    3bc0:	57 8a       	std	Z+23, r5	; 0x17
    3bc2:	60 8e       	std	Z+24, r6	; 0x18
    3bc4:	71 8e       	std	Z+25, r7	; 0x19
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1021
			ofs -= bcs;
    3bc6:	c8 18       	sub	r12, r8
    3bc8:	d9 08       	sbc	r13, r9
    3bca:	ea 08       	sbc	r14, r10
    3bcc:	fb 08       	sbc	r15, r11
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1016
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
    3bce:	a2 cf       	rjmp	.-188    	; 0x3b14 <pf_lseek+0x11a>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1023
			if (clst <= 1 || clst >= fs->n_fatent) ABORT(FR_DISK_ERR);
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
    3bd0:	ad 81       	ldd	r26, Y+5	; 0x05
    3bd2:	be 81       	ldd	r27, Y+6	; 0x06
    3bd4:	56 96       	adiw	r26, 0x16	; 22
    3bd6:	8d 90       	ld	r8, X+
    3bd8:	9d 90       	ld	r9, X+
    3bda:	ad 90       	ld	r10, X+
    3bdc:	bc 90       	ld	r11, X
    3bde:	59 97       	sbiw	r26, 0x19	; 25
    3be0:	c8 0c       	add	r12, r8
    3be2:	d9 1c       	adc	r13, r9
    3be4:	ea 1c       	adc	r14, r10
    3be6:	fb 1c       	adc	r15, r11
    3be8:	fd 01       	movw	r30, r26
    3bea:	c6 8a       	std	Z+22, r12	; 0x16
    3bec:	d7 8a       	std	Z+23, r13	; 0x17
    3bee:	e0 8e       	std	Z+24, r14	; 0x18
    3bf0:	f1 8e       	std	Z+25, r15	; 0x19
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1024
		sect = clust2sect(clst);		/* Current sector */
    3bf2:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <clust2sect(unsigned long)>
    3bf6:	ab 01       	movw	r20, r22
    3bf8:	bc 01       	movw	r22, r24
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1025
		if (!sect) ABORT(FR_DISK_ERR);
    3bfa:	41 15       	cp	r20, r1
    3bfc:	51 05       	cpc	r21, r1
    3bfe:	61 05       	cpc	r22, r1
    3c00:	71 05       	cpc	r23, r1
    3c02:	29 f4       	brne	.+10     	; 0x3c0e <pf_lseek+0x214>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1025 (discriminator 1)
    3c04:	ad 81       	ldd	r26, Y+5	; 0x05
    3c06:	be 81       	ldd	r27, Y+6	; 0x06
    3c08:	11 96       	adiw	r26, 0x01	; 1
    3c0a:	1c 92       	st	X, r1
    3c0c:	a0 cf       	rjmp	.-192    	; 0x3b4e <pf_lseek+0x154>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1026
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
    3c0e:	ed 81       	ldd	r30, Y+5	; 0x05
    3c10:	fe 81       	ldd	r31, Y+6	; 0x06
    3c12:	82 81       	ldd	r24, Z+2	; 0x02
    3c14:	81 50       	subi	r24, 0x01	; 1
    3c16:	99 0b       	sbc	r25, r25
    3c18:	09 2e       	mov	r0, r25
    3c1a:	00 0c       	add	r0, r0
    3c1c:	aa 0b       	sbc	r26, r26
    3c1e:	bb 0b       	sbc	r27, r27
    3c20:	29 e0       	ldi	r18, 0x09	; 9
    3c22:	f6 94       	lsr	r15
    3c24:	e7 94       	ror	r14
    3c26:	d7 94       	ror	r13
    3c28:	c7 94       	ror	r12
    3c2a:	2a 95       	dec	r18
    3c2c:	d1 f7       	brne	.-12     	; 0x3c22 <pf_lseek+0x228>
    3c2e:	8c 21       	and	r24, r12
    3c30:	9d 21       	and	r25, r13
    3c32:	ae 21       	and	r26, r14
    3c34:	bf 21       	and	r27, r15
    3c36:	48 0f       	add	r20, r24
    3c38:	59 1f       	adc	r21, r25
    3c3a:	6a 1f       	adc	r22, r26
    3c3c:	7b 1f       	adc	r23, r27
    3c3e:	46 a3       	std	Z+38, r20	; 0x26
    3c40:	57 a3       	std	Z+39, r21	; 0x27
    3c42:	60 a7       	std	Z+40, r22	; 0x28
    3c44:	71 a7       	std	Z+41, r23	; 0x29
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1029
	}

	return FR_OK;
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	80 e0       	ldi	r24, 0x00	; 0
    3c4a:	83 cf       	rjmp	.-250    	; 0x3b52 <pf_lseek+0x158>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:998
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    3c4c:	85 e0       	ldi	r24, 0x05	; 5
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	80 cf       	rjmp	.-256    	; 0x3b52 <pf_lseek+0x158>
/home/horo/projects/Z80/Z80-MBC2/S220718-R290823_IOS-Z80-MBC2/pff.cpp:1000
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
			return FR_NOT_OPENED;
    3c52:	84 e0       	ldi	r24, 0x04	; 4
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	7d cf       	rjmp	.-262    	; 0x3b52 <pf_lseek+0x158>

00003c58 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:378

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	80 e0       	ldi	r24, 0x00	; 0
    3c5c:	08 95       	ret

00003c5e <TwoWire::available()>:
_ZN7TwoWire9availableEv():
    3c5e:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <TwoWire::rxBufferLength>
    3c62:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <TwoWire::rxBufferIndex>
    3c66:	89 1b       	sub	r24, r25
    3c68:	99 0b       	sbc	r25, r25
    3c6a:	08 95       	ret

00003c6c <TwoWire::read()>:
_ZN7TwoWire4readEv():
    3c6c:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <TwoWire::rxBufferIndex>
    3c70:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <TwoWire::rxBufferLength>
    3c74:	2f ef       	ldi	r18, 0xFF	; 255
    3c76:	3f ef       	ldi	r19, 0xFF	; 255
    3c78:	98 17       	cp	r25, r24
    3c7a:	48 f4       	brcc	.+18     	; 0x3c8e <TwoWire::read()+0x22>
    3c7c:	e9 2f       	mov	r30, r25
    3c7e:	f0 e0       	ldi	r31, 0x00	; 0
    3c80:	e4 5e       	subi	r30, 0xE4	; 228
    3c82:	fd 4f       	sbci	r31, 0xFD	; 253
    3c84:	20 81       	ld	r18, Z
    3c86:	30 e0       	ldi	r19, 0x00	; 0
    3c88:	9f 5f       	subi	r25, 0xFF	; 255
    3c8a:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <TwoWire::rxBufferIndex>
    3c8e:	c9 01       	movw	r24, r18
    3c90:	08 95       	ret

00003c92 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    3c92:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <TwoWire::rxBufferIndex>
    3c96:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <TwoWire::rxBufferLength>
    3c9a:	e8 17       	cp	r30, r24
    3c9c:	30 f4       	brcc	.+12     	; 0x3caa <TwoWire::peek()+0x18>
    3c9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ca0:	e4 5e       	subi	r30, 0xE4	; 228
    3ca2:	fd 4f       	sbci	r31, 0xFD	; 253
    3ca4:	80 81       	ld	r24, Z
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	08 95       	ret
    3caa:	8f ef       	ldi	r24, 0xFF	; 255
    3cac:	9f ef       	ldi	r25, 0xFF	; 255
    3cae:	08 95       	ret

00003cb0 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    3cb0:	08 95       	ret

00003cb2 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
    3cb2:	cf 93       	push	r28
    3cb4:	df 93       	push	r29
    3cb6:	ec 01       	movw	r28, r24
    3cb8:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <TwoWire::user_onReceive>
    3cbc:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <TwoWire::user_onReceive+0x1>
    3cc0:	30 97       	sbiw	r30, 0x00	; 0
    3cc2:	f1 f0       	breq	.+60     	; 0x3d00 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    3cc4:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <TwoWire::rxBufferIndex>
    3cc8:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <TwoWire::rxBufferLength>
    3ccc:	98 17       	cp	r25, r24
    3cce:	c0 f0       	brcs	.+48     	; 0x3d00 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	29 2f       	mov	r18, r25
    3cd4:	30 e0       	ldi	r19, 0x00	; 0
    3cd6:	26 17       	cp	r18, r22
    3cd8:	37 07       	cpc	r19, r23
    3cda:	54 f4       	brge	.+20     	; 0x3cf0 <TwoWire::onReceiveService(unsigned char*, int)+0x3e>
    3cdc:	de 01       	movw	r26, r28
    3cde:	a2 0f       	add	r26, r18
    3ce0:	b3 1f       	adc	r27, r19
    3ce2:	4c 91       	ld	r20, X
    3ce4:	24 5e       	subi	r18, 0xE4	; 228
    3ce6:	3d 4f       	sbci	r19, 0xFD	; 253
    3ce8:	d9 01       	movw	r26, r18
    3cea:	4c 93       	st	X, r20
    3cec:	9f 5f       	subi	r25, 0xFF	; 255
    3cee:	f1 cf       	rjmp	.-30     	; 0x3cd2 <TwoWire::onReceiveService(unsigned char*, int)+0x20>
    3cf0:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <TwoWire::rxBufferIndex>
    3cf4:	60 93 1a 02 	sts	0x021A, r22	; 0x80021a <TwoWire::rxBufferLength>
    3cf8:	cb 01       	movw	r24, r22
    3cfa:	df 91       	pop	r29
    3cfc:	cf 91       	pop	r28
    3cfe:	09 94       	ijmp
    3d00:	df 91       	pop	r29
    3d02:	cf 91       	pop	r28
    3d04:	08 95       	ret

00003d06 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
    3d06:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <TwoWire::user_onRequest>
    3d0a:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <TwoWire::user_onRequest+0x1>
    3d0e:	30 97       	sbiw	r30, 0x00	; 0
    3d10:	29 f0       	breq	.+10     	; 0x3d1c <TwoWire::onRequestService()+0x16>
    3d12:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <TwoWire::txBufferIndex>
    3d16:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <TwoWire::txBufferLength>
    3d1a:	09 94       	ijmp
    3d1c:	08 95       	ret

00003d1e <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
    3d1e:	cf 93       	push	r28
    3d20:	df 93       	push	r29
    3d22:	1f 92       	push	r1
    3d24:	cd b7       	in	r28, 0x3d	; 61
    3d26:	de b7       	in	r29, 0x3e	; 62
    3d28:	69 83       	std	Y+1, r22	; 0x01
    3d2a:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <TwoWire::transmitting>
    3d2e:	22 23       	and	r18, r18
    3d30:	f9 f0       	breq	.+62     	; 0x3d70 <TwoWire::write(unsigned char)+0x52>
    3d32:	20 91 f7 01 	lds	r18, 0x01F7	; 0x8001f7 <TwoWire::txBufferLength>
    3d36:	20 32       	cpi	r18, 0x20	; 32
    3d38:	58 f0       	brcs	.+22     	; 0x3d50 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
    3d3a:	21 e0       	ldi	r18, 0x01	; 1
    3d3c:	30 e0       	ldi	r19, 0x00	; 0
    3d3e:	fc 01       	movw	r30, r24
    3d40:	33 83       	std	Z+3, r19	; 0x03
    3d42:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	80 e0       	ldi	r24, 0x00	; 0
    3d48:	0f 90       	pop	r0
    3d4a:	df 91       	pop	r29
    3d4c:	cf 91       	pop	r28
    3d4e:	08 95       	ret
    3d50:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <TwoWire::txBufferIndex>
    3d54:	e8 2f       	mov	r30, r24
    3d56:	f0 e0       	ldi	r31, 0x00	; 0
    3d58:	e7 50       	subi	r30, 0x07	; 7
    3d5a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d5c:	99 81       	ldd	r25, Y+1	; 0x01
    3d5e:	90 83       	st	Z, r25
    3d60:	8f 5f       	subi	r24, 0xFF	; 255
    3d62:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <TwoWire::txBufferIndex>
    3d66:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <TwoWire::txBufferLength>
    3d6a:	81 e0       	ldi	r24, 0x01	; 1
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	ec cf       	rjmp	.-40     	; 0x3d48 <TwoWire::write(unsigned char)+0x2a>
    3d70:	61 e0       	ldi	r22, 0x01	; 1
    3d72:	ce 01       	movw	r24, r28
    3d74:	01 96       	adiw	r24, 0x01	; 1
    3d76:	0e 94 36 20 	call	0x406c	; 0x406c <twi_transmit>
    3d7a:	f7 cf       	rjmp	.-18     	; 0x3d6a <TwoWire::write(unsigned char)+0x4c>

00003d7c <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    3d7c:	cf 92       	push	r12
    3d7e:	df 92       	push	r13
    3d80:	ef 92       	push	r14
    3d82:	ff 92       	push	r15
    3d84:	0f 93       	push	r16
    3d86:	1f 93       	push	r17
    3d88:	cf 93       	push	r28
    3d8a:	df 93       	push	r29
    3d8c:	7c 01       	movw	r14, r24
    3d8e:	cb 01       	movw	r24, r22
    3d90:	8a 01       	movw	r16, r20
    3d92:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <TwoWire::transmitting>
    3d96:	22 23       	and	r18, r18
    3d98:	89 f0       	breq	.+34     	; 0x3dbc <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    3d9a:	eb 01       	movw	r28, r22
    3d9c:	6b 01       	movw	r12, r22
    3d9e:	c4 0e       	add	r12, r20
    3da0:	d5 1e       	adc	r13, r21
    3da2:	cc 15       	cp	r28, r12
    3da4:	dd 05       	cpc	r29, r13
    3da6:	69 f0       	breq	.+26     	; 0x3dc2 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    3da8:	69 91       	ld	r22, Y+
    3daa:	d7 01       	movw	r26, r14
    3dac:	ed 91       	ld	r30, X+
    3dae:	fc 91       	ld	r31, X
    3db0:	01 90       	ld	r0, Z+
    3db2:	f0 81       	ld	r31, Z
    3db4:	e0 2d       	mov	r30, r0
    3db6:	c7 01       	movw	r24, r14
    3db8:	09 95       	icall
    3dba:	f3 cf       	rjmp	.-26     	; 0x3da2 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
    3dbc:	64 2f       	mov	r22, r20
    3dbe:	0e 94 36 20 	call	0x406c	; 0x406c <twi_transmit>
    3dc2:	c8 01       	movw	r24, r16
    3dc4:	df 91       	pop	r29
    3dc6:	cf 91       	pop	r28
    3dc8:	1f 91       	pop	r17
    3dca:	0f 91       	pop	r16
    3dcc:	ff 90       	pop	r15
    3dce:	ef 90       	pop	r14
    3dd0:	df 90       	pop	r13
    3dd2:	cf 90       	pop	r12
    3dd4:	08 95       	ret

00003dd6 <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
    3dd6:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <TwoWire::rxBufferIndex>
    3dda:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <TwoWire::rxBufferLength>
    3dde:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <TwoWire::txBufferIndex>
    3de2:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <TwoWire::txBufferLength>
    3de6:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <twi_init>
    3dea:	83 e8       	ldi	r24, 0x83	; 131
    3dec:	9e e1       	ldi	r25, 0x1E	; 30
    3dee:	0e 94 62 20 	call	0x40c4	; 0x40c4 <twi_attachSlaveTxEvent>
    3df2:	89 e5       	ldi	r24, 0x59	; 89
    3df4:	9e e1       	ldi	r25, 0x1E	; 30
    3df6:	0c 94 5d 20 	jmp	0x40ba	; 0x40ba <twi_attachSlaveRxEvent>

00003dfa <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
    3dfa:	81 e0       	ldi	r24, 0x01	; 1
    3dfc:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <TwoWire::transmitting>
    3e00:	60 93 19 02 	sts	0x0219, r22	; 0x800219 <TwoWire::txAddress>
    3e04:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <TwoWire::txBufferIndex>
    3e08:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <TwoWire::txBufferLength>
    3e0c:	08 95       	ret

00003e0e <TwoWire::beginTransmission(int)>:
_ZN7TwoWire17beginTransmissionEi():
    3e0e:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <TwoWire::beginTransmission(unsigned char)>

00003e12 <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    3e12:	0f 93       	push	r16
    3e14:	06 2f       	mov	r16, r22
    3e16:	21 e0       	ldi	r18, 0x01	; 1
    3e18:	40 91 f7 01 	lds	r20, 0x01F7	; 0x8001f7 <TwoWire::txBufferLength>
    3e1c:	69 ef       	ldi	r22, 0xF9	; 249
    3e1e:	71 e0       	ldi	r23, 0x01	; 1
    3e20:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <TwoWire::txAddress>
    3e24:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <twi_writeTo>
    3e28:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <TwoWire::txBufferIndex>
    3e2c:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <TwoWire::txBufferLength>
    3e30:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <TwoWire::transmitting>
    3e34:	0f 91       	pop	r16
    3e36:	08 95       	ret

00003e38 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
    3e38:	4f 92       	push	r4
    3e3a:	5f 92       	push	r5
    3e3c:	6f 92       	push	r6
    3e3e:	7f 92       	push	r7
    3e40:	af 92       	push	r10
    3e42:	bf 92       	push	r11
    3e44:	cf 92       	push	r12
    3e46:	ef 92       	push	r14
    3e48:	ff 92       	push	r15
    3e4a:	0f 93       	push	r16
    3e4c:	1f 93       	push	r17
    3e4e:	cf 93       	push	r28
    3e50:	df 93       	push	r29
    3e52:	5c 01       	movw	r10, r24
    3e54:	f6 2e       	mov	r15, r22
    3e56:	d4 2f       	mov	r29, r20
    3e58:	28 01       	movw	r4, r16
    3e5a:	39 01       	movw	r6, r18
    3e5c:	ee 20       	and	r14, r14
    3e5e:	19 f1       	breq	.+70     	; 0x3ea6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
    3e60:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <TwoWire::beginTransmission(unsigned char)>
    3e64:	ce 2d       	mov	r28, r14
    3e66:	c4 30       	cpi	r28, 0x04	; 4
    3e68:	08 f0       	brcs	.+2      	; 0x3e6c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    3e6a:	c3 e0       	ldi	r28, 0x03	; 3
    3e6c:	c1 50       	subi	r28, 0x01	; 1
    3e6e:	b8 f0       	brcs	.+46     	; 0x3e9e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
    3e70:	28 e0       	ldi	r18, 0x08	; 8
    3e72:	c2 9f       	mul	r28, r18
    3e74:	c0 01       	movw	r24, r0
    3e76:	11 24       	eor	r1, r1
    3e78:	a3 01       	movw	r20, r6
    3e7a:	92 01       	movw	r18, r4
    3e7c:	04 c0       	rjmp	.+8      	; 0x3e86 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
    3e7e:	56 95       	lsr	r21
    3e80:	47 95       	ror	r20
    3e82:	37 95       	ror	r19
    3e84:	27 95       	ror	r18
    3e86:	8a 95       	dec	r24
    3e88:	d2 f7       	brpl	.-12     	; 0x3e7e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
    3e8a:	b9 01       	movw	r22, r18
    3e8c:	d5 01       	movw	r26, r10
    3e8e:	ed 91       	ld	r30, X+
    3e90:	fc 91       	ld	r31, X
    3e92:	01 90       	ld	r0, Z+
    3e94:	f0 81       	ld	r31, Z
    3e96:	e0 2d       	mov	r30, r0
    3e98:	c5 01       	movw	r24, r10
    3e9a:	09 95       	icall
    3e9c:	e7 cf       	rjmp	.-50     	; 0x3e6c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    3e9e:	60 e0       	ldi	r22, 0x00	; 0
    3ea0:	c5 01       	movw	r24, r10
    3ea2:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <TwoWire::endTransmission(unsigned char)>
    3ea6:	4d 2f       	mov	r20, r29
    3ea8:	d1 32       	cpi	r29, 0x21	; 33
    3eaa:	08 f0       	brcs	.+2      	; 0x3eae <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
    3eac:	40 e2       	ldi	r20, 0x20	; 32
    3eae:	2c 2d       	mov	r18, r12
    3eb0:	6c e1       	ldi	r22, 0x1C	; 28
    3eb2:	72 e0       	ldi	r23, 0x02	; 2
    3eb4:	8f 2d       	mov	r24, r15
    3eb6:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <twi_readFrom>
    3eba:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <TwoWire::rxBufferIndex>
    3ebe:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <TwoWire::rxBufferLength>
    3ec2:	df 91       	pop	r29
    3ec4:	cf 91       	pop	r28
    3ec6:	1f 91       	pop	r17
    3ec8:	0f 91       	pop	r16
    3eca:	ff 90       	pop	r15
    3ecc:	ef 90       	pop	r14
    3ece:	cf 90       	pop	r12
    3ed0:	bf 90       	pop	r11
    3ed2:	af 90       	pop	r10
    3ed4:	7f 90       	pop	r7
    3ed6:	6f 90       	pop	r6
    3ed8:	5f 90       	pop	r5
    3eda:	4f 90       	pop	r4
    3edc:	08 95       	ret

00003ede <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
    3ede:	cf 92       	push	r12
    3ee0:	ef 92       	push	r14
    3ee2:	0f 93       	push	r16
    3ee4:	1f 93       	push	r17
    3ee6:	c2 2e       	mov	r12, r18
    3ee8:	e1 2c       	mov	r14, r1
    3eea:	00 e0       	ldi	r16, 0x00	; 0
    3eec:	10 e0       	ldi	r17, 0x00	; 0
    3eee:	98 01       	movw	r18, r16
    3ef0:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
    3ef4:	1f 91       	pop	r17
    3ef6:	0f 91       	pop	r16
    3ef8:	ef 90       	pop	r14
    3efa:	cf 90       	pop	r12
    3efc:	08 95       	ret

00003efe <TwoWire::requestFrom(int, int)>:
_ZN7TwoWire11requestFromEii():
    3efe:	21 e0       	ldi	r18, 0x01	; 1
    3f00:	0c 94 6f 1f 	jmp	0x3ede	; 0x3ede <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

00003f04 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    3f04:	61 e0       	ldi	r22, 0x01	; 1
    3f06:	0c 94 09 1f 	jmp	0x3e12	; 0x3e12 <TwoWire::endTransmission(unsigned char)>

00003f0a <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3f0a:	e6 ee       	ldi	r30, 0xE6	; 230
    3f0c:	f1 e0       	ldi	r31, 0x01	; 1
    3f0e:	13 82       	std	Z+3, r1	; 0x03
    3f10:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3f12:	88 ee       	ldi	r24, 0xE8	; 232
    3f14:	93 e0       	ldi	r25, 0x03	; 3
    3f16:	a0 e0       	ldi	r26, 0x00	; 0
    3f18:	b0 e0       	ldi	r27, 0x00	; 0
    3f1a:	84 83       	std	Z+4, r24	; 0x04
    3f1c:	95 83       	std	Z+5, r25	; 0x05
    3f1e:	a6 83       	std	Z+6, r26	; 0x06
    3f20:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:53
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    3f22:	86 e3       	ldi	r24, 0x36	; 54
    3f24:	91 e0       	ldi	r25, 0x01	; 1
    3f26:	91 83       	std	Z+1, r25	; 0x01
    3f28:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/Wire.cpp:382
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3f2a:	08 95       	ret

00003f2c <twi_init>:
twi_init():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:531
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    3f2c:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <twi_state>
    3f30:	81 e0       	ldi	r24, 0x01	; 1
    3f32:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <twi_sendStop>
    3f36:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <twi_inRepStart>
    3f3a:	61 e0       	ldi	r22, 0x01	; 1
    3f3c:	81 e1       	ldi	r24, 0x11	; 17
    3f3e:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
    3f42:	61 e0       	ldi	r22, 0x01	; 1
    3f44:	80 e1       	ldi	r24, 0x10	; 16
    3f46:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <digitalWrite>
    3f4a:	08 98       	cbi	0x01, 0	; 1
    3f4c:	09 98       	cbi	0x01, 1	; 1
    3f4e:	88 e4       	ldi	r24, 0x48	; 72
    3f50:	80 b9       	out	0x00, r24	; 0
    3f52:	85 e4       	ldi	r24, 0x45	; 69
    3f54:	86 bf       	out	0x36, r24	; 54
    3f56:	08 95       	ret

00003f58 <twi_readFrom>:
twi_readFrom():
    3f58:	41 32       	cpi	r20, 0x21	; 33
    3f5a:	c8 f5       	brcc	.+114    	; 0x3fce <twi_readFrom+0x76>
    3f5c:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <twi_state>
    3f60:	91 11       	cpse	r25, r1
    3f62:	fc cf       	rjmp	.-8      	; 0x3f5c <twi_readFrom+0x4>
    3f64:	91 e0       	ldi	r25, 0x01	; 1
    3f66:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <twi_state>
    3f6a:	20 93 89 02 	sts	0x0289, r18	; 0x800289 <twi_sendStop>
    3f6e:	2f ef       	ldi	r18, 0xFF	; 255
    3f70:	20 93 3c 02 	sts	0x023C, r18	; 0x80023c <twi_error>
    3f74:	70 93 83 02 	sts	0x0283, r23	; 0x800283 <twi_masterBuffer+0x1>
    3f78:	60 93 82 02 	sts	0x0282, r22	; 0x800282 <twi_masterBuffer>
    3f7c:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <twi_masterBufferIndex>
    3f80:	24 0f       	add	r18, r20
    3f82:	20 93 80 02 	sts	0x0280, r18	; 0x800280 <twi_masterBufferLength>
    3f86:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <twi_slarw>
    3f8a:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <twi_slarw>
    3f8e:	88 0f       	add	r24, r24
    3f90:	89 2b       	or	r24, r25
    3f92:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <twi_slarw>
    3f96:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <twi_inRepStart>
    3f9a:	81 30       	cpi	r24, 0x01	; 1
    3f9c:	b1 f4       	brne	.+44     	; 0x3fca <twi_readFrom+0x72>
    3f9e:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <twi_inRepStart>
    3fa2:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <twi_slarw>
    3fa6:	83 b9       	out	0x03, r24	; 3
    3fa8:	06 b6       	in	r0, 0x36	; 54
    3faa:	03 fc       	sbrc	r0, 3
    3fac:	fa cf       	rjmp	.-12     	; 0x3fa2 <twi_readFrom+0x4a>
    3fae:	85 ec       	ldi	r24, 0xC5	; 197
    3fb0:	86 bf       	out	0x36, r24	; 54
    3fb2:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <twi_state>
    3fb6:	81 30       	cpi	r24, 0x01	; 1
    3fb8:	e1 f3       	breq	.-8      	; 0x3fb2 <twi_readFrom+0x5a>
    3fba:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <twi_masterBufferIndex>
    3fbe:	84 17       	cp	r24, r20
    3fc0:	10 f4       	brcc	.+4      	; 0x3fc6 <twi_readFrom+0x6e>
    3fc2:	40 91 81 02 	lds	r20, 0x0281	; 0x800281 <twi_masterBufferIndex>
    3fc6:	84 2f       	mov	r24, r20
    3fc8:	08 95       	ret
    3fca:	85 ee       	ldi	r24, 0xE5	; 229
    3fcc:	f1 cf       	rjmp	.-30     	; 0x3fb0 <twi_readFrom+0x58>
    3fce:	40 e0       	ldi	r20, 0x00	; 0
    3fd0:	fa cf       	rjmp	.-12     	; 0x3fc6 <twi_readFrom+0x6e>

00003fd2 <twi_writeTo>:
twi_writeTo():
    3fd2:	0f 93       	push	r16
    3fd4:	41 32       	cpi	r20, 0x21	; 33
    3fd6:	08 f0       	brcs	.+2      	; 0x3fda <twi_writeTo+0x8>
    3fd8:	41 c0       	rjmp	.+130    	; 0x405c <twi_writeTo+0x8a>
    3fda:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <twi_state>
    3fde:	91 11       	cpse	r25, r1
    3fe0:	fc cf       	rjmp	.-8      	; 0x3fda <twi_writeTo+0x8>
    3fe2:	92 e0       	ldi	r25, 0x02	; 2
    3fe4:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <twi_state>
    3fe8:	00 93 89 02 	sts	0x0289, r16	; 0x800289 <twi_sendStop>
    3fec:	9f ef       	ldi	r25, 0xFF	; 255
    3fee:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <twi_error>
    3ff2:	70 93 83 02 	sts	0x0283, r23	; 0x800283 <twi_masterBuffer+0x1>
    3ff6:	60 93 82 02 	sts	0x0282, r22	; 0x800282 <twi_masterBuffer>
    3ffa:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <twi_masterBufferIndex>
    3ffe:	40 93 80 02 	sts	0x0280, r20	; 0x800280 <twi_masterBufferLength>
    4002:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <twi_slarw>
    4006:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <twi_slarw>
    400a:	88 0f       	add	r24, r24
    400c:	89 2b       	or	r24, r25
    400e:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <twi_slarw>
    4012:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <twi_inRepStart>
    4016:	81 30       	cpi	r24, 0x01	; 1
    4018:	f9 f4       	brne	.+62     	; 0x4058 <twi_writeTo+0x86>
    401a:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <twi_inRepStart>
    401e:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <twi_slarw>
    4022:	83 b9       	out	0x03, r24	; 3
    4024:	06 b6       	in	r0, 0x36	; 54
    4026:	03 fc       	sbrc	r0, 3
    4028:	fa cf       	rjmp	.-12     	; 0x401e <twi_writeTo+0x4c>
    402a:	85 ec       	ldi	r24, 0xC5	; 197
    402c:	86 bf       	out	0x36, r24	; 54
    402e:	22 23       	and	r18, r18
    4030:	21 f0       	breq	.+8      	; 0x403a <twi_writeTo+0x68>
    4032:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <twi_state>
    4036:	82 30       	cpi	r24, 0x02	; 2
    4038:	d1 f3       	breq	.-12     	; 0x402e <twi_writeTo+0x5c>
    403a:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <twi_error>
    403e:	8f 3f       	cpi	r24, 0xFF	; 255
    4040:	79 f0       	breq	.+30     	; 0x4060 <twi_writeTo+0x8e>
    4042:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <twi_error>
    4046:	80 32       	cpi	r24, 0x20	; 32
    4048:	69 f0       	breq	.+26     	; 0x4064 <twi_writeTo+0x92>
    404a:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <twi_error>
    404e:	80 33       	cpi	r24, 0x30	; 48
    4050:	59 f0       	breq	.+22     	; 0x4068 <twi_writeTo+0x96>
    4052:	84 e0       	ldi	r24, 0x04	; 4
    4054:	0f 91       	pop	r16
    4056:	08 95       	ret
    4058:	85 ee       	ldi	r24, 0xE5	; 229
    405a:	e8 cf       	rjmp	.-48     	; 0x402c <twi_writeTo+0x5a>
    405c:	81 e0       	ldi	r24, 0x01	; 1
    405e:	fa cf       	rjmp	.-12     	; 0x4054 <twi_writeTo+0x82>
    4060:	80 e0       	ldi	r24, 0x00	; 0
    4062:	f8 cf       	rjmp	.-16     	; 0x4054 <twi_writeTo+0x82>
    4064:	82 e0       	ldi	r24, 0x02	; 2
    4066:	f6 cf       	rjmp	.-20     	; 0x4054 <twi_writeTo+0x82>
    4068:	83 e0       	ldi	r24, 0x03	; 3
    406a:	f4 cf       	rjmp	.-24     	; 0x4054 <twi_writeTo+0x82>

0000406c <twi_transmit>:
twi_transmit():
    406c:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <twi_txBufferLength>
    4070:	26 0f       	add	r18, r22
    4072:	33 27       	eor	r19, r19
    4074:	33 1f       	adc	r19, r19
    4076:	21 32       	cpi	r18, 0x21	; 33
    4078:	31 05       	cpc	r19, r1
    407a:	ec f4       	brge	.+58     	; 0x40b6 <twi_transmit+0x4a>
    407c:	20 91 8b 02 	lds	r18, 0x028B	; 0x80028b <twi_state>
    4080:	fc 01       	movw	r30, r24
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	80 e0       	ldi	r24, 0x00	; 0
    4086:	24 30       	cpi	r18, 0x04	; 4
    4088:	69 f0       	breq	.+26     	; 0x40a4 <twi_transmit+0x38>
    408a:	82 e0       	ldi	r24, 0x02	; 2
    408c:	08 95       	ret
    408e:	a0 91 5e 02 	lds	r26, 0x025E	; 0x80025e <twi_txBufferLength>
    4092:	21 91       	ld	r18, Z+
    4094:	ac 01       	movw	r20, r24
    4096:	40 5a       	subi	r20, 0xA0	; 160
    4098:	5d 4f       	sbci	r21, 0xFD	; 253
    409a:	a4 0f       	add	r26, r20
    409c:	b5 2f       	mov	r27, r21
    409e:	b1 1d       	adc	r27, r1
    40a0:	2c 93       	st	X, r18
    40a2:	01 96       	adiw	r24, 0x01	; 1
    40a4:	86 17       	cp	r24, r22
    40a6:	98 f3       	brcs	.-26     	; 0x408e <twi_transmit+0x22>
    40a8:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <twi_txBufferLength>
    40ac:	68 0f       	add	r22, r24
    40ae:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <twi_txBufferLength>
    40b2:	80 e0       	ldi	r24, 0x00	; 0
    40b4:	08 95       	ret
    40b6:	81 e0       	ldi	r24, 0x01	; 1
    40b8:	08 95       	ret

000040ba <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
    40ba:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <twi_onSlaveReceive+0x1>
    40be:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <twi_onSlaveReceive>
    40c2:	08 95       	ret

000040c4 <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
    40c4:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <twi_onSlaveTransmit+0x1>
    40c8:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <twi_onSlaveTransmit>
    40cc:	08 95       	ret

000040ce <twi_stop>:
twi_stop():
    40ce:	85 ed       	ldi	r24, 0xD5	; 213
    40d0:	86 bf       	out	0x36, r24	; 54
    40d2:	06 b6       	in	r0, 0x36	; 54
    40d4:	04 fc       	sbrc	r0, 4
    40d6:	fd cf       	rjmp	.-6      	; 0x40d2 <twi_stop+0x4>
    40d8:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <twi_state>
    40dc:	08 95       	ret

000040de <twi_releaseBus>:
twi_releaseBus():
    40de:	85 ec       	ldi	r24, 0xC5	; 197
    40e0:	86 bf       	out	0x36, r24	; 54
    40e2:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <twi_state>
    40e6:	08 95       	ret

000040e8 <__vector_19>:
__vector_19():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:534

ISR(TWI_vect)
{
    40e8:	1f 92       	push	r1
    40ea:	0f 92       	push	r0
    40ec:	0f b6       	in	r0, 0x3f	; 63
    40ee:	0f 92       	push	r0
    40f0:	11 24       	eor	r1, r1
    40f2:	2f 93       	push	r18
    40f4:	3f 93       	push	r19
    40f6:	4f 93       	push	r20
    40f8:	5f 93       	push	r21
    40fa:	6f 93       	push	r22
    40fc:	7f 93       	push	r23
    40fe:	8f 93       	push	r24
    4100:	9f 93       	push	r25
    4102:	af 93       	push	r26
    4104:	bf 93       	push	r27
    4106:	ef 93       	push	r30
    4108:	ff 93       	push	r31
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  switch(TW_STATUS){
    410a:	81 b1       	in	r24, 0x01	; 1
    410c:	88 7f       	andi	r24, 0xF8	; 248
    410e:	80 36       	cpi	r24, 0x60	; 96
    4110:	09 f4       	brne	.+2      	; 0x4114 <__vector_19+0x2c>
    4112:	4c c0       	rjmp	.+152    	; 0x41ac <__vector_19+0xc4>
    4114:	08 f0       	brcs	.+2      	; 0x4118 <__vector_19+0x30>
    4116:	3f c0       	rjmp	.+126    	; 0x4196 <__vector_19+0xae>
    4118:	88 32       	cpi	r24, 0x28	; 40
    411a:	09 f4       	brne	.+2      	; 0x411e <__vector_19+0x36>
    411c:	a4 c0       	rjmp	.+328    	; 0x4266 <__vector_19+0x17e>
    411e:	18 f5       	brcc	.+70     	; 0x4166 <__vector_19+0x7e>
    4120:	80 31       	cpi	r24, 0x10	; 16
    4122:	09 f4       	brne	.+2      	; 0x4126 <__vector_19+0x3e>
    4124:	9a c0       	rjmp	.+308    	; 0x425a <__vector_19+0x172>
    4126:	b8 f4       	brcc	.+46     	; 0x4156 <__vector_19+0x6e>
    4128:	88 23       	and	r24, r24
    412a:	09 f4       	brne	.+2      	; 0x412e <__vector_19+0x46>
    412c:	fe c0       	rjmp	.+508    	; 0x432a <__vector_19+0x242>
    412e:	88 30       	cpi	r24, 0x08	; 8
    4130:	09 f4       	brne	.+2      	; 0x4134 <__vector_19+0x4c>
    4132:	93 c0       	rjmp	.+294    	; 0x425a <__vector_19+0x172>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:696
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    4134:	ff 91       	pop	r31
    4136:	ef 91       	pop	r30
    4138:	bf 91       	pop	r27
    413a:	af 91       	pop	r26
    413c:	9f 91       	pop	r25
    413e:	8f 91       	pop	r24
    4140:	7f 91       	pop	r23
    4142:	6f 91       	pop	r22
    4144:	5f 91       	pop	r21
    4146:	4f 91       	pop	r20
    4148:	3f 91       	pop	r19
    414a:	2f 91       	pop	r18
    414c:	0f 90       	pop	r0
    414e:	0f be       	out	0x3f, r0	; 63
    4150:	0f 90       	pop	r0
    4152:	1f 90       	pop	r1
    4154:	18 95       	reti
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4156:	88 31       	cpi	r24, 0x18	; 24
    4158:	09 f4       	brne	.+2      	; 0x415c <__vector_19+0x74>
    415a:	85 c0       	rjmp	.+266    	; 0x4266 <__vector_19+0x17e>
    415c:	80 32       	cpi	r24, 0x20	; 32
    415e:	51 f7       	brne	.-44     	; 0x4134 <__vector_19+0x4c>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:570
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4160:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <twi_error>
    4164:	15 c0       	rjmp	.+42     	; 0x4190 <__vector_19+0xa8>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4166:	80 34       	cpi	r24, 0x40	; 64
    4168:	09 f4       	brne	.+2      	; 0x416c <__vector_19+0x84>
    416a:	a1 c0       	rjmp	.+322    	; 0x42ae <__vector_19+0x1c6>
    416c:	48 f4       	brcc	.+18     	; 0x4180 <__vector_19+0x98>
    416e:	80 33       	cpi	r24, 0x30	; 48
    4170:	b9 f3       	breq	.-18     	; 0x4160 <__vector_19+0x78>
    4172:	88 33       	cpi	r24, 0x38	; 56
    4174:	f9 f6       	brne	.-66     	; 0x4134 <__vector_19+0x4c>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:574
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4176:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <twi_error>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:575
      twi_releaseBus();
    417a:	0e 94 6f 20 	call	0x40de	; 0x40de <twi_releaseBus>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:576
      break;
    417e:	da cf       	rjmp	.-76     	; 0x4134 <__vector_19+0x4c>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4180:	80 35       	cpi	r24, 0x50	; 80
    4182:	09 f4       	brne	.+2      	; 0x4186 <__vector_19+0x9e>
    4184:	85 c0       	rjmp	.+266    	; 0x4290 <__vector_19+0x1a8>
    4186:	88 35       	cpi	r24, 0x58	; 88
    4188:	09 f4       	brne	.+2      	; 0x418c <__vector_19+0xa4>
    418a:	99 c0       	rjmp	.+306    	; 0x42be <__vector_19+0x1d6>
    418c:	88 34       	cpi	r24, 0x48	; 72
    418e:	91 f6       	brne	.-92     	; 0x4134 <__vector_19+0x4c>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:693
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    4190:	0e 94 67 20 	call	0x40ce	; 0x40ce <twi_stop>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:696
      break;
  }
}
    4194:	cf cf       	rjmp	.-98     	; 0x4134 <__vector_19+0x4c>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4196:	88 39       	cpi	r24, 0x98	; 152
    4198:	09 f4       	brne	.+2      	; 0x419c <__vector_19+0xb4>
    419a:	8f c0       	rjmp	.+286    	; 0x42ba <__vector_19+0x1d2>
    419c:	30 f5       	brcc	.+76     	; 0x41ea <__vector_19+0x102>
    419e:	88 37       	cpi	r24, 0x78	; 120
    41a0:	29 f0       	breq	.+10     	; 0x41ac <__vector_19+0xc4>
    41a2:	50 f4       	brcc	.+20     	; 0x41b8 <__vector_19+0xd0>
    41a4:	88 36       	cpi	r24, 0x68	; 104
    41a6:	11 f0       	breq	.+4      	; 0x41ac <__vector_19+0xc4>
    41a8:	80 37       	cpi	r24, 0x70	; 112
    41aa:	21 f6       	brne	.-120    	; 0x4134 <__vector_19+0x4c>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:616
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    41ac:	83 e0       	ldi	r24, 0x03	; 3
    41ae:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <twi_state>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:618
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    41b2:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <twi_rxBufferIndex>
    41b6:	54 c0       	rjmp	.+168    	; 0x4260 <__vector_19+0x178>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    41b8:	88 38       	cpi	r24, 0x88	; 136
    41ba:	09 f4       	brne	.+2      	; 0x41be <__vector_19+0xd6>
    41bc:	7e c0       	rjmp	.+252    	; 0x42ba <__vector_19+0x1d2>
    41be:	80 39       	cpi	r24, 0x90	; 144
    41c0:	19 f0       	breq	.+6      	; 0x41c8 <__vector_19+0xe0>
    41c2:	80 38       	cpi	r24, 0x80	; 128
    41c4:	09 f0       	breq	.+2      	; 0x41c8 <__vector_19+0xe0>
    41c6:	b6 cf       	rjmp	.-148    	; 0x4134 <__vector_19+0x4c>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:624
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    41c8:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <twi_rxBufferIndex>
    41cc:	80 32       	cpi	r24, 0x20	; 32
    41ce:	08 f0       	brcs	.+2      	; 0x41d2 <__vector_19+0xea>
    41d0:	74 c0       	rjmp	.+232    	; 0x42ba <__vector_19+0x1d2>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:626
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    41d2:	e0 91 3d 02 	lds	r30, 0x023D	; 0x80023d <twi_rxBufferIndex>
    41d6:	81 e0       	ldi	r24, 0x01	; 1
    41d8:	8e 0f       	add	r24, r30
    41da:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <twi_rxBufferIndex>
    41de:	83 b1       	in	r24, 0x03	; 3
    41e0:	f0 e0       	ldi	r31, 0x00	; 0
    41e2:	e2 5c       	subi	r30, 0xC2	; 194
    41e4:	fd 4f       	sbci	r31, 0xFD	; 253
    41e6:	80 83       	st	Z, r24
    41e8:	3b c0       	rjmp	.+118    	; 0x4260 <__vector_19+0x178>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    41ea:	80 3b       	cpi	r24, 0xB0	; 176
    41ec:	39 f0       	breq	.+14     	; 0x41fc <__vector_19+0x114>
    41ee:	e0 f4       	brcc	.+56     	; 0x4228 <__vector_19+0x140>
    41f0:	80 3a       	cpi	r24, 0xA0	; 160
    41f2:	09 f4       	brne	.+2      	; 0x41f6 <__vector_19+0x10e>
    41f4:	7f c0       	rjmp	.+254    	; 0x42f4 <__vector_19+0x20c>
    41f6:	88 3a       	cpi	r24, 0xA8	; 168
    41f8:	09 f0       	breq	.+2      	; 0x41fc <__vector_19+0x114>
    41fa:	9c cf       	rjmp	.-200    	; 0x4134 <__vector_19+0x4c>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:655

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    41fc:	84 e0       	ldi	r24, 0x04	; 4
    41fe:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <twi_state>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:657
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4202:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <twi_txBufferIndex>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:659
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4206:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <twi_txBufferLength>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:662
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    420a:	e0 91 86 02 	lds	r30, 0x0286	; 0x800286 <twi_onSlaveTransmit>
    420e:	f0 91 87 02 	lds	r31, 0x0287	; 0x800287 <twi_onSlaveTransmit+0x1>
    4212:	09 95       	icall
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:664
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4214:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <twi_txBufferLength>
    4218:	81 11       	cpse	r24, r1
    421a:	0f c0       	rjmp	.+30     	; 0x423a <__vector_19+0x152>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:665
        twi_txBufferLength = 1;
    421c:	81 e0       	ldi	r24, 0x01	; 1
    421e:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <twi_txBufferLength>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:666
        twi_txBuffer[0] = 0x00;
    4222:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <twi_txBuffer>
    4226:	09 c0       	rjmp	.+18     	; 0x423a <__vector_19+0x152>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    4228:	80 3c       	cpi	r24, 0xC0	; 192
    422a:	09 f4       	brne	.+2      	; 0x422e <__vector_19+0x146>
    422c:	7c c0       	rjmp	.+248    	; 0x4326 <__vector_19+0x23e>
    422e:	88 3c       	cpi	r24, 0xC8	; 200
    4230:	09 f4       	brne	.+2      	; 0x4234 <__vector_19+0x14c>
    4232:	79 c0       	rjmp	.+242    	; 0x4326 <__vector_19+0x23e>
    4234:	88 3b       	cpi	r24, 0xB8	; 184
    4236:	09 f0       	breq	.+2      	; 0x423a <__vector_19+0x152>
    4238:	7d cf       	rjmp	.-262    	; 0x4134 <__vector_19+0x4c>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:672
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    423a:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <twi_txBufferIndex>
    423e:	81 e0       	ldi	r24, 0x01	; 1
    4240:	8e 0f       	add	r24, r30
    4242:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <twi_txBufferIndex>
    4246:	f0 e0       	ldi	r31, 0x00	; 0
    4248:	e0 5a       	subi	r30, 0xA0	; 160
    424a:	fd 4f       	sbci	r31, 0xFD	; 253
    424c:	80 81       	ld	r24, Z
    424e:	83 b9       	out	0x03, r24	; 3
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:674
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4250:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <twi_txBufferIndex>
    4254:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <twi_txBufferLength>
    4258:	2e c0       	rjmp	.+92     	; 0x42b6 <__vector_19+0x1ce>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:540
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    425a:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <twi_slarw>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:550
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    425e:	83 b9       	out	0x03, r24	; 3
twi_reply():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4260:	85 ec       	ldi	r24, 0xC5	; 197
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4262:	86 bf       	out	0x36, r24	; 54
    4264:	67 cf       	rjmp	.-306    	; 0x4134 <__vector_19+0x4c>
__vector_19():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:548

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4266:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <twi_masterBufferIndex>
    426a:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <twi_masterBufferLength>
    426e:	98 17       	cp	r25, r24
    4270:	a8 f5       	brcc	.+106    	; 0x42dc <__vector_19+0x1f4>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:550
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4272:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <twi_masterBuffer>
    4276:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <twi_masterBuffer+0x1>
    427a:	e0 91 81 02 	lds	r30, 0x0281	; 0x800281 <twi_masterBufferIndex>
    427e:	21 e0       	ldi	r18, 0x01	; 1
    4280:	2e 0f       	add	r18, r30
    4282:	20 93 81 02 	sts	0x0281, r18	; 0x800281 <twi_masterBufferIndex>
    4286:	e8 0f       	add	r30, r24
    4288:	f9 2f       	mov	r31, r25
    428a:	f1 1d       	adc	r31, r1
    428c:	80 81       	ld	r24, Z
    428e:	e7 cf       	rjmp	.-50     	; 0x425e <__vector_19+0x176>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:581
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4290:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <twi_masterBuffer>
    4294:	30 91 83 02 	lds	r19, 0x0283	; 0x800283 <twi_masterBuffer+0x1>
    4298:	e0 91 81 02 	lds	r30, 0x0281	; 0x800281 <twi_masterBufferIndex>
    429c:	81 e0       	ldi	r24, 0x01	; 1
    429e:	8e 0f       	add	r24, r30
    42a0:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <twi_masterBufferIndex>
    42a4:	83 b1       	in	r24, 0x03	; 3
    42a6:	e2 0f       	add	r30, r18
    42a8:	f3 2f       	mov	r31, r19
    42aa:	f1 1d       	adc	r31, r1
    42ac:	80 83       	st	Z, r24
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:585
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    42ae:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <twi_masterBufferIndex>
    42b2:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <twi_masterBufferLength>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:674
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    42b6:	98 17       	cp	r25, r24
    42b8:	98 f2       	brcs	.-90     	; 0x4260 <__vector_19+0x178>
twi_reply():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    42ba:	85 e8       	ldi	r24, 0x85	; 133
    42bc:	d2 cf       	rjmp	.-92     	; 0x4262 <__vector_19+0x17a>
__vector_19():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:593
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    42be:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <twi_masterBuffer>
    42c2:	30 91 83 02 	lds	r19, 0x0283	; 0x800283 <twi_masterBuffer+0x1>
    42c6:	e0 91 81 02 	lds	r30, 0x0281	; 0x800281 <twi_masterBufferIndex>
    42ca:	81 e0       	ldi	r24, 0x01	; 1
    42cc:	8e 0f       	add	r24, r30
    42ce:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <twi_masterBufferIndex>
    42d2:	83 b1       	in	r24, 0x03	; 3
    42d4:	e2 0f       	add	r30, r18
    42d6:	f3 2f       	mov	r31, r19
    42d8:	f1 1d       	adc	r31, r1
    42da:	80 83       	st	Z, r24
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:594
  if (twi_sendStop)
    42dc:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <twi_sendStop>
    42e0:	81 11       	cpse	r24, r1
    42e2:	56 cf       	rjmp	.-340    	; 0x4190 <__vector_19+0xa8>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:597
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    42e4:	81 e0       	ldi	r24, 0x01	; 1
    42e6:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <twi_inRepStart>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:601
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    42ea:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    42ec:	86 bf       	out	0x36, r24	; 54
__vector_19():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:685
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    42ee:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <twi_state>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:686
      break;
    42f2:	20 cf       	rjmp	.-448    	; 0x4134 <__vector_19+0x4c>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:635
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    42f4:	0e 94 6f 20 	call	0x40de	; 0x40de <twi_releaseBus>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:637
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    42f8:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <twi_rxBufferIndex>
    42fc:	80 32       	cpi	r24, 0x20	; 32
    42fe:	30 f4       	brcc	.+12     	; 0x430c <__vector_19+0x224>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:638
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4300:	e0 91 3d 02 	lds	r30, 0x023D	; 0x80023d <twi_rxBufferIndex>
    4304:	f0 e0       	ldi	r31, 0x00	; 0
    4306:	e2 5c       	subi	r30, 0xC2	; 194
    4308:	fd 4f       	sbci	r31, 0xFD	; 253
    430a:	10 82       	st	Z, r1
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:641
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    430c:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <twi_rxBufferIndex>
    4310:	70 e0       	ldi	r23, 0x00	; 0
    4312:	e0 91 84 02 	lds	r30, 0x0284	; 0x800284 <twi_onSlaveReceive>
    4316:	f0 91 85 02 	lds	r31, 0x0285	; 0x800285 <twi_onSlaveReceive+0x1>
    431a:	8e e3       	ldi	r24, 0x3E	; 62
    431c:	92 e0       	ldi	r25, 0x02	; 2
    431e:	09 95       	icall
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:643
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4320:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <twi_rxBufferIndex>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:644
      break;
    4324:	07 cf       	rjmp	.-498    	; 0x4134 <__vector_19+0x4c>
twi_reply():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4326:	85 ec       	ldi	r24, 0xC5	; 197
    4328:	e1 cf       	rjmp	.-62     	; 0x42ec <__vector_19+0x204>
__vector_19():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/libraries/Wire/src/utility/twi.c:692

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    432a:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <twi_error>
    432e:	30 cf       	rjmp	.-416    	; 0x4190 <__vector_19+0xa8>

00004330 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    4330:	fc 01       	movw	r30, r24
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    4332:	91 8d       	ldd	r25, Z+25	; 0x19
    4334:	22 8d       	ldd	r18, Z+26	; 0x1a
    4336:	89 2f       	mov	r24, r25
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	80 58       	subi	r24, 0x80	; 128
    433c:	9f 4f       	sbci	r25, 0xFF	; 255
    433e:	82 1b       	sub	r24, r18
    4340:	91 09       	sbc	r25, r1
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:166
}
    4342:	8f 77       	andi	r24, 0x7F	; 127
    4344:	99 27       	eor	r25, r25
    4346:	08 95       	ret

00004348 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:169

int HardwareSerial::peek(void)
{
    4348:	fc 01       	movw	r30, r24
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
    434a:	91 8d       	ldd	r25, Z+25	; 0x19
    434c:	82 8d       	ldd	r24, Z+26	; 0x1a
    434e:	98 17       	cp	r25, r24
    4350:	31 f0       	breq	.+12     	; 0x435e <HardwareSerial::peek()+0x16>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    4352:	82 8d       	ldd	r24, Z+26	; 0x1a
    4354:	e8 0f       	add	r30, r24
    4356:	f1 1d       	adc	r31, r1
    4358:	85 8d       	ldd	r24, Z+29	; 0x1d
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	08 95       	ret
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    435e:	8f ef       	ldi	r24, 0xFF	; 255
    4360:	9f ef       	ldi	r25, 0xFF	; 255
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    4362:	08 95       	ret

00004364 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:178

int HardwareSerial::read(void)
{
    4364:	fc 01       	movw	r30, r24
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    4366:	91 8d       	ldd	r25, Z+25	; 0x19
    4368:	82 8d       	ldd	r24, Z+26	; 0x1a
    436a:	98 17       	cp	r25, r24
    436c:	61 f0       	breq	.+24     	; 0x4386 <HardwareSerial::read()+0x22>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    436e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4370:	ae 0f       	add	r26, r30
    4372:	bf 2f       	mov	r27, r31
    4374:	b1 1d       	adc	r27, r1
    4376:	5d 96       	adiw	r26, 0x1d	; 29
    4378:	8c 91       	ld	r24, X
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    437a:	92 8d       	ldd	r25, Z+26	; 0x1a
    437c:	9f 5f       	subi	r25, 0xFF	; 255
    437e:	9f 77       	andi	r25, 0x7F	; 127
    4380:	92 8f       	std	Z+26, r25	; 0x1a
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
    4382:	90 e0       	ldi	r25, 0x00	; 0
    4384:	08 95       	ret
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    4386:	8f ef       	ldi	r24, 0xFF	; 255
    4388:	9f ef       	ldi	r25, 0xFF	; 255
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    438a:	08 95       	ret

0000438c <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    438c:	fc 01       	movw	r30, r24
    438e:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
    4390:	44 8d       	ldd	r20, Z+28	; 0x1c
    4392:	25 2f       	mov	r18, r21
    4394:	30 e0       	ldi	r19, 0x00	; 0
    4396:	84 2f       	mov	r24, r20
    4398:	90 e0       	ldi	r25, 0x00	; 0
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    439a:	82 1b       	sub	r24, r18
    439c:	93 0b       	sbc	r25, r19
    439e:	54 17       	cp	r21, r20
    43a0:	10 f0       	brcs	.+4      	; 0x43a6 <HardwareSerial::availableForWrite()+0x1a>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:198 (discriminator 1)
    43a2:	cf 96       	adiw	r24, 0x3f	; 63
    43a4:	08 95       	ret
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
    43a6:	01 97       	sbiw	r24, 0x01	; 1
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:200
}
    43a8:	08 95       	ret

000043aa <serialEventRun()>:
_Z14serialEventRunv():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    43aa:	81 e2       	ldi	r24, 0x21	; 33
    43ac:	93 e2       	ldi	r25, 0x23	; 35
    43ae:	89 2b       	or	r24, r25
    43b0:	49 f0       	breq	.+18     	; 0x43c4 <serialEventRun()+0x1a>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 1)
    43b2:	86 e4       	ldi	r24, 0x46	; 70
    43b4:	96 e0       	ldi	r25, 0x06	; 6
    43b6:	89 2b       	or	r24, r25
    43b8:	29 f0       	breq	.+10     	; 0x43c4 <serialEventRun()+0x1a>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 3)
    43ba:	0e 94 21 23 	call	0x4642	; 0x4642 <Serial0_available()>
    43be:	81 11       	cpse	r24, r1
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67
    43c0:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <serialEvent()>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    43c4:	08 95       	ret

000043c6 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    43c6:	fc 01       	movw	r30, r24
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    43c8:	a4 8d       	ldd	r26, Z+28	; 0x1c
    43ca:	a8 0f       	add	r26, r24
    43cc:	b9 2f       	mov	r27, r25
    43ce:	b1 1d       	adc	r27, r1
    43d0:	a3 56       	subi	r26, 0x63	; 99
    43d2:	bf 4f       	sbci	r27, 0xFF	; 255
    43d4:	2c 91       	ld	r18, X
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    43d6:	84 8d       	ldd	r24, Z+28	; 0x1c
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	01 96       	adiw	r24, 0x01	; 1
    43dc:	8f 73       	andi	r24, 0x3F	; 63
    43de:	99 27       	eor	r25, r25
    43e0:	84 8f       	std	Z+28, r24	; 0x1c
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
    43e2:	a6 89       	ldd	r26, Z+22	; 0x16
    43e4:	b7 89       	ldd	r27, Z+23	; 0x17
    43e6:	2c 93       	st	X, r18
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:106
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
    43e8:	a0 89       	ldd	r26, Z+16	; 0x10
    43ea:	b1 89       	ldd	r27, Z+17	; 0x11
    43ec:	8c 91       	ld	r24, X
    43ee:	82 74       	andi	r24, 0x42	; 66
    43f0:	8c 93       	st	X, r24
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:109
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    43f2:	93 8d       	ldd	r25, Z+27	; 0x1b
    43f4:	84 8d       	ldd	r24, Z+28	; 0x1c
    43f6:	98 13       	cpse	r25, r24
    43f8:	06 c0       	rjmp	.+12     	; 0x4406 <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    43fa:	02 88       	ldd	r0, Z+18	; 0x12
    43fc:	f3 89       	ldd	r31, Z+19	; 0x13
    43fe:	e0 2d       	mov	r30, r0
    4400:	80 81       	ld	r24, Z
    4402:	8f 7d       	andi	r24, 0xDF	; 223
    4404:	80 83       	st	Z, r24
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
    4406:	08 95       	ret

00004408 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    4408:	cf 93       	push	r28
    440a:	df 93       	push	r29
    440c:	ec 01       	movw	r28, r24
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    440e:	88 8d       	ldd	r24, Y+24	; 0x18
    4410:	88 23       	and	r24, r24
    4412:	b9 f0       	breq	.+46     	; 0x4442 <HardwareSerial::flush()+0x3a>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    4414:	aa 89       	ldd	r26, Y+18	; 0x12
    4416:	bb 89       	ldd	r27, Y+19	; 0x13
    4418:	e8 89       	ldd	r30, Y+16	; 0x10
    441a:	f9 89       	ldd	r31, Y+17	; 0x11
    441c:	8c 91       	ld	r24, X
    441e:	85 fd       	sbrc	r24, 5
    4420:	03 c0       	rjmp	.+6      	; 0x4428 <HardwareSerial::flush()+0x20>
    4422:	80 81       	ld	r24, Z
    4424:	86 fd       	sbrc	r24, 6
    4426:	0d c0       	rjmp	.+26     	; 0x4442 <HardwareSerial::flush()+0x3a>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    4428:	0f b6       	in	r0, 0x3f	; 63
    442a:	07 fc       	sbrc	r0, 7
    442c:	f7 cf       	rjmp	.-18     	; 0x441c <HardwareSerial::flush()+0x14>
    442e:	8c 91       	ld	r24, X
    4430:	85 ff       	sbrs	r24, 5
    4432:	f2 cf       	rjmp	.-28     	; 0x4418 <HardwareSerial::flush()+0x10>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    4434:	80 81       	ld	r24, Z
    4436:	85 ff       	sbrs	r24, 5
    4438:	ed cf       	rjmp	.-38     	; 0x4414 <HardwareSerial::flush()+0xc>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
    443a:	ce 01       	movw	r24, r28
    443c:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <HardwareSerial::_tx_udr_empty_irq()>
    4440:	e9 cf       	rjmp	.-46     	; 0x4414 <HardwareSerial::flush()+0xc>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    4442:	df 91       	pop	r29
    4444:	cf 91       	pop	r28
    4446:	08 95       	ret

00004448 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:223

size_t HardwareSerial::write(uint8_t c)
{
    4448:	ef 92       	push	r14
    444a:	ff 92       	push	r15
    444c:	0f 93       	push	r16
    444e:	1f 93       	push	r17
    4450:	cf 93       	push	r28
    4452:	df 93       	push	r29
    4454:	ec 01       	movw	r28, r24
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
    4456:	81 e0       	ldi	r24, 0x01	; 1
    4458:	88 8f       	std	Y+24, r24	; 0x18
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    445a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    445c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    445e:	98 13       	cpse	r25, r24
    4460:	19 c0       	rjmp	.+50     	; 0x4494 <HardwareSerial::write(unsigned char)+0x4c>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:229 (discriminator 1)
    4462:	e8 89       	ldd	r30, Y+16	; 0x10
    4464:	f9 89       	ldd	r31, Y+17	; 0x11
    4466:	80 81       	ld	r24, Z
    4468:	85 ff       	sbrs	r24, 5
    446a:	14 c0       	rjmp	.+40     	; 0x4494 <HardwareSerial::write(unsigned char)+0x4c>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    446c:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/horo/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    446e:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
    4470:	ee 89       	ldd	r30, Y+22	; 0x16
    4472:	ff 89       	ldd	r31, Y+23	; 0x17
    4474:	60 83       	st	Z, r22
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:243
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
      #else
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
    4476:	e8 89       	ldd	r30, Y+16	; 0x10
    4478:	f9 89       	ldd	r31, Y+17	; 0x11
    447a:	80 81       	ld	r24, Z
    447c:	82 74       	andi	r24, 0x42	; 66
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
    447e:	80 83       	st	Z, r24
__iRestore():
/home/horo/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4480:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
    4482:	81 e0       	ldi	r24, 0x01	; 1
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	df 91       	pop	r29
    4488:	cf 91       	pop	r28
    448a:	1f 91       	pop	r17
    448c:	0f 91       	pop	r16
    448e:	ff 90       	pop	r15
    4490:	ef 90       	pop	r14
    4492:	08 95       	ret
    4494:	f6 2e       	mov	r15, r22
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    4496:	0b 8d       	ldd	r16, Y+27	; 0x1b
    4498:	10 e0       	ldi	r17, 0x00	; 0
    449a:	0f 5f       	subi	r16, 0xFF	; 255
    449c:	1f 4f       	sbci	r17, 0xFF	; 255
    449e:	0f 73       	andi	r16, 0x3F	; 63
    44a0:	11 27       	eor	r17, r17
    44a2:	e0 2e       	mov	r14, r16
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    44a4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    44a6:	8e 11       	cpse	r24, r14
    44a8:	0c c0       	rjmp	.+24     	; 0x44c2 <HardwareSerial::write(unsigned char)+0x7a>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
    44aa:	0f b6       	in	r0, 0x3f	; 63
    44ac:	07 fc       	sbrc	r0, 7
    44ae:	fa cf       	rjmp	.-12     	; 0x44a4 <HardwareSerial::write(unsigned char)+0x5c>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    44b0:	e8 89       	ldd	r30, Y+16	; 0x10
    44b2:	f9 89       	ldd	r31, Y+17	; 0x11
    44b4:	80 81       	ld	r24, Z
    44b6:	85 ff       	sbrs	r24, 5
    44b8:	f5 cf       	rjmp	.-22     	; 0x44a4 <HardwareSerial::write(unsigned char)+0x5c>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
    44ba:	ce 01       	movw	r24, r28
    44bc:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <HardwareSerial::_tx_udr_empty_irq()>
    44c0:	f1 cf       	rjmp	.-30     	; 0x44a4 <HardwareSerial::write(unsigned char)+0x5c>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    44c2:	eb 8d       	ldd	r30, Y+27	; 0x1b
    44c4:	ec 0f       	add	r30, r28
    44c6:	fd 2f       	mov	r31, r29
    44c8:	f1 1d       	adc	r31, r1
    44ca:	e3 56       	subi	r30, 0x63	; 99
    44cc:	ff 4f       	sbci	r31, 0xFF	; 255
    44ce:	f0 82       	st	Z, r15
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    44d0:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/horo/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    44d2:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
    44d4:	0b 8f       	std	Y+27, r16	; 0x1b
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
    44d6:	ea 89       	ldd	r30, Y+18	; 0x12
    44d8:	fb 89       	ldd	r31, Y+19	; 0x13
    44da:	80 81       	ld	r24, Z
    44dc:	80 62       	ori	r24, 0x20	; 32
    44de:	cf cf       	rjmp	.-98     	; 0x447e <HardwareSerial::write(unsigned char)+0x36>

000044e0 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:118
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    44e0:	cf 92       	push	r12
    44e2:	df 92       	push	r13
    44e4:	ef 92       	push	r14
    44e6:	ff 92       	push	r15
    44e8:	1f 93       	push	r17
    44ea:	cf 93       	push	r28
    44ec:	df 93       	push	r29
    44ee:	ec 01       	movw	r28, r24
    44f0:	6a 01       	movw	r12, r20
    44f2:	7b 01       	movw	r14, r22
    44f4:	12 2f       	mov	r17, r18
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:121
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    44f6:	e8 89       	ldd	r30, Y+16	; 0x10
    44f8:	f9 89       	ldd	r31, Y+17	; 0x11
    44fa:	82 e0       	ldi	r24, 0x02	; 2
    44fc:	80 83       	st	Z, r24
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:128
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    44fe:	c1 14       	cp	r12, r1
    4500:	81 ee       	ldi	r24, 0xE1	; 225
    4502:	d8 06       	cpc	r13, r24
    4504:	e1 04       	cpc	r14, r1
    4506:	f1 04       	cpc	r15, r1
    4508:	a1 f0       	breq	.+40     	; 0x4532 <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:120 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    450a:	60 e0       	ldi	r22, 0x00	; 0
    450c:	79 e0       	ldi	r23, 0x09	; 9
    450e:	8d e3       	ldi	r24, 0x3D	; 61
    4510:	90 e0       	ldi	r25, 0x00	; 0
    4512:	a7 01       	movw	r20, r14
    4514:	96 01       	movw	r18, r12
    4516:	0e 94 5d 27 	call	0x4eba	; 0x4eba <__udivmodsi4>
    451a:	21 50       	subi	r18, 0x01	; 1
    451c:	31 09       	sbc	r19, r1
    451e:	41 09       	sbc	r20, r1
    4520:	51 09       	sbc	r21, r1
    4522:	56 95       	lsr	r21
    4524:	47 95       	ror	r20
    4526:	37 95       	ror	r19
    4528:	27 95       	ror	r18
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:128 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    452a:	21 15       	cp	r18, r1
    452c:	80 e1       	ldi	r24, 0x10	; 16
    452e:	38 07       	cpc	r19, r24
    4530:	98 f0       	brcs	.+38     	; 0x4558 <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:130
  {
    *_ucsra = 0;
    4532:	e8 89       	ldd	r30, Y+16	; 0x10
    4534:	f9 89       	ldd	r31, Y+17	; 0x11
    4536:	10 82       	st	Z, r1
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:131
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4538:	60 e8       	ldi	r22, 0x80	; 128
    453a:	74 e8       	ldi	r23, 0x84	; 132
    453c:	8e e1       	ldi	r24, 0x1E	; 30
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	a7 01       	movw	r20, r14
    4542:	96 01       	movw	r18, r12
    4544:	0e 94 5d 27 	call	0x4eba	; 0x4eba <__udivmodsi4>
    4548:	21 50       	subi	r18, 0x01	; 1
    454a:	31 09       	sbc	r19, r1
    454c:	41 09       	sbc	r20, r1
    454e:	51 09       	sbc	r21, r1
    4550:	56 95       	lsr	r21
    4552:	47 95       	ror	r20
    4554:	37 95       	ror	r19
    4556:	27 95       	ror	r18
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:135
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4558:	ec 85       	ldd	r30, Y+12	; 0x0c
    455a:	fd 85       	ldd	r31, Y+13	; 0x0d
    455c:	30 83       	st	Z, r19
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    455e:	ee 85       	ldd	r30, Y+14	; 0x0e
    4560:	ff 85       	ldd	r31, Y+15	; 0x0f
    4562:	20 83       	st	Z, r18
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    4564:	18 8e       	std	Y+24, r1	; 0x18
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:144

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
    4566:	10 68       	ori	r17, 0x80	; 128
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:146
#endif
  *_ucsrc = config;
    4568:	ec 89       	ldd	r30, Y+20	; 0x14
    456a:	fd 89       	ldd	r31, Y+21	; 0x15
    456c:	10 83       	st	Z, r17
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    456e:	ea 89       	ldd	r30, Y+18	; 0x12
    4570:	fb 89       	ldd	r31, Y+19	; 0x13
    4572:	80 81       	ld	r24, Z
    4574:	88 69       	ori	r24, 0x98	; 152
    4576:	80 83       	st	Z, r24
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    4578:	ea 89       	ldd	r30, Y+18	; 0x12
    457a:	fb 89       	ldd	r31, Y+19	; 0x13
    457c:	80 81       	ld	r24, Z
    457e:	8f 7d       	andi	r24, 0xDF	; 223
    4580:	80 83       	st	Z, r24
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial.cpp:150
}
    4582:	df 91       	pop	r29
    4584:	cf 91       	pop	r28
    4586:	1f 91       	pop	r17
    4588:	ff 90       	pop	r15
    458a:	ef 90       	pop	r14
    458c:	df 90       	pop	r13
    458e:	cf 90       	pop	r12
    4590:	08 95       	ret

00004592 <__vector_13>:
__vector_13():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    4592:	1f 92       	push	r1
    4594:	0f 92       	push	r0
    4596:	0f b6       	in	r0, 0x3f	; 63
    4598:	0f 92       	push	r0
    459a:	11 24       	eor	r1, r1
    459c:	2f 93       	push	r18
    459e:	8f 93       	push	r24
    45a0:	9f 93       	push	r25
    45a2:	ef 93       	push	r30
    45a4:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    45a6:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <Serial+0x10>
    45aa:	f0 91 9d 02 	lds	r31, 0x029D	; 0x80029d <Serial+0x11>
    45ae:	80 81       	ld	r24, Z
    45b0:	e0 91 a2 02 	lds	r30, 0x02A2	; 0x8002a2 <Serial+0x16>
    45b4:	f0 91 a3 02 	lds	r31, 0x02A3	; 0x8002a3 <Serial+0x17>
    45b8:	82 fd       	sbrc	r24, 2
    45ba:	1b c0       	rjmp	.+54     	; 0x45f2 <__vector_13+0x60>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    45bc:	90 81       	ld	r25, Z
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    45be:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <Serial+0x19>
    45c2:	8f 5f       	subi	r24, 0xFF	; 255
    45c4:	8f 77       	andi	r24, 0x7F	; 127
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    45c6:	20 91 a6 02 	lds	r18, 0x02A6	; 0x8002a6 <Serial+0x1a>
    45ca:	82 17       	cp	r24, r18
    45cc:	41 f0       	breq	.+16     	; 0x45de <__vector_13+0x4c>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    45ce:	e0 91 a5 02 	lds	r30, 0x02A5	; 0x8002a5 <Serial+0x19>
    45d2:	f0 e0       	ldi	r31, 0x00	; 0
    45d4:	e4 57       	subi	r30, 0x74	; 116
    45d6:	fd 4f       	sbci	r31, 0xFD	; 253
    45d8:	95 8f       	std	Z+29, r25	; 0x1d
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    45da:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <Serial+0x19>
__vector_13():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    45de:	ff 91       	pop	r31
    45e0:	ef 91       	pop	r30
    45e2:	9f 91       	pop	r25
    45e4:	8f 91       	pop	r24
    45e6:	2f 91       	pop	r18
    45e8:	0f 90       	pop	r0
    45ea:	0f be       	out	0x3f, r0	; 63
    45ec:	0f 90       	pop	r0
    45ee:	1f 90       	pop	r1
    45f0:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    45f2:	80 81       	ld	r24, Z
__vector_13():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    45f4:	f4 cf       	rjmp	.-24     	; 0x45de <__vector_13+0x4c>

000045f6 <__vector_14>:
__vector_14():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    45f6:	1f 92       	push	r1
    45f8:	0f 92       	push	r0
    45fa:	0f b6       	in	r0, 0x3f	; 63
    45fc:	0f 92       	push	r0
    45fe:	11 24       	eor	r1, r1
    4600:	2f 93       	push	r18
    4602:	3f 93       	push	r19
    4604:	4f 93       	push	r20
    4606:	5f 93       	push	r21
    4608:	6f 93       	push	r22
    460a:	7f 93       	push	r23
    460c:	8f 93       	push	r24
    460e:	9f 93       	push	r25
    4610:	af 93       	push	r26
    4612:	bf 93       	push	r27
    4614:	ef 93       	push	r30
    4616:	ff 93       	push	r31
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    4618:	8c e8       	ldi	r24, 0x8C	; 140
    461a:	92 e0       	ldi	r25, 0x02	; 2
    461c:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <HardwareSerial::_tx_udr_empty_irq()>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
    4620:	ff 91       	pop	r31
    4622:	ef 91       	pop	r30
    4624:	bf 91       	pop	r27
    4626:	af 91       	pop	r26
    4628:	9f 91       	pop	r25
    462a:	8f 91       	pop	r24
    462c:	7f 91       	pop	r23
    462e:	6f 91       	pop	r22
    4630:	5f 91       	pop	r21
    4632:	4f 91       	pop	r20
    4634:	3f 91       	pop	r19
    4636:	2f 91       	pop	r18
    4638:	0f 90       	pop	r0
    463a:	0f be       	out	0x3f, r0	; 63
    463c:	0f 90       	pop	r0
    463e:	1f 90       	pop	r1
    4640:	18 95       	reti

00004642 <Serial0_available()>:
_Z17Serial0_availablev():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    4642:	8c e8       	ldi	r24, 0x8C	; 140
    4644:	92 e0       	ldi	r25, 0x02	; 2
    4646:	0e 94 98 21 	call	0x4330	; 0x4330 <HardwareSerial::available()>
    464a:	21 e0       	ldi	r18, 0x01	; 1
    464c:	89 2b       	or	r24, r25
    464e:	09 f4       	brne	.+2      	; 0x4652 <Serial0_available()+0x10>
    4650:	20 e0       	ldi	r18, 0x00	; 0
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
    4652:	82 2f       	mov	r24, r18
    4654:	08 95       	ret

00004656 <_GLOBAL__sub_I___vector_13>:
_ZN5PrintC4Ev():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.h:46
    4656:	ec e8       	ldi	r30, 0x8C	; 140
    4658:	f2 e0       	ldi	r31, 0x02	; 2
    465a:	13 82       	std	Z+3, r1	; 0x03
    465c:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Stream.h:63
    465e:	88 ee       	ldi	r24, 0xE8	; 232
    4660:	93 e0       	ldi	r25, 0x03	; 3
    4662:	a0 e0       	ldi	r26, 0x00	; 0
    4664:	b0 e0       	ldi	r27, 0x00	; 0
    4666:	84 83       	std	Z+4, r24	; 0x04
    4668:	95 83       	std	Z+5, r25	; 0x05
    466a:	a6 83       	std	Z+6, r26	; 0x06
    466c:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    466e:	88 e4       	ldi	r24, 0x48	; 72
    4670:	91 e0       	ldi	r25, 0x01	; 1
    4672:	91 83       	std	Z+1, r25	; 0x01
    4674:	80 83       	st	Z, r24
    4676:	80 e4       	ldi	r24, 0x40	; 64
    4678:	90 e0       	ldi	r25, 0x00	; 0
    467a:	95 87       	std	Z+13, r25	; 0x0d
    467c:	84 87       	std	Z+12, r24	; 0x0c
    467e:	29 e2       	ldi	r18, 0x29	; 41
    4680:	30 e0       	ldi	r19, 0x00	; 0
    4682:	37 87       	std	Z+15, r19	; 0x0f
    4684:	26 87       	std	Z+14, r18	; 0x0e
    4686:	2b e2       	ldi	r18, 0x2B	; 43
    4688:	30 e0       	ldi	r19, 0x00	; 0
    468a:	31 8b       	std	Z+17, r19	; 0x11
    468c:	20 8b       	std	Z+16, r18	; 0x10
    468e:	2a e2       	ldi	r18, 0x2A	; 42
    4690:	30 e0       	ldi	r19, 0x00	; 0
    4692:	33 8b       	std	Z+19, r19	; 0x13
    4694:	22 8b       	std	Z+18, r18	; 0x12
    4696:	95 8b       	std	Z+21, r25	; 0x15
    4698:	84 8b       	std	Z+20, r24	; 0x14
    469a:	8c e2       	ldi	r24, 0x2C	; 44
    469c:	90 e0       	ldi	r25, 0x00	; 0
    469e:	97 8b       	std	Z+23, r25	; 0x17
    46a0:	86 8b       	std	Z+22, r24	; 0x16
    46a2:	11 8e       	std	Z+25, r1	; 0x19
    46a4:	12 8e       	std	Z+26, r1	; 0x1a
    46a6:	13 8e       	std	Z+27, r1	; 0x1b
    46a8:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_13():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
    46aa:	08 95       	ret

000046ac <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:178
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    46ac:	af 92       	push	r10
    46ae:	bf 92       	push	r11
    46b0:	cf 92       	push	r12
    46b2:	df 92       	push	r13
    46b4:	ef 92       	push	r14
    46b6:	ff 92       	push	r15
    46b8:	0f 93       	push	r16
    46ba:	1f 93       	push	r17
    46bc:	cf 93       	push	r28
    46be:	df 93       	push	r29
    46c0:	6c 01       	movw	r12, r24
    46c2:	7b 01       	movw	r14, r22
    46c4:	8b 01       	movw	r16, r22
    46c6:	04 0f       	add	r16, r20
    46c8:	15 1f       	adc	r17, r21
    46ca:	eb 01       	movw	r28, r22
    46cc:	5e 01       	movw	r10, r28
    46ce:	ae 18       	sub	r10, r14
    46d0:	bf 08       	sbc	r11, r15
    46d2:	c0 17       	cp	r28, r16
    46d4:	d1 07       	cpc	r29, r17
    46d6:	59 f0       	breq	.+22     	; 0x46ee <Print::write(unsigned char const*, unsigned int)+0x42>
    46d8:	69 91       	ld	r22, Y+
    46da:	d6 01       	movw	r26, r12
    46dc:	ed 91       	ld	r30, X+
    46de:	fc 91       	ld	r31, X
    46e0:	01 90       	ld	r0, Z+
    46e2:	f0 81       	ld	r31, Z
    46e4:	e0 2d       	mov	r30, r0
    46e6:	c6 01       	movw	r24, r12
    46e8:	09 95       	icall
    46ea:	89 2b       	or	r24, r25
    46ec:	79 f7       	brne	.-34     	; 0x46cc <Print::write(unsigned char const*, unsigned int)+0x20>
    46ee:	c5 01       	movw	r24, r10
    46f0:	df 91       	pop	r29
    46f2:	cf 91       	pop	r28
    46f4:	1f 91       	pop	r17
    46f6:	0f 91       	pop	r16
    46f8:	ff 90       	pop	r15
    46fa:	ef 90       	pop	r14
    46fc:	df 90       	pop	r13
    46fe:	cf 90       	pop	r12
    4700:	bf 90       	pop	r11
    4702:	af 90       	pop	r10
    4704:	08 95       	ret

00004706 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    4706:	fb 01       	movw	r30, r22
    4708:	01 90       	ld	r0, Z+
    470a:	00 20       	and	r0, r0
    470c:	e9 f7       	brne	.-6      	; 0x4708 <Print::write(char const*) [clone .part.2]+0x2>
    470e:	31 97       	sbiw	r30, 0x01	; 1
    4710:	af 01       	movw	r20, r30
    4712:	46 1b       	sub	r20, r22
    4714:	57 0b       	sbc	r21, r23
    4716:	dc 01       	movw	r26, r24
    4718:	ed 91       	ld	r30, X+
    471a:	fc 91       	ld	r31, X
    471c:	02 80       	ldd	r0, Z+2	; 0x02
    471e:	f3 81       	ldd	r31, Z+3	; 0x03
    4720:	e0 2d       	mov	r30, r0
    4722:	09 94       	ijmp

00004724 <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
    4724:	ef 92       	push	r14
    4726:	ff 92       	push	r15
    4728:	0f 93       	push	r16
    472a:	1f 93       	push	r17
    472c:	cf 93       	push	r28
    472e:	df 93       	push	r29
    4730:	8c 01       	movw	r16, r24
    4732:	7b 01       	movw	r14, r22
    4734:	d0 e0       	ldi	r29, 0x00	; 0
    4736:	c0 e0       	ldi	r28, 0x00	; 0
    4738:	f7 01       	movw	r30, r14
    473a:	ec 0f       	add	r30, r28
    473c:	fd 1f       	adc	r31, r29
    473e:	64 91       	lpm	r22, Z
    4740:	66 23       	and	r22, r22
    4742:	61 f0       	breq	.+24     	; 0x475c <Print::print(__FlashStringHelper const*)+0x38>
    4744:	d8 01       	movw	r26, r16
    4746:	ed 91       	ld	r30, X+
    4748:	fc 91       	ld	r31, X
    474a:	01 90       	ld	r0, Z+
    474c:	f0 81       	ld	r31, Z
    474e:	e0 2d       	mov	r30, r0
    4750:	c8 01       	movw	r24, r16
    4752:	09 95       	icall
    4754:	89 2b       	or	r24, r25
    4756:	11 f0       	breq	.+4      	; 0x475c <Print::print(__FlashStringHelper const*)+0x38>
    4758:	21 96       	adiw	r28, 0x01	; 1
    475a:	ee cf       	rjmp	.-36     	; 0x4738 <Print::print(__FlashStringHelper const*)+0x14>
    475c:	ce 01       	movw	r24, r28
    475e:	df 91       	pop	r29
    4760:	cf 91       	pop	r28
    4762:	1f 91       	pop	r17
    4764:	0f 91       	pop	r16
    4766:	ff 90       	pop	r15
    4768:	ef 90       	pop	r14
    476a:	08 95       	ret

0000476c <Print::print(char const*)>:
_ZN5Print5writeEPKc():
    476c:	61 15       	cp	r22, r1
    476e:	71 05       	cpc	r23, r1
    4770:	11 f0       	breq	.+4      	; 0x4776 <Print::print(char const*)+0xa>
    4772:	0c 94 83 23 	jmp	0x4706	; 0x4706 <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
    4776:	90 e0       	ldi	r25, 0x00	; 0
    4778:	80 e0       	ldi	r24, 0x00	; 0
    477a:	08 95       	ret

0000477c <Print::print(char)>:
_ZN5Print5printEc():
    477c:	dc 01       	movw	r26, r24
    477e:	ed 91       	ld	r30, X+
    4780:	fc 91       	ld	r31, X
    4782:	01 90       	ld	r0, Z+
    4784:	f0 81       	ld	r31, Z
    4786:	e0 2d       	mov	r30, r0
    4788:	09 94       	ijmp

0000478a <Print::println()>:
_ZN5Print5writeEPKc():
    478a:	66 e5       	ldi	r22, 0x56	; 86
    478c:	71 e0       	ldi	r23, 0x01	; 1
    478e:	0c 94 83 23 	jmp	0x4706	; 0x4706 <Print::write(char const*) [clone .part.2]>

00004792 <Print::println(__FlashStringHelper const*)>:
_ZN5Print7printlnEPK19__FlashStringHelper():
    4792:	0f 93       	push	r16
    4794:	1f 93       	push	r17
    4796:	cf 93       	push	r28
    4798:	df 93       	push	r29
    479a:	ec 01       	movw	r28, r24
    479c:	0e 94 92 23 	call	0x4724	; 0x4724 <Print::print(__FlashStringHelper const*)>
    47a0:	8c 01       	movw	r16, r24
    47a2:	ce 01       	movw	r24, r28
    47a4:	0e 94 c5 23 	call	0x478a	; 0x478a <Print::println()>
    47a8:	80 0f       	add	r24, r16
    47aa:	91 1f       	adc	r25, r17
    47ac:	df 91       	pop	r29
    47ae:	cf 91       	pop	r28
    47b0:	1f 91       	pop	r17
    47b2:	0f 91       	pop	r16
    47b4:	08 95       	ret

000047b6 <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
    47b6:	0f 93       	push	r16
    47b8:	1f 93       	push	r17
    47ba:	cf 93       	push	r28
    47bc:	df 93       	push	r29
    47be:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
    47c0:	d0 e0       	ldi	r29, 0x00	; 0
    47c2:	c0 e0       	ldi	r28, 0x00	; 0
    47c4:	61 15       	cp	r22, r1
    47c6:	71 05       	cpc	r23, r1
    47c8:	19 f0       	breq	.+6      	; 0x47d0 <Print::println(char const*)+0x1a>
    47ca:	0e 94 83 23 	call	0x4706	; 0x4706 <Print::write(char const*) [clone .part.2]>
    47ce:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
    47d0:	c8 01       	movw	r24, r16
    47d2:	0e 94 c5 23 	call	0x478a	; 0x478a <Print::println()>
    47d6:	8c 0f       	add	r24, r28
    47d8:	9d 1f       	adc	r25, r29
    47da:	df 91       	pop	r29
    47dc:	cf 91       	pop	r28
    47de:	1f 91       	pop	r17
    47e0:	0f 91       	pop	r16
    47e2:	08 95       	ret

000047e4 <Print::println(char)>:
_ZN5Print7printlnEc():
    47e4:	0f 93       	push	r16
    47e6:	1f 93       	push	r17
    47e8:	cf 93       	push	r28
    47ea:	df 93       	push	r29
    47ec:	ec 01       	movw	r28, r24
    47ee:	0e 94 be 23 	call	0x477c	; 0x477c <Print::print(char)>
    47f2:	8c 01       	movw	r16, r24
    47f4:	ce 01       	movw	r24, r28
    47f6:	0e 94 c5 23 	call	0x478a	; 0x478a <Print::println()>
    47fa:	80 0f       	add	r24, r16
    47fc:	91 1f       	adc	r25, r17
    47fe:	df 91       	pop	r29
    4800:	cf 91       	pop	r28
    4802:	1f 91       	pop	r17
    4804:	0f 91       	pop	r16
    4806:	08 95       	ret

00004808 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    4808:	8f 92       	push	r8
    480a:	9f 92       	push	r9
    480c:	af 92       	push	r10
    480e:	bf 92       	push	r11
    4810:	ef 92       	push	r14
    4812:	ff 92       	push	r15
    4814:	0f 93       	push	r16
    4816:	1f 93       	push	r17
    4818:	cf 93       	push	r28
    481a:	df 93       	push	r29
    481c:	cd b7       	in	r28, 0x3d	; 61
    481e:	de b7       	in	r29, 0x3e	; 62
    4820:	a1 97       	sbiw	r28, 0x21	; 33
    4822:	0f b6       	in	r0, 0x3f	; 63
    4824:	f8 94       	cli
    4826:	de bf       	out	0x3e, r29	; 62
    4828:	0f be       	out	0x3f, r0	; 63
    482a:	cd bf       	out	0x3d, r28	; 61
    482c:	7c 01       	movw	r14, r24
    482e:	fa 01       	movw	r30, r20
    4830:	cb 01       	movw	r24, r22
    4832:	19 a2       	std	Y+33, r1	; 0x21
    4834:	22 30       	cpi	r18, 0x02	; 2
    4836:	08 f4       	brcc	.+2      	; 0x483a <Print::printNumber(unsigned long, unsigned char)+0x32>
    4838:	2a e0       	ldi	r18, 0x0A	; 10
    483a:	8e 01       	movw	r16, r28
    483c:	0f 5d       	subi	r16, 0xDF	; 223
    483e:	1f 4f       	sbci	r17, 0xFF	; 255
    4840:	82 2e       	mov	r8, r18
    4842:	91 2c       	mov	r9, r1
    4844:	b1 2c       	mov	r11, r1
    4846:	a1 2c       	mov	r10, r1
    4848:	bf 01       	movw	r22, r30
    484a:	a5 01       	movw	r20, r10
    484c:	94 01       	movw	r18, r8
    484e:	0e 94 5d 27 	call	0x4eba	; 0x4eba <__udivmodsi4>
    4852:	f9 01       	movw	r30, r18
    4854:	ca 01       	movw	r24, r20
    4856:	6a 30       	cpi	r22, 0x0A	; 10
    4858:	0c f5       	brge	.+66     	; 0x489c <Print::printNumber(unsigned long, unsigned char)+0x94>
    485a:	60 5d       	subi	r22, 0xD0	; 208
    485c:	d8 01       	movw	r26, r16
    485e:	6e 93       	st	-X, r22
    4860:	8d 01       	movw	r16, r26
    4862:	23 2b       	or	r18, r19
    4864:	24 2b       	or	r18, r20
    4866:	25 2b       	or	r18, r21
    4868:	79 f7       	brne	.-34     	; 0x4848 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    486a:	90 e0       	ldi	r25, 0x00	; 0
    486c:	80 e0       	ldi	r24, 0x00	; 0
    486e:	10 97       	sbiw	r26, 0x00	; 0
    4870:	21 f0       	breq	.+8      	; 0x487a <Print::printNumber(unsigned long, unsigned char)+0x72>
    4872:	bd 01       	movw	r22, r26
    4874:	c7 01       	movw	r24, r14
    4876:	0e 94 83 23 	call	0x4706	; 0x4706 <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    487a:	a1 96       	adiw	r28, 0x21	; 33
    487c:	0f b6       	in	r0, 0x3f	; 63
    487e:	f8 94       	cli
    4880:	de bf       	out	0x3e, r29	; 62
    4882:	0f be       	out	0x3f, r0	; 63
    4884:	cd bf       	out	0x3d, r28	; 61
    4886:	df 91       	pop	r29
    4888:	cf 91       	pop	r28
    488a:	1f 91       	pop	r17
    488c:	0f 91       	pop	r16
    488e:	ff 90       	pop	r15
    4890:	ef 90       	pop	r14
    4892:	bf 90       	pop	r11
    4894:	af 90       	pop	r10
    4896:	9f 90       	pop	r9
    4898:	8f 90       	pop	r8
    489a:	08 95       	ret
    489c:	69 5c       	subi	r22, 0xC9	; 201
    489e:	de cf       	rjmp	.-68     	; 0x485c <Print::printNumber(unsigned long, unsigned char)+0x54>

000048a0 <Print::print(long, int)>:
_ZN5Print5printEli():
    48a0:	cf 92       	push	r12
    48a2:	df 92       	push	r13
    48a4:	ef 92       	push	r14
    48a6:	ff 92       	push	r15
    48a8:	0f 93       	push	r16
    48aa:	1f 93       	push	r17
    48ac:	cf 93       	push	r28
    48ae:	df 93       	push	r29
    48b0:	21 15       	cp	r18, r1
    48b2:	31 05       	cpc	r19, r1
    48b4:	81 f4       	brne	.+32     	; 0x48d6 <Print::print(long, int)+0x36>
    48b6:	dc 01       	movw	r26, r24
    48b8:	ed 91       	ld	r30, X+
    48ba:	fc 91       	ld	r31, X
    48bc:	01 90       	ld	r0, Z+
    48be:	f0 81       	ld	r31, Z
    48c0:	e0 2d       	mov	r30, r0
    48c2:	64 2f       	mov	r22, r20
    48c4:	df 91       	pop	r29
    48c6:	cf 91       	pop	r28
    48c8:	1f 91       	pop	r17
    48ca:	0f 91       	pop	r16
    48cc:	ff 90       	pop	r15
    48ce:	ef 90       	pop	r14
    48d0:	df 90       	pop	r13
    48d2:	cf 90       	pop	r12
    48d4:	09 94       	ijmp
    48d6:	2a 30       	cpi	r18, 0x0A	; 10
    48d8:	31 05       	cpc	r19, r1
    48da:	01 f5       	brne	.+64     	; 0x491c <Print::print(long, int)+0x7c>
    48dc:	2a e0       	ldi	r18, 0x0A	; 10
    48de:	77 ff       	sbrs	r23, 7
    48e0:	1d c0       	rjmp	.+58     	; 0x491c <Print::print(long, int)+0x7c>
    48e2:	6a 01       	movw	r12, r20
    48e4:	7b 01       	movw	r14, r22
    48e6:	ec 01       	movw	r28, r24
    48e8:	6d e2       	ldi	r22, 0x2D	; 45
    48ea:	0e 94 be 23 	call	0x477c	; 0x477c <Print::print(char)>
    48ee:	8c 01       	movw	r16, r24
    48f0:	44 27       	eor	r20, r20
    48f2:	55 27       	eor	r21, r21
    48f4:	ba 01       	movw	r22, r20
    48f6:	4c 19       	sub	r20, r12
    48f8:	5d 09       	sbc	r21, r13
    48fa:	6e 09       	sbc	r22, r14
    48fc:	7f 09       	sbc	r23, r15
    48fe:	2a e0       	ldi	r18, 0x0A	; 10
    4900:	ce 01       	movw	r24, r28
    4902:	0e 94 04 24 	call	0x4808	; 0x4808 <Print::printNumber(unsigned long, unsigned char)>
    4906:	80 0f       	add	r24, r16
    4908:	91 1f       	adc	r25, r17
    490a:	df 91       	pop	r29
    490c:	cf 91       	pop	r28
    490e:	1f 91       	pop	r17
    4910:	0f 91       	pop	r16
    4912:	ff 90       	pop	r15
    4914:	ef 90       	pop	r14
    4916:	df 90       	pop	r13
    4918:	cf 90       	pop	r12
    491a:	08 95       	ret
    491c:	df 91       	pop	r29
    491e:	cf 91       	pop	r28
    4920:	1f 91       	pop	r17
    4922:	0f 91       	pop	r16
    4924:	ff 90       	pop	r15
    4926:	ef 90       	pop	r14
    4928:	df 90       	pop	r13
    492a:	cf 90       	pop	r12
    492c:	0c 94 04 24 	jmp	0x4808	; 0x4808 <Print::printNumber(unsigned long, unsigned char)>

00004930 <Print::print(int, int)>:
_ZN5Print5printEii():
    4930:	9a 01       	movw	r18, r20
    4932:	ab 01       	movw	r20, r22
    4934:	77 0f       	add	r23, r23
    4936:	66 0b       	sbc	r22, r22
    4938:	77 0b       	sbc	r23, r23
    493a:	0c 94 50 24 	jmp	0x48a0	; 0x48a0 <Print::print(long, int)>

0000493e <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:105
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    493e:	21 15       	cp	r18, r1
    4940:	31 05       	cpc	r19, r1
    4942:	41 f4       	brne	.+16     	; 0x4954 <Print::print(unsigned long, int)+0x16>
    4944:	dc 01       	movw	r26, r24
    4946:	ed 91       	ld	r30, X+
    4948:	fc 91       	ld	r31, X
    494a:	01 90       	ld	r0, Z+
    494c:	f0 81       	ld	r31, Z
    494e:	e0 2d       	mov	r30, r0
    4950:	64 2f       	mov	r22, r20
    4952:	09 94       	ijmp
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:106
  else return printNumber(n, base);
    4954:	0c 94 04 24 	jmp	0x4808	; 0x4808 <Print::printNumber(unsigned long, unsigned char)>

00004958 <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:73
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    4958:	9a 01       	movw	r18, r20
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/Print.cpp:74
  return print((unsigned long) b, base);
    495a:	46 2f       	mov	r20, r22
    495c:	50 e0       	ldi	r21, 0x00	; 0
    495e:	70 e0       	ldi	r23, 0x00	; 0
    4960:	60 e0       	ldi	r22, 0x00	; 0
    4962:	0c 94 9f 24 	jmp	0x493e	; 0x493e <Print::print(unsigned long, int)>

00004966 <String::~String()>:
_ZN6StringD2Ev():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:729
  while (isspace(*begin)) begin++;
  char *end = buffer + len - 1;
  while (isspace(*end) && end >= begin) end--;
  len = end + 1 - begin;
  if (begin > buffer) memcpy(buffer, begin, len);
  buffer[len] = 0;
    4966:	fc 01       	movw	r30, r24
    4968:	80 81       	ld	r24, Z
    496a:	91 81       	ldd	r25, Z+1	; 0x01
    496c:	00 97       	sbiw	r24, 0x00	; 0
    496e:	11 f0       	breq	.+4      	; 0x4974 <String::~String()+0xe>
    4970:	0c 94 3b 28 	jmp	0x5076	; 0x5076 <free>
    4974:	08 95       	ret

00004976 <String::invalidate()>:
_ZN6String10invalidateEv():
    4976:	cf 93       	push	r28
    4978:	df 93       	push	r29
    497a:	ec 01       	movw	r28, r24
    497c:	88 81       	ld	r24, Y
    497e:	99 81       	ldd	r25, Y+1	; 0x01
    4980:	00 97       	sbiw	r24, 0x00	; 0
    4982:	11 f0       	breq	.+4      	; 0x4988 <String::invalidate()+0x12>
    4984:	0e 94 3b 28 	call	0x5076	; 0x5076 <free>
    4988:	19 82       	std	Y+1, r1	; 0x01
    498a:	18 82       	st	Y, r1
    498c:	1d 82       	std	Y+5, r1	; 0x05
    498e:	1c 82       	std	Y+4, r1	; 0x04
    4990:	1b 82       	std	Y+3, r1	; 0x03
    4992:	1a 82       	std	Y+2, r1	; 0x02
    4994:	df 91       	pop	r29
    4996:	cf 91       	pop	r28
    4998:	08 95       	ret

0000499a <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
    499a:	0f 93       	push	r16
    499c:	1f 93       	push	r17
    499e:	cf 93       	push	r28
    49a0:	df 93       	push	r29
    49a2:	ec 01       	movw	r28, r24
    49a4:	8b 01       	movw	r16, r22
    49a6:	6f 5f       	subi	r22, 0xFF	; 255
    49a8:	7f 4f       	sbci	r23, 0xFF	; 255
    49aa:	88 81       	ld	r24, Y
    49ac:	99 81       	ldd	r25, Y+1	; 0x01
    49ae:	0e 94 c4 28 	call	0x5188	; 0x5188 <realloc>
    49b2:	00 97       	sbiw	r24, 0x00	; 0
    49b4:	51 f0       	breq	.+20     	; 0x49ca <String::changeBuffer(unsigned int)+0x30>
    49b6:	99 83       	std	Y+1, r25	; 0x01
    49b8:	88 83       	st	Y, r24
    49ba:	1b 83       	std	Y+3, r17	; 0x03
    49bc:	0a 83       	std	Y+2, r16	; 0x02
    49be:	81 e0       	ldi	r24, 0x01	; 1
    49c0:	df 91       	pop	r29
    49c2:	cf 91       	pop	r28
    49c4:	1f 91       	pop	r17
    49c6:	0f 91       	pop	r16
    49c8:	08 95       	ret
    49ca:	80 e0       	ldi	r24, 0x00	; 0
    49cc:	f9 cf       	rjmp	.-14     	; 0x49c0 <String::changeBuffer(unsigned int)+0x26>

000049ce <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
    49ce:	cf 93       	push	r28
    49d0:	df 93       	push	r29
    49d2:	ec 01       	movw	r28, r24
    49d4:	88 81       	ld	r24, Y
    49d6:	99 81       	ldd	r25, Y+1	; 0x01
    49d8:	89 2b       	or	r24, r25
    49da:	49 f0       	breq	.+18     	; 0x49ee <String::reserve(unsigned int)+0x20>
    49dc:	8a 81       	ldd	r24, Y+2	; 0x02
    49de:	9b 81       	ldd	r25, Y+3	; 0x03
    49e0:	86 17       	cp	r24, r22
    49e2:	97 07       	cpc	r25, r23
    49e4:	20 f0       	brcs	.+8      	; 0x49ee <String::reserve(unsigned int)+0x20>
    49e6:	81 e0       	ldi	r24, 0x01	; 1
    49e8:	df 91       	pop	r29
    49ea:	cf 91       	pop	r28
    49ec:	08 95       	ret
    49ee:	ce 01       	movw	r24, r28
    49f0:	0e 94 cd 24 	call	0x499a	; 0x499a <String::changeBuffer(unsigned int)>
    49f4:	88 23       	and	r24, r24
    49f6:	c1 f3       	breq	.-16     	; 0x49e8 <String::reserve(unsigned int)+0x1a>
    49f8:	8c 81       	ldd	r24, Y+4	; 0x04
    49fa:	9d 81       	ldd	r25, Y+5	; 0x05
    49fc:	89 2b       	or	r24, r25
    49fe:	99 f7       	brne	.-26     	; 0x49e6 <String::reserve(unsigned int)+0x18>
    4a00:	e8 81       	ld	r30, Y
    4a02:	f9 81       	ldd	r31, Y+1	; 0x01
    4a04:	10 82       	st	Z, r1
    4a06:	ef cf       	rjmp	.-34     	; 0x49e6 <String::reserve(unsigned int)+0x18>

00004a08 <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
    4a08:	ef 92       	push	r14
    4a0a:	ff 92       	push	r15
    4a0c:	0f 93       	push	r16
    4a0e:	1f 93       	push	r17
    4a10:	cf 93       	push	r28
    4a12:	df 93       	push	r29
    4a14:	ec 01       	movw	r28, r24
    4a16:	7b 01       	movw	r14, r22
    4a18:	8a 01       	movw	r16, r20
    4a1a:	ba 01       	movw	r22, r20
    4a1c:	0e 94 e7 24 	call	0x49ce	; 0x49ce <String::reserve(unsigned int)>
    4a20:	81 11       	cpse	r24, r1
    4a22:	0b c0       	rjmp	.+22     	; 0x4a3a <String::copy(char const*, unsigned int)+0x32>
    4a24:	ce 01       	movw	r24, r28
    4a26:	0e 94 bb 24 	call	0x4976	; 0x4976 <String::invalidate()>
    4a2a:	ce 01       	movw	r24, r28
    4a2c:	df 91       	pop	r29
    4a2e:	cf 91       	pop	r28
    4a30:	1f 91       	pop	r17
    4a32:	0f 91       	pop	r16
    4a34:	ff 90       	pop	r15
    4a36:	ef 90       	pop	r14
    4a38:	08 95       	ret
    4a3a:	1d 83       	std	Y+5, r17	; 0x05
    4a3c:	0c 83       	std	Y+4, r16	; 0x04
    4a3e:	b7 01       	movw	r22, r14
    4a40:	88 81       	ld	r24, Y
    4a42:	99 81       	ldd	r25, Y+1	; 0x01
    4a44:	0e 94 b1 29 	call	0x5362	; 0x5362 <strcpy>
    4a48:	f0 cf       	rjmp	.-32     	; 0x4a2a <String::copy(char const*, unsigned int)+0x22>

00004a4a <String::String(char const*)>:
_ZN6String4initEv():
    4a4a:	fc 01       	movw	r30, r24
    4a4c:	11 82       	std	Z+1, r1	; 0x01
    4a4e:	10 82       	st	Z, r1
    4a50:	13 82       	std	Z+3, r1	; 0x03
    4a52:	12 82       	std	Z+2, r1	; 0x02
    4a54:	15 82       	std	Z+5, r1	; 0x05
    4a56:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
    4a58:	61 15       	cp	r22, r1
    4a5a:	71 05       	cpc	r23, r1
    4a5c:	51 f0       	breq	.+20     	; 0x4a72 <String::String(char const*)+0x28>
    4a5e:	fb 01       	movw	r30, r22
    4a60:	01 90       	ld	r0, Z+
    4a62:	00 20       	and	r0, r0
    4a64:	e9 f7       	brne	.-6      	; 0x4a60 <String::String(char const*)+0x16>
    4a66:	31 97       	sbiw	r30, 0x01	; 1
    4a68:	af 01       	movw	r20, r30
    4a6a:	46 1b       	sub	r20, r22
    4a6c:	57 0b       	sbc	r21, r23
    4a6e:	0c 94 04 25 	jmp	0x4a08	; 0x4a08 <String::copy(char const*, unsigned int)>
    4a72:	08 95       	ret

00004a74 <String::operator=(char const*) [clone .part.3]>:
_ZN6StringaSEPKc():
    4a74:	fb 01       	movw	r30, r22
    4a76:	01 90       	ld	r0, Z+
    4a78:	00 20       	and	r0, r0
    4a7a:	e9 f7       	brne	.-6      	; 0x4a76 <String::operator=(char const*) [clone .part.3]+0x2>
    4a7c:	31 97       	sbiw	r30, 0x01	; 1
    4a7e:	af 01       	movw	r20, r30
    4a80:	46 1b       	sub	r20, r22
    4a82:	57 0b       	sbc	r21, r23
    4a84:	0c 94 04 25 	jmp	0x4a08	; 0x4a08 <String::copy(char const*, unsigned int)>

00004a88 <String::operator=(char const*)>:
    4a88:	cf 93       	push	r28
    4a8a:	df 93       	push	r29
    4a8c:	ec 01       	movw	r28, r24
    4a8e:	61 15       	cp	r22, r1
    4a90:	71 05       	cpc	r23, r1
    4a92:	31 f0       	breq	.+12     	; 0x4aa0 <String::operator=(char const*)+0x18>
    4a94:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <String::operator=(char const*) [clone .part.3]>
    4a98:	ce 01       	movw	r24, r28
    4a9a:	df 91       	pop	r29
    4a9c:	cf 91       	pop	r28
    4a9e:	08 95       	ret
    4aa0:	0e 94 bb 24 	call	0x4976	; 0x4976 <String::invalidate()>
    4aa4:	f9 cf       	rjmp	.-14     	; 0x4a98 <String::operator=(char const*)+0x10>

00004aa6 <String::operator[](unsigned int) const>:
_ZNK6StringixEj():
    4aa6:	fc 01       	movw	r30, r24
    4aa8:	24 81       	ldd	r18, Z+4	; 0x04
    4aaa:	35 81       	ldd	r19, Z+5	; 0x05
    4aac:	62 17       	cp	r22, r18
    4aae:	73 07       	cpc	r23, r19
    4ab0:	48 f4       	brcc	.+18     	; 0x4ac4 <String::operator[](unsigned int) const+0x1e>
    4ab2:	80 81       	ld	r24, Z
    4ab4:	91 81       	ldd	r25, Z+1	; 0x01
    4ab6:	00 97       	sbiw	r24, 0x00	; 0
    4ab8:	29 f0       	breq	.+10     	; 0x4ac4 <String::operator[](unsigned int) const+0x1e>
    4aba:	86 0f       	add	r24, r22
    4abc:	97 1f       	adc	r25, r23
    4abe:	fc 01       	movw	r30, r24
    4ac0:	80 81       	ld	r24, Z
    4ac2:	08 95       	ret
    4ac4:	80 e0       	ldi	r24, 0x00	; 0
    4ac6:	08 95       	ret

00004ac8 <String::substring(unsigned int, unsigned int) const>:
_ZNK6String9substringEjj():
    4ac8:	af 92       	push	r10
    4aca:	bf 92       	push	r11
    4acc:	cf 92       	push	r12
    4ace:	df 92       	push	r13
    4ad0:	ef 92       	push	r14
    4ad2:	ff 92       	push	r15
    4ad4:	0f 93       	push	r16
    4ad6:	1f 93       	push	r17
    4ad8:	cf 93       	push	r28
    4ada:	df 93       	push	r29
    4adc:	5c 01       	movw	r10, r24
    4ade:	6b 01       	movw	r12, r22
    4ae0:	7a 01       	movw	r14, r20
    4ae2:	89 01       	movw	r16, r18
    4ae4:	24 17       	cp	r18, r20
    4ae6:	35 07       	cpc	r19, r21
    4ae8:	20 f4       	brcc	.+8      	; 0x4af2 <String::substring(unsigned int, unsigned int) const+0x2a>
    4aea:	8f 2d       	mov	r24, r15
    4aec:	79 01       	movw	r14, r18
    4aee:	04 2f       	mov	r16, r20
    4af0:	18 2f       	mov	r17, r24
    4af2:	68 e5       	ldi	r22, 0x58	; 88
    4af4:	71 e0       	ldi	r23, 0x01	; 1
    4af6:	c5 01       	movw	r24, r10
    4af8:	0e 94 25 25 	call	0x4a4a	; 0x4a4a <String::String(char const*)>
    4afc:	d6 01       	movw	r26, r12
    4afe:	14 96       	adiw	r26, 0x04	; 4
    4b00:	cd 91       	ld	r28, X+
    4b02:	dc 91       	ld	r29, X
    4b04:	ec 16       	cp	r14, r28
    4b06:	fd 06       	cpc	r15, r29
    4b08:	c8 f4       	brcc	.+50     	; 0x4b3c <String::substring(unsigned int, unsigned int) const+0x74>
    4b0a:	0c 17       	cp	r16, r28
    4b0c:	1d 07       	cpc	r17, r29
    4b0e:	08 f4       	brcc	.+2      	; 0x4b12 <String::substring(unsigned int, unsigned int) const+0x4a>
    4b10:	e8 01       	movw	r28, r16
    4b12:	d6 01       	movw	r26, r12
    4b14:	ed 91       	ld	r30, X+
    4b16:	fc 91       	ld	r31, X
    4b18:	11 97       	sbiw	r26, 0x01	; 1
    4b1a:	ec 0f       	add	r30, r28
    4b1c:	fd 1f       	adc	r31, r29
    4b1e:	10 81       	ld	r17, Z
    4b20:	10 82       	st	Z, r1
    4b22:	6d 91       	ld	r22, X+
    4b24:	7c 91       	ld	r23, X
    4b26:	6e 0d       	add	r22, r14
    4b28:	7f 1d       	adc	r23, r15
    4b2a:	c5 01       	movw	r24, r10
    4b2c:	0e 94 44 25 	call	0x4a88	; 0x4a88 <String::operator=(char const*)>
    4b30:	f6 01       	movw	r30, r12
    4b32:	80 81       	ld	r24, Z
    4b34:	91 81       	ldd	r25, Z+1	; 0x01
    4b36:	c8 0f       	add	r28, r24
    4b38:	d9 1f       	adc	r29, r25
    4b3a:	18 83       	st	Y, r17
    4b3c:	c5 01       	movw	r24, r10
    4b3e:	df 91       	pop	r29
    4b40:	cf 91       	pop	r28
    4b42:	1f 91       	pop	r17
    4b44:	0f 91       	pop	r16
    4b46:	ff 90       	pop	r15
    4b48:	ef 90       	pop	r14
    4b4a:	df 90       	pop	r13
    4b4c:	cf 90       	pop	r12
    4b4e:	bf 90       	pop	r11
    4b50:	af 90       	pop	r10
    4b52:	08 95       	ret

00004b54 <String::toInt() const>:
_ZNK6String5toIntEv():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:738
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
  if (buffer) return atol(buffer);
    4b54:	fc 01       	movw	r30, r24
    4b56:	80 81       	ld	r24, Z
    4b58:	91 81       	ldd	r25, Z+1	; 0x01
    4b5a:	00 97       	sbiw	r24, 0x00	; 0
    4b5c:	11 f0       	breq	.+4      	; 0x4b62 <String::toInt() const+0xe>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:738 (discriminator 1)
    4b5e:	0c 94 81 29 	jmp	0x5302	; 0x5302 <atol>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/WString.cpp:740
  return 0;
}
    4b62:	60 e0       	ldi	r22, 0x00	; 0
    4b64:	70 e0       	ldi	r23, 0x00	; 0
    4b66:	cb 01       	movw	r24, r22
    4b68:	08 95       	ret

00004b6a <initVariant>:
initVariant():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    4b6a:	08 95       	ret

00004b6c <main>:
main():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    4b6c:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <init>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/main.cpp:37

  initVariant();
    4b70:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <initVariant>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    4b74:	0e 94 b7 0b 	call	0x176e	; 0x176e <setup>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    4b78:	c5 ed       	ldi	r28, 0xD5	; 213
    4b7a:	d1 e2       	ldi	r29, 0x21	; 33
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    4b7c:	0e 94 c6 10 	call	0x218c	; 0x218c <loop>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    4b80:	20 97       	sbiw	r28, 0x00	; 0
    4b82:	e1 f3       	breq	.-8      	; 0x4b7c <main+0x10>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/main.cpp:47 (discriminator 1)
    4b84:	0e 94 d5 21 	call	0x43aa	; 0x43aa <serialEventRun()>
    4b88:	f9 cf       	rjmp	.-14     	; 0x4b7c <main+0x10>

00004b8a <__vector_11>:
__vector_11():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    4b8a:	1f 92       	push	r1
    4b8c:	0f 92       	push	r0
    4b8e:	0f b6       	in	r0, 0x3f	; 63
    4b90:	0f 92       	push	r0
    4b92:	11 24       	eor	r1, r1
    4b94:	2f 93       	push	r18
    4b96:	3f 93       	push	r19
    4b98:	8f 93       	push	r24
    4b9a:	9f 93       	push	r25
    4b9c:	af 93       	push	r26
    4b9e:	bf 93       	push	r27
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    4ba0:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <timer0_millis>
    4ba4:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <timer0_millis+0x1>
    4ba8:	a0 91 70 03 	lds	r26, 0x0370	; 0x800370 <timer0_millis+0x2>
    4bac:	b0 91 71 03 	lds	r27, 0x0371	; 0x800371 <timer0_millis+0x3>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    4bb0:	30 91 6d 03 	lds	r19, 0x036D	; 0x80036d <timer0_fract>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    4bb4:	23 e0       	ldi	r18, 0x03	; 3
    4bb6:	23 0f       	add	r18, r19
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    4bb8:	2d 37       	cpi	r18, 0x7D	; 125
    4bba:	68 f1       	brcs	.+90     	; 0x4c16 <__vector_11+0x8c>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    4bbc:	26 e8       	ldi	r18, 0x86	; 134
    4bbe:	23 0f       	add	r18, r19
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    4bc0:	02 96       	adiw	r24, 0x02	; 2
    4bc2:	a1 1d       	adc	r26, r1
    4bc4:	b1 1d       	adc	r27, r1
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    4bc6:	20 93 6d 03 	sts	0x036D, r18	; 0x80036d <timer0_fract>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    4bca:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <timer0_millis>
    4bce:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <timer0_millis+0x1>
    4bd2:	a0 93 70 03 	sts	0x0370, r26	; 0x800370 <timer0_millis+0x2>
    4bd6:	b0 93 71 03 	sts	0x0371, r27	; 0x800371 <timer0_millis+0x3>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    4bda:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <timer0_overflow_count>
    4bde:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <timer0_overflow_count+0x1>
    4be2:	a0 91 6b 03 	lds	r26, 0x036B	; 0x80036b <timer0_overflow_count+0x2>
    4be6:	b0 91 6c 03 	lds	r27, 0x036C	; 0x80036c <timer0_overflow_count+0x3>
    4bea:	01 96       	adiw	r24, 0x01	; 1
    4bec:	a1 1d       	adc	r26, r1
    4bee:	b1 1d       	adc	r27, r1
    4bf0:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <timer0_overflow_count>
    4bf4:	90 93 6a 03 	sts	0x036A, r25	; 0x80036a <timer0_overflow_count+0x1>
    4bf8:	a0 93 6b 03 	sts	0x036B, r26	; 0x80036b <timer0_overflow_count+0x2>
    4bfc:	b0 93 6c 03 	sts	0x036C, r27	; 0x80036c <timer0_overflow_count+0x3>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:213
#endif
}
    4c00:	bf 91       	pop	r27
    4c02:	af 91       	pop	r26
    4c04:	9f 91       	pop	r25
    4c06:	8f 91       	pop	r24
    4c08:	3f 91       	pop	r19
    4c0a:	2f 91       	pop	r18
    4c0c:	0f 90       	pop	r0
    4c0e:	0f be       	out	0x3f, r0	; 63
    4c10:	0f 90       	pop	r0
    4c12:	1f 90       	pop	r1
    4c14:	18 95       	reti
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    4c16:	01 96       	adiw	r24, 0x01	; 1
    4c18:	a1 1d       	adc	r26, r1
    4c1a:	b1 1d       	adc	r27, r1
    4c1c:	d4 cf       	rjmp	.-88     	; 0x4bc6 <__vector_11+0x3c>

00004c1e <millis>:
millis():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    4c1e:	2f b7       	in	r18, 0x3f	; 63
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    4c20:	f8 94       	cli
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    4c22:	60 91 6e 03 	lds	r22, 0x036E	; 0x80036e <timer0_millis>
    4c26:	70 91 6f 03 	lds	r23, 0x036F	; 0x80036f <timer0_millis+0x1>
    4c2a:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <timer0_millis+0x2>
    4c2e:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <timer0_millis+0x3>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    4c32:	2f bf       	out	0x3f, r18	; 63
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:227

  return m;
}
    4c34:	08 95       	ret

00004c36 <micros>:
micros():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    4c36:	3f b7       	in	r19, 0x3f	; 63
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    4c38:	f8 94       	cli
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    4c3a:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <timer0_overflow_count>
    4c3e:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <timer0_overflow_count+0x1>
    4c42:	a0 91 6b 03 	lds	r26, 0x036B	; 0x80036b <timer0_overflow_count+0x2>
    4c46:	b0 91 6c 03 	lds	r27, 0x036C	; 0x80036c <timer0_overflow_count+0x3>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    4c4a:	22 b7       	in	r18, 0x32	; 50
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:268
    m++;
#else
    q = 1;
#endif
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
    4c4c:	08 b6       	in	r0, 0x38	; 56
    4c4e:	00 fe       	sbrs	r0, 0
    4c50:	05 c0       	rjmp	.+10     	; 0x4c5c <micros+0x26>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:268 (discriminator 1)
    4c52:	2f 3f       	cpi	r18, 0xFF	; 255
    4c54:	19 f0       	breq	.+6      	; 0x4c5c <micros+0x26>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:270
#ifndef CORRECT_EXACT_MICROS
    m++;
    4c56:	01 96       	adiw	r24, 0x01	; 1
    4c58:	a1 1d       	adc	r26, r1
    4c5a:	b1 1d       	adc	r27, r1
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    4c5c:	3f bf       	out	0x3f, r19	; 63
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    4c5e:	ba 2f       	mov	r27, r26
    4c60:	a9 2f       	mov	r26, r25
    4c62:	98 2f       	mov	r25, r24
    4c64:	88 27       	eor	r24, r24
    4c66:	bc 01       	movw	r22, r24
    4c68:	cd 01       	movw	r24, r26
    4c6a:	62 0f       	add	r22, r18
    4c6c:	71 1d       	adc	r23, r1
    4c6e:	81 1d       	adc	r24, r1
    4c70:	91 1d       	adc	r25, r1
    4c72:	42 e0       	ldi	r20, 0x02	; 2
    4c74:	66 0f       	add	r22, r22
    4c76:	77 1f       	adc	r23, r23
    4c78:	88 1f       	adc	r24, r24
    4c7a:	99 1f       	adc	r25, r25
    4c7c:	4a 95       	dec	r20
    4c7e:	d1 f7       	brne	.-12     	; 0x4c74 <micros+0x3e>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    4c80:	08 95       	ret

00004c82 <delay>:
delay():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    4c82:	8f 92       	push	r8
    4c84:	9f 92       	push	r9
    4c86:	af 92       	push	r10
    4c88:	bf 92       	push	r11
    4c8a:	cf 92       	push	r12
    4c8c:	df 92       	push	r13
    4c8e:	ef 92       	push	r14
    4c90:	ff 92       	push	r15
    4c92:	6b 01       	movw	r12, r22
    4c94:	7c 01       	movw	r14, r24
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    4c96:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <micros>
    4c9a:	4b 01       	movw	r8, r22
    4c9c:	5c 01       	movw	r10, r24
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    4c9e:	c1 14       	cp	r12, r1
    4ca0:	d1 04       	cpc	r13, r1
    4ca2:	e1 04       	cpc	r14, r1
    4ca4:	f1 04       	cpc	r15, r1
    4ca6:	e9 f0       	breq	.+58     	; 0x4ce2 <delay+0x60>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:400
    yield();
    4ca8:	0e 94 50 27 	call	0x4ea0	; 0x4ea0 <yield>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    4cac:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <micros>
    4cb0:	68 19       	sub	r22, r8
    4cb2:	79 09       	sbc	r23, r9
    4cb4:	8a 09       	sbc	r24, r10
    4cb6:	9b 09       	sbc	r25, r11
    4cb8:	68 3e       	cpi	r22, 0xE8	; 232
    4cba:	73 40       	sbci	r23, 0x03	; 3
    4cbc:	81 05       	cpc	r24, r1
    4cbe:	91 05       	cpc	r25, r1
    4cc0:	70 f3       	brcs	.-36     	; 0x4c9e <delay+0x1c>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:402
      ms--;
    4cc2:	21 e0       	ldi	r18, 0x01	; 1
    4cc4:	c2 1a       	sub	r12, r18
    4cc6:	d1 08       	sbc	r13, r1
    4cc8:	e1 08       	sbc	r14, r1
    4cca:	f1 08       	sbc	r15, r1
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    4ccc:	88 ee       	ldi	r24, 0xE8	; 232
    4cce:	88 0e       	add	r8, r24
    4cd0:	83 e0       	ldi	r24, 0x03	; 3
    4cd2:	98 1e       	adc	r9, r24
    4cd4:	a1 1c       	adc	r10, r1
    4cd6:	b1 1c       	adc	r11, r1
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    4cd8:	c1 14       	cp	r12, r1
    4cda:	d1 04       	cpc	r13, r1
    4cdc:	e1 04       	cpc	r14, r1
    4cde:	f1 04       	cpc	r15, r1
    4ce0:	29 f7       	brne	.-54     	; 0x4cac <delay+0x2a>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    4ce2:	ff 90       	pop	r15
    4ce4:	ef 90       	pop	r14
    4ce6:	df 90       	pop	r13
    4ce8:	cf 90       	pop	r12
    4cea:	bf 90       	pop	r11
    4cec:	af 90       	pop	r10
    4cee:	9f 90       	pop	r9
    4cf0:	8f 90       	pop	r8
    4cf2:	08 95       	ret

00004cf4 <delayMicroseconds>:
delayMicroseconds():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    4cf4:	82 30       	cpi	r24, 0x02	; 2
    4cf6:	91 05       	cpc	r25, r1
    4cf8:	38 f0       	brcs	.+14     	; 0x4d08 <delayMicroseconds+0x14>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    4cfa:	88 0f       	add	r24, r24
    4cfc:	99 1f       	adc	r25, r25
    4cfe:	88 0f       	add	r24, r24
    4d00:	99 1f       	adc	r25, r25
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    4d02:	05 97       	sbiw	r24, 0x05	; 5
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    4d04:	01 97       	sbiw	r24, 0x01	; 1
    4d06:	f1 f7       	brne	.-4      	; 0x4d04 <delayMicroseconds+0x10>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    4d08:	08 95       	ret

00004d0a <init>:
init():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    4d0a:	78 94       	sei
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:966
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
  // This combination is for the ATmega8535, ATmega8, ATmega16, ATmega32, ATmega8515, ATmega162
  TCCR0 |= _BV(CS01) | _BV(CS00);
    4d0c:	83 b7       	in	r24, 0x33	; 51
    4d0e:	83 60       	ori	r24, 0x03	; 3
    4d10:	83 bf       	out	0x33, r24	; 51
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:968
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
    4d12:	83 b7       	in	r24, 0x33	; 51
    4d14:	88 64       	ori	r24, 0x48	; 72
    4d16:	83 bf       	out	0x33, r24	; 51
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
    4d18:	89 b7       	in	r24, 0x39	; 57
    4d1a:	81 60       	ori	r24, 0x01	; 1
    4d1c:	89 bf       	out	0x39, r24	; 57
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    4d1e:	82 e0       	ldi	r24, 0x02	; 2
    4d20:	8e bd       	out	0x2e, r24	; 46
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    4d22:	8e b5       	in	r24, 0x2e	; 46
    4d24:	81 60       	ori	r24, 0x01	; 1
    4d26:	8e bd       	out	0x2e, r24	; 46
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    4d28:	8f b5       	in	r24, 0x2f	; 47
    4d2a:	81 60       	ori	r24, 0x01	; 1
    4d2c:	8f bd       	out	0x2f, r24	; 47
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
    4d2e:	85 b5       	in	r24, 0x25	; 37
    4d30:	84 60       	ori	r24, 0x04	; 4
    4d32:	85 bd       	out	0x25, r24	; 37
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
    4d34:	85 b5       	in	r24, 0x25	; 37
    4d36:	80 64       	ori	r24, 0x40	; 64
    4d38:	85 bd       	out	0x25, r24	; 37
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    4d3a:	87 e8       	ldi	r24, 0x87	; 135
    4d3c:	86 b9       	out	0x06, r24	; 6
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1068

  // The bootloader connects pins 0 and 1 to the USART; disconnect them
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
    4d3e:	1a b8       	out	0x0a, r1	; 10
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring.c:1072
#elif defined(UCSR0B)
  UCSR0B = 0;
#endif
}
    4d40:	08 95       	ret

00004d42 <turnOffPWM>:
turnOffPWM():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    4d42:	84 30       	cpi	r24, 0x04	; 4
    4d44:	59 f0       	breq	.+22     	; 0x4d5c <turnOffPWM+0x1a>
    4d46:	28 f4       	brcc	.+10     	; 0x4d52 <turnOffPWM+0x10>
    4d48:	81 30       	cpi	r24, 0x01	; 1
    4d4a:	99 f0       	breq	.+38     	; 0x4d72 <turnOffPWM+0x30>
    4d4c:	82 30       	cpi	r24, 0x02	; 2
    4d4e:	89 f0       	breq	.+34     	; 0x4d72 <turnOffPWM+0x30>
    4d50:	08 95       	ret
    4d52:	85 30       	cpi	r24, 0x05	; 5
    4d54:	39 f0       	breq	.+14     	; 0x4d64 <turnOffPWM+0x22>
    4d56:	87 30       	cpi	r24, 0x07	; 7
    4d58:	41 f0       	breq	.+16     	; 0x4d6a <turnOffPWM+0x28>
    4d5a:	08 95       	ret
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    4d5c:	8f b5       	in	r24, 0x2f	; 47
    4d5e:	8f 77       	andi	r24, 0x7F	; 127
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    4d60:	8f bd       	out	0x2f, r24	; 47
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:88
        break;
    4d62:	08 95       	ret
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    4d64:	8f b5       	in	r24, 0x2f	; 47
    4d66:	8f 7d       	andi	r24, 0xDF	; 223
    4d68:	fb cf       	rjmp	.-10     	; 0x4d60 <turnOffPWM+0x1e>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
    4d6a:	85 b5       	in	r24, 0x25	; 37
    4d6c:	8f 7d       	andi	r24, 0xDF	; 223
    4d6e:	85 bd       	out	0x25, r24	; 37
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:100
        break;
    4d70:	08 95       	ret
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:171
    #if defined(TCCR0) && defined(COM01)
      case TIMER0:
        TCCR0 &= ~_BV(COM01);
        break;
      case TIMER0A:
        TCCR0 &= ~_BV(COM01);
    4d72:	83 b7       	in	r24, 0x33	; 51
    4d74:	8f 7d       	andi	r24, 0xDF	; 223
    4d76:	83 bf       	out	0x33, r24	; 51
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:185
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
        break;
    #endif
  }
}
    4d78:	08 95       	ret

00004d7a <pinMode>:
pinMode():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    4d7a:	cf 93       	push	r28
    4d7c:	df 93       	push	r29
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    4d7e:	90 e0       	ldi	r25, 0x00	; 0
    4d80:	fc 01       	movw	r30, r24
    4d82:	e4 5f       	subi	r30, 0xF4	; 244
    4d84:	f7 4f       	sbci	r31, 0xF7	; 247
    4d86:	24 91       	lpm	r18, Z
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    4d88:	84 5d       	subi	r24, 0xD4	; 212
    4d8a:	97 4f       	sbci	r25, 0xF7	; 247
    4d8c:	fc 01       	movw	r30, r24
    4d8e:	84 91       	lpm	r24, Z
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    4d90:	88 23       	and	r24, r24
    4d92:	c9 f0       	breq	.+50     	; 0x4dc6 <pinMode+0x4c>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    4d94:	90 e0       	ldi	r25, 0x00	; 0
    4d96:	88 0f       	add	r24, r24
    4d98:	99 1f       	adc	r25, r25
    4d9a:	fc 01       	movw	r30, r24
    4d9c:	e0 5a       	subi	r30, 0xA0	; 160
    4d9e:	f7 4f       	sbci	r31, 0xF7	; 247
    4da0:	a5 91       	lpm	r26, Z+
    4da2:	b4 91       	lpm	r27, Z
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    4da4:	fc 01       	movw	r30, r24
    4da6:	ea 5a       	subi	r30, 0xAA	; 170
    4da8:	f7 4f       	sbci	r31, 0xF7	; 247
    4daa:	c5 91       	lpm	r28, Z+
    4dac:	d4 91       	lpm	r29, Z
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    4dae:	61 11       	cpse	r22, r1
    4db0:	0d c0       	rjmp	.+26     	; 0x4dcc <pinMode+0x52>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    4db2:	9f b7       	in	r25, 0x3f	; 63
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
    4db4:	f8 94       	cli
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    4db6:	8c 91       	ld	r24, X
    4db8:	20 95       	com	r18
    4dba:	82 23       	and	r24, r18
    4dbc:	8c 93       	st	X, r24
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    4dbe:	88 81       	ld	r24, Y
    4dc0:	28 23       	and	r18, r24
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    4dc2:	28 83       	st	Y, r18
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    4dc4:	9f bf       	out	0x3f, r25	; 63
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    4dc6:	df 91       	pop	r29
    4dc8:	cf 91       	pop	r28
    4dca:	08 95       	ret
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    4dcc:	62 30       	cpi	r22, 0x02	; 2
    4dce:	51 f4       	brne	.+20     	; 0x4de4 <pinMode+0x6a>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    4dd0:	9f b7       	in	r25, 0x3f	; 63
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
    4dd2:	f8 94       	cli
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    4dd4:	3c 91       	ld	r19, X
    4dd6:	82 2f       	mov	r24, r18
    4dd8:	80 95       	com	r24
    4dda:	83 23       	and	r24, r19
    4ddc:	8c 93       	st	X, r24
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    4dde:	e8 81       	ld	r30, Y
    4de0:	2e 2b       	or	r18, r30
    4de2:	ef cf       	rjmp	.-34     	; 0x4dc2 <pinMode+0x48>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    4de4:	8f b7       	in	r24, 0x3f	; 63
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
    4de6:	f8 94       	cli
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    4de8:	ec 91       	ld	r30, X
    4dea:	2e 2b       	or	r18, r30
    4dec:	2c 93       	st	X, r18
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    4dee:	8f bf       	out	0x3f, r24	; 63
    4df0:	ea cf       	rjmp	.-44     	; 0x4dc6 <pinMode+0x4c>

00004df2 <digitalWrite>:
digitalWrite():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    4df2:	1f 93       	push	r17
    4df4:	cf 93       	push	r28
    4df6:	df 93       	push	r29
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    4df8:	28 2f       	mov	r18, r24
    4dfa:	30 e0       	ldi	r19, 0x00	; 0
    4dfc:	f9 01       	movw	r30, r18
    4dfe:	e4 51       	subi	r30, 0x14	; 20
    4e00:	f8 4f       	sbci	r31, 0xF8	; 248
    4e02:	84 91       	lpm	r24, Z
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    4e04:	f9 01       	movw	r30, r18
    4e06:	e4 5f       	subi	r30, 0xF4	; 244
    4e08:	f7 4f       	sbci	r31, 0xF7	; 247
    4e0a:	d4 91       	lpm	r29, Z
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    4e0c:	f9 01       	movw	r30, r18
    4e0e:	e4 5d       	subi	r30, 0xD4	; 212
    4e10:	f7 4f       	sbci	r31, 0xF7	; 247
    4e12:	c4 91       	lpm	r28, Z
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    4e14:	cc 23       	and	r28, r28
    4e16:	a9 f0       	breq	.+42     	; 0x4e42 <digitalWrite+0x50>
    4e18:	16 2f       	mov	r17, r22
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4e1a:	81 11       	cpse	r24, r1
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    4e1c:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <turnOffPWM>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    4e20:	ec 2f       	mov	r30, r28
    4e22:	f0 e0       	ldi	r31, 0x00	; 0
    4e24:	ee 0f       	add	r30, r30
    4e26:	ff 1f       	adc	r31, r31
    4e28:	ea 5a       	subi	r30, 0xAA	; 170
    4e2a:	f7 4f       	sbci	r31, 0xF7	; 247
    4e2c:	a5 91       	lpm	r26, Z+
    4e2e:	b4 91       	lpm	r27, Z
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    4e30:	8f b7       	in	r24, 0x3f	; 63
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
    4e32:	f8 94       	cli
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    4e34:	ec 91       	ld	r30, X
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    4e36:	11 11       	cpse	r17, r1
    4e38:	08 c0       	rjmp	.+16     	; 0x4e4a <digitalWrite+0x58>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    4e3a:	d0 95       	com	r29
    4e3c:	de 23       	and	r29, r30
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    4e3e:	dc 93       	st	X, r29
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    4e40:	8f bf       	out	0x3f, r24	; 63
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:212
}
    4e42:	df 91       	pop	r29
    4e44:	cf 91       	pop	r28
    4e46:	1f 91       	pop	r17
    4e48:	08 95       	ret
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    4e4a:	de 2b       	or	r29, r30
    4e4c:	f8 cf       	rjmp	.-16     	; 0x4e3e <digitalWrite+0x4c>

00004e4e <digitalRead>:
digitalRead():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    4e4e:	cf 93       	push	r28
    4e50:	df 93       	push	r29
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    4e52:	28 2f       	mov	r18, r24
    4e54:	30 e0       	ldi	r19, 0x00	; 0
    4e56:	f9 01       	movw	r30, r18
    4e58:	e4 51       	subi	r30, 0x14	; 20
    4e5a:	f8 4f       	sbci	r31, 0xF8	; 248
    4e5c:	84 91       	lpm	r24, Z
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    4e5e:	f9 01       	movw	r30, r18
    4e60:	e4 5f       	subi	r30, 0xF4	; 244
    4e62:	f7 4f       	sbci	r31, 0xF7	; 247
    4e64:	d4 91       	lpm	r29, Z
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    4e66:	f9 01       	movw	r30, r18
    4e68:	e4 5d       	subi	r30, 0xD4	; 212
    4e6a:	f7 4f       	sbci	r31, 0xF7	; 247
    4e6c:	c4 91       	lpm	r28, Z
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    4e6e:	cc 23       	and	r28, r28
    4e70:	a1 f0       	breq	.+40     	; 0x4e9a <digitalRead+0x4c>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4e72:	81 11       	cpse	r24, r1
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    4e74:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <turnOffPWM>
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    4e78:	ec 2f       	mov	r30, r28
    4e7a:	f0 e0       	ldi	r31, 0x00	; 0
    4e7c:	ee 0f       	add	r30, r30
    4e7e:	ff 1f       	adc	r31, r31
    4e80:	e4 5b       	subi	r30, 0xB4	; 180
    4e82:	f7 4f       	sbci	r31, 0xF7	; 247
    4e84:	a5 91       	lpm	r26, Z+
    4e86:	b4 91       	lpm	r27, Z
    4e88:	ec 91       	ld	r30, X
    4e8a:	ed 23       	and	r30, r29
    4e8c:	81 e0       	ldi	r24, 0x01	; 1
    4e8e:	90 e0       	ldi	r25, 0x00	; 0
    4e90:	09 f4       	brne	.+2      	; 0x4e94 <digitalRead+0x46>
    4e92:	80 e0       	ldi	r24, 0x00	; 0
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    4e94:	df 91       	pop	r29
    4e96:	cf 91       	pop	r28
    4e98:	08 95       	ret
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    4e9a:	80 e0       	ldi	r24, 0x00	; 0
    4e9c:	90 e0       	ldi	r25, 0x00	; 0
    4e9e:	fa cf       	rjmp	.-12     	; 0x4e94 <digitalRead+0x46>

00004ea0 <yield>:
__empty():
/home/horo/.arduino15/packages/MightyCore/hardware/avr/3.0.2/cores/MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    4ea0:	08 95       	ret

00004ea2 <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    4ea2:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    4ea4:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    4ea6:	04 c0       	rjmp	.+8      	; 0x4eb0 <__udivmodqi4_ep>

00004ea8 <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    4ea8:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    4eaa:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    4eac:	08 f0       	brcs	.+2      	; 0x4eb0 <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    4eae:	96 1b       	sub	r25, r22

00004eb0 <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    4eb0:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    4eb2:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    4eb4:	c9 f7       	brne	.-14     	; 0x4ea8 <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    4eb6:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    4eb8:	08 95       	ret

00004eba <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    4eba:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    4ebc:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    4ebe:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    4ec0:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    4ec2:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    4ec4:	0d c0       	rjmp	.+26     	; 0x4ee0 <__udivmodsi4_ep>

00004ec6 <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    4ec6:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    4ec8:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    4eca:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    4ecc:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    4ece:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    4ed0:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    4ed2:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    4ed4:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    4ed6:	20 f0       	brcs	.+8      	; 0x4ee0 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    4ed8:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    4eda:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    4edc:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    4ede:	f5 0b       	sbc	r31, r21

00004ee0 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    4ee0:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    4ee2:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    4ee4:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    4ee6:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    4ee8:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    4eea:	69 f7       	brne	.-38     	; 0x4ec6 <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    4eec:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    4eee:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    4ef0:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    4ef2:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    4ef4:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    4ef6:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    4ef8:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    4efa:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    4efc:	08 95       	ret

00004efe <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    4efe:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    4f00:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    4f02:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    4f04:	f4 91       	lpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    4f06:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    4f08:	09 94       	ijmp

00004f0a <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    4f0a:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    4f0c:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    4f0e:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    4f10:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    4f12:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    4f14:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    4f16:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    4f18:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    4f1a:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    4f1c:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    4f1e:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    4f20:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    4f22:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    4f24:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    4f26:	08 95       	ret

00004f28 <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    4f28:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    4f2c:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    4f2e:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    4f30:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    4f32:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    4f34:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    4f36:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    4f38:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    4f3a:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    4f3c:	08 95       	ret

00004f3e <malloc>:
malloc():
    4f3e:	0f 93       	push	r16
    4f40:	1f 93       	push	r17
    4f42:	cf 93       	push	r28
    4f44:	df 93       	push	r29
    4f46:	82 30       	cpi	r24, 0x02	; 2
    4f48:	91 05       	cpc	r25, r1
    4f4a:	10 f4       	brcc	.+4      	; 0x4f50 <malloc+0x12>
    4f4c:	82 e0       	ldi	r24, 0x02	; 2
    4f4e:	90 e0       	ldi	r25, 0x00	; 0
    4f50:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <__flp>
    4f54:	f0 91 75 03 	lds	r31, 0x0375	; 0x800375 <__flp+0x1>
    4f58:	30 e0       	ldi	r19, 0x00	; 0
    4f5a:	20 e0       	ldi	r18, 0x00	; 0
    4f5c:	b0 e0       	ldi	r27, 0x00	; 0
    4f5e:	a0 e0       	ldi	r26, 0x00	; 0
    4f60:	30 97       	sbiw	r30, 0x00	; 0
    4f62:	99 f4       	brne	.+38     	; 0x4f8a <malloc+0x4c>
    4f64:	21 15       	cp	r18, r1
    4f66:	31 05       	cpc	r19, r1
    4f68:	09 f4       	brne	.+2      	; 0x4f6c <malloc+0x2e>
    4f6a:	4a c0       	rjmp	.+148    	; 0x5000 <malloc+0xc2>
    4f6c:	28 1b       	sub	r18, r24
    4f6e:	39 0b       	sbc	r19, r25
    4f70:	24 30       	cpi	r18, 0x04	; 4
    4f72:	31 05       	cpc	r19, r1
    4f74:	d8 f5       	brcc	.+118    	; 0x4fec <malloc+0xae>
    4f76:	8a 81       	ldd	r24, Y+2	; 0x02
    4f78:	9b 81       	ldd	r25, Y+3	; 0x03
    4f7a:	61 15       	cp	r22, r1
    4f7c:	71 05       	cpc	r23, r1
    4f7e:	89 f1       	breq	.+98     	; 0x4fe2 <malloc+0xa4>
    4f80:	fb 01       	movw	r30, r22
    4f82:	93 83       	std	Z+3, r25	; 0x03
    4f84:	82 83       	std	Z+2, r24	; 0x02
    4f86:	fe 01       	movw	r30, r28
    4f88:	11 c0       	rjmp	.+34     	; 0x4fac <malloc+0x6e>
    4f8a:	40 81       	ld	r20, Z
    4f8c:	51 81       	ldd	r21, Z+1	; 0x01
    4f8e:	02 81       	ldd	r16, Z+2	; 0x02
    4f90:	13 81       	ldd	r17, Z+3	; 0x03
    4f92:	48 17       	cp	r20, r24
    4f94:	59 07       	cpc	r21, r25
    4f96:	e0 f0       	brcs	.+56     	; 0x4fd0 <malloc+0x92>
    4f98:	48 17       	cp	r20, r24
    4f9a:	59 07       	cpc	r21, r25
    4f9c:	99 f4       	brne	.+38     	; 0x4fc4 <malloc+0x86>
    4f9e:	10 97       	sbiw	r26, 0x00	; 0
    4fa0:	61 f0       	breq	.+24     	; 0x4fba <malloc+0x7c>
    4fa2:	12 96       	adiw	r26, 0x02	; 2
    4fa4:	0c 93       	st	X, r16
    4fa6:	12 97       	sbiw	r26, 0x02	; 2
    4fa8:	13 96       	adiw	r26, 0x03	; 3
    4faa:	1c 93       	st	X, r17
    4fac:	32 96       	adiw	r30, 0x02	; 2
    4fae:	cf 01       	movw	r24, r30
    4fb0:	df 91       	pop	r29
    4fb2:	cf 91       	pop	r28
    4fb4:	1f 91       	pop	r17
    4fb6:	0f 91       	pop	r16
    4fb8:	08 95       	ret
    4fba:	00 93 74 03 	sts	0x0374, r16	; 0x800374 <__flp>
    4fbe:	10 93 75 03 	sts	0x0375, r17	; 0x800375 <__flp+0x1>
    4fc2:	f4 cf       	rjmp	.-24     	; 0x4fac <malloc+0x6e>
    4fc4:	21 15       	cp	r18, r1
    4fc6:	31 05       	cpc	r19, r1
    4fc8:	51 f0       	breq	.+20     	; 0x4fde <malloc+0xa0>
    4fca:	42 17       	cp	r20, r18
    4fcc:	53 07       	cpc	r21, r19
    4fce:	38 f0       	brcs	.+14     	; 0x4fde <malloc+0xa0>
    4fd0:	a9 01       	movw	r20, r18
    4fd2:	db 01       	movw	r26, r22
    4fd4:	9a 01       	movw	r18, r20
    4fd6:	bd 01       	movw	r22, r26
    4fd8:	df 01       	movw	r26, r30
    4fda:	f8 01       	movw	r30, r16
    4fdc:	c1 cf       	rjmp	.-126    	; 0x4f60 <malloc+0x22>
    4fde:	ef 01       	movw	r28, r30
    4fe0:	f9 cf       	rjmp	.-14     	; 0x4fd4 <malloc+0x96>
    4fe2:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <__flp+0x1>
    4fe6:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <__flp>
    4fea:	cd cf       	rjmp	.-102    	; 0x4f86 <malloc+0x48>
    4fec:	fe 01       	movw	r30, r28
    4fee:	e2 0f       	add	r30, r18
    4ff0:	f3 1f       	adc	r31, r19
    4ff2:	81 93       	st	Z+, r24
    4ff4:	91 93       	st	Z+, r25
    4ff6:	22 50       	subi	r18, 0x02	; 2
    4ff8:	31 09       	sbc	r19, r1
    4ffa:	39 83       	std	Y+1, r19	; 0x01
    4ffc:	28 83       	st	Y, r18
    4ffe:	d7 cf       	rjmp	.-82     	; 0x4fae <malloc+0x70>
    5000:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <__brkval>
    5004:	30 91 73 03 	lds	r19, 0x0373	; 0x800373 <__brkval+0x1>
    5008:	23 2b       	or	r18, r19
    500a:	41 f4       	brne	.+16     	; 0x501c <malloc+0xde>
    500c:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    5010:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    5014:	30 93 73 03 	sts	0x0373, r19	; 0x800373 <__brkval+0x1>
    5018:	20 93 72 03 	sts	0x0372, r18	; 0x800372 <__brkval>
    501c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    5020:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    5024:	21 15       	cp	r18, r1
    5026:	31 05       	cpc	r19, r1
    5028:	41 f4       	brne	.+16     	; 0x503a <malloc+0xfc>
    502a:	2d b7       	in	r18, 0x3d	; 61
    502c:	3e b7       	in	r19, 0x3e	; 62
    502e:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    5032:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    5036:	24 1b       	sub	r18, r20
    5038:	35 0b       	sbc	r19, r21
    503a:	e0 91 72 03 	lds	r30, 0x0372	; 0x800372 <__brkval>
    503e:	f0 91 73 03 	lds	r31, 0x0373	; 0x800373 <__brkval+0x1>
    5042:	e2 17       	cp	r30, r18
    5044:	f3 07       	cpc	r31, r19
    5046:	a0 f4       	brcc	.+40     	; 0x5070 <malloc+0x132>
    5048:	2e 1b       	sub	r18, r30
    504a:	3f 0b       	sbc	r19, r31
    504c:	28 17       	cp	r18, r24
    504e:	39 07       	cpc	r19, r25
    5050:	78 f0       	brcs	.+30     	; 0x5070 <malloc+0x132>
    5052:	ac 01       	movw	r20, r24
    5054:	4e 5f       	subi	r20, 0xFE	; 254
    5056:	5f 4f       	sbci	r21, 0xFF	; 255
    5058:	24 17       	cp	r18, r20
    505a:	35 07       	cpc	r19, r21
    505c:	48 f0       	brcs	.+18     	; 0x5070 <malloc+0x132>
    505e:	4e 0f       	add	r20, r30
    5060:	5f 1f       	adc	r21, r31
    5062:	50 93 73 03 	sts	0x0373, r21	; 0x800373 <__brkval+0x1>
    5066:	40 93 72 03 	sts	0x0372, r20	; 0x800372 <__brkval>
    506a:	81 93       	st	Z+, r24
    506c:	91 93       	st	Z+, r25
    506e:	9f cf       	rjmp	.-194    	; 0x4fae <malloc+0x70>
    5070:	f0 e0       	ldi	r31, 0x00	; 0
    5072:	e0 e0       	ldi	r30, 0x00	; 0
    5074:	9c cf       	rjmp	.-200    	; 0x4fae <malloc+0x70>

00005076 <free>:
free():
    5076:	cf 93       	push	r28
    5078:	df 93       	push	r29
    507a:	00 97       	sbiw	r24, 0x00	; 0
    507c:	e9 f0       	breq	.+58     	; 0x50b8 <free+0x42>
    507e:	fc 01       	movw	r30, r24
    5080:	32 97       	sbiw	r30, 0x02	; 2
    5082:	13 82       	std	Z+3, r1	; 0x03
    5084:	12 82       	std	Z+2, r1	; 0x02
    5086:	a0 91 74 03 	lds	r26, 0x0374	; 0x800374 <__flp>
    508a:	b0 91 75 03 	lds	r27, 0x0375	; 0x800375 <__flp+0x1>
    508e:	ed 01       	movw	r28, r26
    5090:	30 e0       	ldi	r19, 0x00	; 0
    5092:	20 e0       	ldi	r18, 0x00	; 0
    5094:	10 97       	sbiw	r26, 0x00	; 0
    5096:	a1 f4       	brne	.+40     	; 0x50c0 <free+0x4a>
    5098:	20 81       	ld	r18, Z
    509a:	31 81       	ldd	r19, Z+1	; 0x01
    509c:	82 0f       	add	r24, r18
    509e:	93 1f       	adc	r25, r19
    50a0:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <__brkval>
    50a4:	30 91 73 03 	lds	r19, 0x0373	; 0x800373 <__brkval+0x1>
    50a8:	28 17       	cp	r18, r24
    50aa:	39 07       	cpc	r19, r25
    50ac:	09 f0       	breq	.+2      	; 0x50b0 <free+0x3a>
    50ae:	61 c0       	rjmp	.+194    	; 0x5172 <free+0xfc>
    50b0:	f0 93 73 03 	sts	0x0373, r31	; 0x800373 <__brkval+0x1>
    50b4:	e0 93 72 03 	sts	0x0372, r30	; 0x800372 <__brkval>
    50b8:	df 91       	pop	r29
    50ba:	cf 91       	pop	r28
    50bc:	08 95       	ret
    50be:	ea 01       	movw	r28, r20
    50c0:	ce 17       	cp	r28, r30
    50c2:	df 07       	cpc	r29, r31
    50c4:	e8 f5       	brcc	.+122    	; 0x5140 <free+0xca>
    50c6:	4a 81       	ldd	r20, Y+2	; 0x02
    50c8:	5b 81       	ldd	r21, Y+3	; 0x03
    50ca:	9e 01       	movw	r18, r28
    50cc:	41 15       	cp	r20, r1
    50ce:	51 05       	cpc	r21, r1
    50d0:	b1 f7       	brne	.-20     	; 0x50be <free+0x48>
    50d2:	e9 01       	movw	r28, r18
    50d4:	fb 83       	std	Y+3, r31	; 0x03
    50d6:	ea 83       	std	Y+2, r30	; 0x02
    50d8:	49 91       	ld	r20, Y+
    50da:	59 91       	ld	r21, Y+
    50dc:	c4 0f       	add	r28, r20
    50de:	d5 1f       	adc	r29, r21
    50e0:	ec 17       	cp	r30, r28
    50e2:	fd 07       	cpc	r31, r29
    50e4:	61 f4       	brne	.+24     	; 0x50fe <free+0x88>
    50e6:	80 81       	ld	r24, Z
    50e8:	91 81       	ldd	r25, Z+1	; 0x01
    50ea:	02 96       	adiw	r24, 0x02	; 2
    50ec:	84 0f       	add	r24, r20
    50ee:	95 1f       	adc	r25, r21
    50f0:	e9 01       	movw	r28, r18
    50f2:	99 83       	std	Y+1, r25	; 0x01
    50f4:	88 83       	st	Y, r24
    50f6:	82 81       	ldd	r24, Z+2	; 0x02
    50f8:	93 81       	ldd	r25, Z+3	; 0x03
    50fa:	9b 83       	std	Y+3, r25	; 0x03
    50fc:	8a 83       	std	Y+2, r24	; 0x02
    50fe:	f0 e0       	ldi	r31, 0x00	; 0
    5100:	e0 e0       	ldi	r30, 0x00	; 0
    5102:	12 96       	adiw	r26, 0x02	; 2
    5104:	8d 91       	ld	r24, X+
    5106:	9c 91       	ld	r25, X
    5108:	13 97       	sbiw	r26, 0x03	; 3
    510a:	00 97       	sbiw	r24, 0x00	; 0
    510c:	b9 f5       	brne	.+110    	; 0x517c <free+0x106>
    510e:	2d 91       	ld	r18, X+
    5110:	3c 91       	ld	r19, X
    5112:	11 97       	sbiw	r26, 0x01	; 1
    5114:	cd 01       	movw	r24, r26
    5116:	02 96       	adiw	r24, 0x02	; 2
    5118:	82 0f       	add	r24, r18
    511a:	93 1f       	adc	r25, r19
    511c:	20 91 72 03 	lds	r18, 0x0372	; 0x800372 <__brkval>
    5120:	30 91 73 03 	lds	r19, 0x0373	; 0x800373 <__brkval+0x1>
    5124:	28 17       	cp	r18, r24
    5126:	39 07       	cpc	r19, r25
    5128:	39 f6       	brne	.-114    	; 0x50b8 <free+0x42>
    512a:	30 97       	sbiw	r30, 0x00	; 0
    512c:	51 f5       	brne	.+84     	; 0x5182 <free+0x10c>
    512e:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <__flp+0x1>
    5132:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <__flp>
    5136:	b0 93 73 03 	sts	0x0373, r27	; 0x800373 <__brkval+0x1>
    513a:	a0 93 72 03 	sts	0x0372, r26	; 0x800372 <__brkval>
    513e:	bc cf       	rjmp	.-136    	; 0x50b8 <free+0x42>
    5140:	d3 83       	std	Z+3, r29	; 0x03
    5142:	c2 83       	std	Z+2, r28	; 0x02
    5144:	40 81       	ld	r20, Z
    5146:	51 81       	ldd	r21, Z+1	; 0x01
    5148:	84 0f       	add	r24, r20
    514a:	95 1f       	adc	r25, r21
    514c:	c8 17       	cp	r28, r24
    514e:	d9 07       	cpc	r29, r25
    5150:	61 f4       	brne	.+24     	; 0x516a <free+0xf4>
    5152:	4e 5f       	subi	r20, 0xFE	; 254
    5154:	5f 4f       	sbci	r21, 0xFF	; 255
    5156:	88 81       	ld	r24, Y
    5158:	99 81       	ldd	r25, Y+1	; 0x01
    515a:	48 0f       	add	r20, r24
    515c:	59 1f       	adc	r21, r25
    515e:	51 83       	std	Z+1, r21	; 0x01
    5160:	40 83       	st	Z, r20
    5162:	8a 81       	ldd	r24, Y+2	; 0x02
    5164:	9b 81       	ldd	r25, Y+3	; 0x03
    5166:	93 83       	std	Z+3, r25	; 0x03
    5168:	82 83       	std	Z+2, r24	; 0x02
    516a:	21 15       	cp	r18, r1
    516c:	31 05       	cpc	r19, r1
    516e:	09 f0       	breq	.+2      	; 0x5172 <free+0xfc>
    5170:	b0 cf       	rjmp	.-160    	; 0x50d2 <free+0x5c>
    5172:	f0 93 75 03 	sts	0x0375, r31	; 0x800375 <__flp+0x1>
    5176:	e0 93 74 03 	sts	0x0374, r30	; 0x800374 <__flp>
    517a:	9e cf       	rjmp	.-196    	; 0x50b8 <free+0x42>
    517c:	fd 01       	movw	r30, r26
    517e:	dc 01       	movw	r26, r24
    5180:	c0 cf       	rjmp	.-128    	; 0x5102 <free+0x8c>
    5182:	13 82       	std	Z+3, r1	; 0x03
    5184:	12 82       	std	Z+2, r1	; 0x02
    5186:	d7 cf       	rjmp	.-82     	; 0x5136 <free+0xc0>

00005188 <realloc>:
realloc():
    5188:	b0 e0       	ldi	r27, 0x00	; 0
    518a:	a0 e0       	ldi	r26, 0x00	; 0
    518c:	ea ec       	ldi	r30, 0xCA	; 202
    518e:	f8 e2       	ldi	r31, 0x28	; 40
    5190:	0c 94 e4 29 	jmp	0x53c8	; 0x53c8 <__prologue_saves__+0x4>
    5194:	8c 01       	movw	r16, r24
    5196:	00 97       	sbiw	r24, 0x00	; 0
    5198:	51 f4       	brne	.+20     	; 0x51ae <realloc+0x26>
    519a:	cb 01       	movw	r24, r22
    519c:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <malloc>
    51a0:	8c 01       	movw	r16, r24
    51a2:	c8 01       	movw	r24, r16
    51a4:	cd b7       	in	r28, 0x3d	; 61
    51a6:	de b7       	in	r29, 0x3e	; 62
    51a8:	e0 e1       	ldi	r30, 0x10	; 16
    51aa:	0c 94 00 2a 	jmp	0x5400	; 0x5400 <__epilogue_restores__+0x4>
    51ae:	fc 01       	movw	r30, r24
    51b0:	e6 0f       	add	r30, r22
    51b2:	f7 1f       	adc	r31, r23
    51b4:	9c 01       	movw	r18, r24
    51b6:	22 50       	subi	r18, 0x02	; 2
    51b8:	31 09       	sbc	r19, r1
    51ba:	e2 17       	cp	r30, r18
    51bc:	f3 07       	cpc	r31, r19
    51be:	08 f4       	brcc	.+2      	; 0x51c2 <realloc+0x3a>
    51c0:	9d c0       	rjmp	.+314    	; 0x52fc <realloc+0x174>
    51c2:	d9 01       	movw	r26, r18
    51c4:	cd 91       	ld	r28, X+
    51c6:	dc 91       	ld	r29, X
    51c8:	11 97       	sbiw	r26, 0x01	; 1
    51ca:	c6 17       	cp	r28, r22
    51cc:	d7 07       	cpc	r29, r23
    51ce:	98 f0       	brcs	.+38     	; 0x51f6 <realloc+0x6e>
    51d0:	c5 30       	cpi	r28, 0x05	; 5
    51d2:	d1 05       	cpc	r29, r1
    51d4:	30 f3       	brcs	.-52     	; 0x51a2 <realloc+0x1a>
    51d6:	ce 01       	movw	r24, r28
    51d8:	04 97       	sbiw	r24, 0x04	; 4
    51da:	86 17       	cp	r24, r22
    51dc:	97 07       	cpc	r25, r23
    51de:	08 f3       	brcs	.-62     	; 0x51a2 <realloc+0x1a>
    51e0:	c6 1b       	sub	r28, r22
    51e2:	d7 0b       	sbc	r29, r23
    51e4:	22 97       	sbiw	r28, 0x02	; 2
    51e6:	c1 93       	st	Z+, r28
    51e8:	d1 93       	st	Z+, r29
    51ea:	6d 93       	st	X+, r22
    51ec:	7c 93       	st	X, r23
    51ee:	cf 01       	movw	r24, r30
    51f0:	0e 94 3b 28 	call	0x5076	; 0x5076 <free>
    51f4:	d6 cf       	rjmp	.-84     	; 0x51a2 <realloc+0x1a>
    51f6:	5b 01       	movw	r10, r22
    51f8:	ac 1a       	sub	r10, r28
    51fa:	bd 0a       	sbc	r11, r29
    51fc:	4c 01       	movw	r8, r24
    51fe:	8c 0e       	add	r8, r28
    5200:	9d 1e       	adc	r9, r29
    5202:	a0 91 74 03 	lds	r26, 0x0374	; 0x800374 <__flp>
    5206:	b0 91 75 03 	lds	r27, 0x0375	; 0x800375 <__flp+0x1>
    520a:	51 2c       	mov	r5, r1
    520c:	41 2c       	mov	r4, r1
    520e:	f1 2c       	mov	r15, r1
    5210:	e1 2c       	mov	r14, r1
    5212:	10 97       	sbiw	r26, 0x00	; 0
    5214:	31 f5       	brne	.+76     	; 0x5262 <realloc+0xda>
    5216:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <__brkval>
    521a:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <__brkval+0x1>
    521e:	88 15       	cp	r24, r8
    5220:	99 05       	cpc	r25, r9
    5222:	09 f0       	breq	.+2      	; 0x5226 <realloc+0x9e>
    5224:	5c c0       	rjmp	.+184    	; 0x52de <realloc+0x156>
    5226:	46 16       	cp	r4, r22
    5228:	57 06       	cpc	r5, r23
    522a:	08 f0       	brcs	.+2      	; 0x522e <realloc+0xa6>
    522c:	58 c0       	rjmp	.+176    	; 0x52de <realloc+0x156>
    522e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    5232:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    5236:	00 97       	sbiw	r24, 0x00	; 0
    5238:	41 f4       	brne	.+16     	; 0x524a <realloc+0xc2>
    523a:	8d b7       	in	r24, 0x3d	; 61
    523c:	9e b7       	in	r25, 0x3e	; 62
    523e:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    5242:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    5246:	84 1b       	sub	r24, r20
    5248:	95 0b       	sbc	r25, r21
    524a:	e8 17       	cp	r30, r24
    524c:	f9 07       	cpc	r31, r25
    524e:	08 f0       	brcs	.+2      	; 0x5252 <realloc+0xca>
    5250:	55 c0       	rjmp	.+170    	; 0x52fc <realloc+0x174>
    5252:	f0 93 73 03 	sts	0x0373, r31	; 0x800373 <__brkval+0x1>
    5256:	e0 93 72 03 	sts	0x0372, r30	; 0x800372 <__brkval>
    525a:	f9 01       	movw	r30, r18
    525c:	71 83       	std	Z+1, r23	; 0x01
    525e:	60 83       	st	Z, r22
    5260:	a0 cf       	rjmp	.-192    	; 0x51a2 <realloc+0x1a>
    5262:	8d 91       	ld	r24, X+
    5264:	9c 91       	ld	r25, X
    5266:	11 97       	sbiw	r26, 0x01	; 1
    5268:	12 96       	adiw	r26, 0x02	; 2
    526a:	6c 90       	ld	r6, X
    526c:	12 97       	sbiw	r26, 0x02	; 2
    526e:	13 96       	adiw	r26, 0x03	; 3
    5270:	7c 90       	ld	r7, X
    5272:	13 97       	sbiw	r26, 0x03	; 3
    5274:	a8 15       	cp	r26, r8
    5276:	b9 05       	cpc	r27, r9
    5278:	59 f5       	brne	.+86     	; 0x52d0 <realloc+0x148>
    527a:	6c 01       	movw	r12, r24
    527c:	42 e0       	ldi	r20, 0x02	; 2
    527e:	c4 0e       	add	r12, r20
    5280:	d1 1c       	adc	r13, r1
    5282:	ca 14       	cp	r12, r10
    5284:	db 04       	cpc	r13, r11
    5286:	20 f1       	brcs	.+72     	; 0x52d0 <realloc+0x148>
    5288:	ac 01       	movw	r20, r24
    528a:	4a 19       	sub	r20, r10
    528c:	5b 09       	sbc	r21, r11
    528e:	da 01       	movw	r26, r20
    5290:	12 96       	adiw	r26, 0x02	; 2
    5292:	15 97       	sbiw	r26, 0x05	; 5
    5294:	80 f0       	brcs	.+32     	; 0x52b6 <realloc+0x12e>
    5296:	62 82       	std	Z+2, r6	; 0x02
    5298:	73 82       	std	Z+3, r7	; 0x03
    529a:	51 83       	std	Z+1, r21	; 0x01
    529c:	40 83       	st	Z, r20
    529e:	d9 01       	movw	r26, r18
    52a0:	6d 93       	st	X+, r22
    52a2:	7c 93       	st	X, r23
    52a4:	e1 14       	cp	r14, r1
    52a6:	f1 04       	cpc	r15, r1
    52a8:	71 f0       	breq	.+28     	; 0x52c6 <realloc+0x13e>
    52aa:	d7 01       	movw	r26, r14
    52ac:	13 96       	adiw	r26, 0x03	; 3
    52ae:	fc 93       	st	X, r31
    52b0:	ee 93       	st	-X, r30
    52b2:	12 97       	sbiw	r26, 0x02	; 2
    52b4:	76 cf       	rjmp	.-276    	; 0x51a2 <realloc+0x1a>
    52b6:	22 96       	adiw	r28, 0x02	; 2
    52b8:	8c 0f       	add	r24, r28
    52ba:	9d 1f       	adc	r25, r29
    52bc:	f9 01       	movw	r30, r18
    52be:	91 83       	std	Z+1, r25	; 0x01
    52c0:	80 83       	st	Z, r24
    52c2:	f3 01       	movw	r30, r6
    52c4:	ef cf       	rjmp	.-34     	; 0x52a4 <realloc+0x11c>
    52c6:	f0 93 75 03 	sts	0x0375, r31	; 0x800375 <__flp+0x1>
    52ca:	e0 93 74 03 	sts	0x0374, r30	; 0x800374 <__flp>
    52ce:	69 cf       	rjmp	.-302    	; 0x51a2 <realloc+0x1a>
    52d0:	48 16       	cp	r4, r24
    52d2:	59 06       	cpc	r5, r25
    52d4:	08 f4       	brcc	.+2      	; 0x52d8 <realloc+0x150>
    52d6:	2c 01       	movw	r4, r24
    52d8:	7d 01       	movw	r14, r26
    52da:	d3 01       	movw	r26, r6
    52dc:	9a cf       	rjmp	.-204    	; 0x5212 <realloc+0x8a>
    52de:	cb 01       	movw	r24, r22
    52e0:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <malloc>
    52e4:	7c 01       	movw	r14, r24
    52e6:	00 97       	sbiw	r24, 0x00	; 0
    52e8:	49 f0       	breq	.+18     	; 0x52fc <realloc+0x174>
    52ea:	ae 01       	movw	r20, r28
    52ec:	b8 01       	movw	r22, r16
    52ee:	0e 94 a8 29 	call	0x5350	; 0x5350 <memcpy>
    52f2:	c8 01       	movw	r24, r16
    52f4:	0e 94 3b 28 	call	0x5076	; 0x5076 <free>
    52f8:	87 01       	movw	r16, r14
    52fa:	53 cf       	rjmp	.-346    	; 0x51a2 <realloc+0x1a>
    52fc:	10 e0       	ldi	r17, 0x00	; 0
    52fe:	00 e0       	ldi	r16, 0x00	; 0
    5300:	50 cf       	rjmp	.-352    	; 0x51a2 <realloc+0x1a>

00005302 <atol>:
atol():
    5302:	1f 93       	push	r17
    5304:	fc 01       	movw	r30, r24
    5306:	99 27       	eor	r25, r25
    5308:	88 27       	eor	r24, r24
    530a:	bc 01       	movw	r22, r24
    530c:	e8 94       	clt
    530e:	11 91       	ld	r17, Z+
    5310:	10 32       	cpi	r17, 0x20	; 32
    5312:	e9 f3       	breq	.-6      	; 0x530e <atol+0xc>
    5314:	19 30       	cpi	r17, 0x09	; 9
    5316:	10 f0       	brcs	.+4      	; 0x531c <atol+0x1a>
    5318:	1e 30       	cpi	r17, 0x0E	; 14
    531a:	c8 f3       	brcs	.-14     	; 0x530e <atol+0xc>
    531c:	1b 32       	cpi	r17, 0x2B	; 43
    531e:	51 f0       	breq	.+20     	; 0x5334 <atol+0x32>
    5320:	1d 32       	cpi	r17, 0x2D	; 45
    5322:	49 f4       	brne	.+18     	; 0x5336 <atol+0x34>
    5324:	68 94       	set
    5326:	06 c0       	rjmp	.+12     	; 0x5334 <atol+0x32>
    5328:	0e 94 b8 29 	call	0x5370	; 0x5370 <__mulsi_const_10>
    532c:	61 0f       	add	r22, r17
    532e:	71 1d       	adc	r23, r1
    5330:	81 1d       	adc	r24, r1
    5332:	91 1d       	adc	r25, r1
    5334:	11 91       	ld	r17, Z+
    5336:	10 53       	subi	r17, 0x30	; 48
    5338:	1a 30       	cpi	r17, 0x0A	; 10
    533a:	b0 f3       	brcs	.-20     	; 0x5328 <atol+0x26>
    533c:	3e f4       	brtc	.+14     	; 0x534c <atol+0x4a>
    533e:	90 95       	com	r25
    5340:	80 95       	com	r24
    5342:	70 95       	com	r23
    5344:	61 95       	neg	r22
    5346:	7f 4f       	sbci	r23, 0xFF	; 255
    5348:	8f 4f       	sbci	r24, 0xFF	; 255
    534a:	9f 4f       	sbci	r25, 0xFF	; 255
    534c:	1f 91       	pop	r17
    534e:	08 95       	ret

00005350 <memcpy>:
memcpy():
    5350:	fb 01       	movw	r30, r22
    5352:	dc 01       	movw	r26, r24
    5354:	02 c0       	rjmp	.+4      	; 0x535a <memcpy+0xa>
    5356:	01 90       	ld	r0, Z+
    5358:	0d 92       	st	X+, r0
    535a:	41 50       	subi	r20, 0x01	; 1
    535c:	50 40       	sbci	r21, 0x00	; 0
    535e:	d8 f7       	brcc	.-10     	; 0x5356 <memcpy+0x6>
    5360:	08 95       	ret

00005362 <strcpy>:
strcpy():
    5362:	fb 01       	movw	r30, r22
    5364:	dc 01       	movw	r26, r24
    5366:	01 90       	ld	r0, Z+
    5368:	0d 92       	st	X+, r0
    536a:	00 20       	and	r0, r0
    536c:	e1 f7       	brne	.-8      	; 0x5366 <strcpy+0x4>
    536e:	08 95       	ret

00005370 <__mulsi_const_10>:
__mulsi_const_10():
    5370:	59 2f       	mov	r21, r25
    5372:	48 2f       	mov	r20, r24
    5374:	37 2f       	mov	r19, r23
    5376:	26 2f       	mov	r18, r22
    5378:	66 0f       	add	r22, r22
    537a:	77 1f       	adc	r23, r23
    537c:	88 1f       	adc	r24, r24
    537e:	99 1f       	adc	r25, r25
    5380:	66 0f       	add	r22, r22
    5382:	77 1f       	adc	r23, r23
    5384:	88 1f       	adc	r24, r24
    5386:	99 1f       	adc	r25, r25
    5388:	62 0f       	add	r22, r18
    538a:	73 1f       	adc	r23, r19
    538c:	84 1f       	adc	r24, r20
    538e:	95 1f       	adc	r25, r21
    5390:	66 0f       	add	r22, r22
    5392:	77 1f       	adc	r23, r23
    5394:	88 1f       	adc	r24, r24
    5396:	99 1f       	adc	r25, r25
    5398:	08 95       	ret

0000539a <eeprom_read_byte>:
eeprom_read_byte():
    539a:	e1 99       	sbic	0x1c, 1	; 28
    539c:	fe cf       	rjmp	.-4      	; 0x539a <eeprom_read_byte>
    539e:	9f bb       	out	0x1f, r25	; 31
    53a0:	8e bb       	out	0x1e, r24	; 30
    53a2:	e0 9a       	sbi	0x1c, 0	; 28
    53a4:	99 27       	eor	r25, r25
    53a6:	8d b3       	in	r24, 0x1d	; 29
    53a8:	08 95       	ret

000053aa <eeprom_write_byte>:
eeprom_write_byte():
    53aa:	26 2f       	mov	r18, r22

000053ac <eeprom_write_r18>:
    53ac:	e1 99       	sbic	0x1c, 1	; 28
    53ae:	fe cf       	rjmp	.-4      	; 0x53ac <eeprom_write_r18>
    53b0:	9f bb       	out	0x1f, r25	; 31
    53b2:	8e bb       	out	0x1e, r24	; 30
    53b4:	2d bb       	out	0x1d, r18	; 29
    53b6:	0f b6       	in	r0, 0x3f	; 63
    53b8:	f8 94       	cli
    53ba:	e2 9a       	sbi	0x1c, 2	; 28
    53bc:	e1 9a       	sbi	0x1c, 1	; 28
    53be:	0f be       	out	0x3f, r0	; 63
    53c0:	01 96       	adiw	r24, 0x01	; 1
    53c2:	08 95       	ret

000053c4 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    53c4:	2f 92       	push	r2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    53c6:	3f 92       	push	r3
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    53c8:	4f 92       	push	r4
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    53ca:	5f 92       	push	r5
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    53cc:	6f 92       	push	r6
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    53ce:	7f 92       	push	r7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    53d0:	8f 92       	push	r8
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    53d2:	9f 92       	push	r9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    53d4:	af 92       	push	r10
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    53d6:	bf 92       	push	r11
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    53d8:	cf 92       	push	r12
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    53da:	df 92       	push	r13
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    53dc:	ef 92       	push	r14
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    53de:	ff 92       	push	r15
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    53e0:	0f 93       	push	r16
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    53e2:	1f 93       	push	r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    53e4:	cf 93       	push	r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    53e6:	df 93       	push	r29
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    53e8:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    53ea:	de b7       	in	r29, 0x3e	; 62
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    53ec:	ca 1b       	sub	r28, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    53ee:	db 0b       	sbc	r29, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    53f0:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    53f2:	f8 94       	cli
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    53f4:	de bf       	out	0x3e, r29	; 62
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    53f6:	0f be       	out	0x3f, r0	; 63
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    53f8:	cd bf       	out	0x3d, r28	; 61
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    53fa:	09 94       	ijmp

000053fc <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    53fc:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    53fe:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    5400:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    5402:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    5404:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    5406:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    5408:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    540a:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    540c:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    540e:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    5410:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    5412:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    5414:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    5416:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    5418:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    541a:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    541c:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    541e:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    5420:	ce 0f       	add	r28, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    5422:	d1 1d       	adc	r29, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    5424:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    5426:	f8 94       	cli
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    5428:	de bf       	out	0x3e, r29	; 62
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    542a:	0f be       	out	0x3f, r0	; 63
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    542c:	cd bf       	out	0x3d, r28	; 61
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    542e:	ed 01       	movw	r28, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    5430:	08 95       	ret

00005432 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    5432:	14 e0       	ldi	r17, 0x04	; 4
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    5434:	c8 e3       	ldi	r28, 0x38	; 56
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    5436:	d4 e0       	ldi	r29, 0x04	; 4
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    5438:	04 c0       	rjmp	.+8      	; 0x5442 <__do_global_dtors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    543a:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    543c:	0e 94 7f 27 	call	0x4efe	; 0x4efe <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    5440:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    5442:	c9 33       	cpi	r28, 0x39	; 57
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    5444:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    5446:	c9 f7       	brne	.-14     	; 0x543a <__do_global_dtors+0x8>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    5448:	f8 94       	cli

0000544a <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    544a:	ff cf       	rjmp	.-2      	; 0x544a <__stop_program>
